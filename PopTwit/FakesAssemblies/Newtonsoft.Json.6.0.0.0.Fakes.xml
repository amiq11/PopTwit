<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json.6.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.NewtonsoftJsonDelegates">
            <summary>Newtonsoft.Json のスタブと shim に使用するカスタム デリゲートが含まれます</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId">
            <summary>Newtonsoft.Json.Bson.BsonObjectId の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.#ctor(Newtonsoft.Json.Bson.BsonObjectId)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.ConstructorByteArray">
            <summary>BsonObjectId.BsonObjectId(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.ValueGet">
            <summary>BsonObjectId.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.ValueSetByteArray">
            <summary>BsonObjectId.set_Value(Byte[] value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.AllInstances.ValueGet">
            <summary>BsonObjectId.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonObjectId.AllInstances.ValueSetByteArray">
            <summary>BsonObjectId.set_Value(Byte[] value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonReader">
            <summary>Newtonsoft.Json.Bson.BsonReader の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.#ctor(Newtonsoft.Json.Bson.BsonReader)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.BytesInSequenceByte">
            <summary>BsonReader.BytesInSequence(Byte b) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.Close">
            <summary>BsonReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ConstructorBinaryReader">
            <summary>BsonReader.BsonReader(BinaryReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ConstructorBinaryReaderBooleanDateTimeKind">
            <summary>BsonReader.BsonReader(BinaryReader reader, Boolean readRootValueAsArray, DateTimeKind dateTimeKindHandling) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ConstructorStream">
            <summary>BsonReader.BsonReader(Stream stream) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ConstructorStreamBooleanDateTimeKind">
            <summary>BsonReader.BsonReader(Stream stream, Boolean readRootValueAsArray, DateTimeKind dateTimeKindHandling) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.DateTimeKindHandlingGet">
            <summary>BsonReader.get_DateTimeKindHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.DateTimeKindHandlingSetDateTimeKind">
            <summary>BsonReader.set_DateTimeKindHandling(DateTimeKind value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.EnsureBuffers">
            <summary>BsonReader.EnsureBuffers() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.GetLastFullCharStopInt32">
            <summary>BsonReader.GetLastFullCharStop(Int32 start) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.GetStringInt32">
            <summary>BsonReader.GetString(Int32 length) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.JsonNet35BinaryCompatibilityGet">
            <summary>BsonReader.get_JsonNet35BinaryCompatibility() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.JsonNet35BinaryCompatibilitySetBoolean">
            <summary>BsonReader.set_JsonNet35BinaryCompatibility(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.MovePositionInt32">
            <summary>BsonReader.MovePosition(Int32 count) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.PopContext">
            <summary>BsonReader.PopContext() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.Read">
            <summary>BsonReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsBytes">
            <summary>BsonReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsDateTime">
            <summary>BsonReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsDateTimeOffset">
            <summary>BsonReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsDecimal">
            <summary>BsonReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsInt32">
            <summary>BsonReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadAsString">
            <summary>BsonReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadBinary">
            <summary>BsonReader.ReadBinary() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadByte">
            <summary>BsonReader.ReadByte() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadBytesInt32">
            <summary>BsonReader.ReadBytes(Int32 count) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadCodeWScope">
            <summary>BsonReader.ReadCodeWScope() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadDouble">
            <summary>BsonReader.ReadDouble() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadElement">
            <summary>BsonReader.ReadElement() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadInt32">
            <summary>BsonReader.ReadInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadInt64">
            <summary>BsonReader.ReadInt64() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadInternal">
            <summary>BsonReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadLengthString">
            <summary>BsonReader.ReadLengthString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadNormal">
            <summary>BsonReader.ReadNormal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadReference">
            <summary>BsonReader.ReadReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadRootValueAsArrayGet">
            <summary>BsonReader.get_ReadRootValueAsArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadRootValueAsArraySetBoolean">
            <summary>BsonReader.set_ReadRootValueAsArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.ReadString">
            <summary>BsonReader.ReadString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.StaticConstructor">
            <summary>BsonReader.BsonReader() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.BytesInSequenceByte">
            <summary>BsonReader.BytesInSequence(Byte b) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.Close">
            <summary>BsonReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.DateTimeKindHandlingGet">
            <summary>BsonReader.get_DateTimeKindHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.DateTimeKindHandlingSetDateTimeKind">
            <summary>BsonReader.set_DateTimeKindHandling(DateTimeKind value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.EnsureBuffers">
            <summary>BsonReader.EnsureBuffers() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.GetLastFullCharStopInt32">
            <summary>BsonReader.GetLastFullCharStop(Int32 start) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.GetStringInt32">
            <summary>BsonReader.GetString(Int32 length) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.JsonNet35BinaryCompatibilityGet">
            <summary>BsonReader.get_JsonNet35BinaryCompatibility() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.JsonNet35BinaryCompatibilitySetBoolean">
            <summary>BsonReader.set_JsonNet35BinaryCompatibility(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.MovePositionInt32">
            <summary>BsonReader.MovePosition(Int32 count) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.PopContext">
            <summary>BsonReader.PopContext() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.Read">
            <summary>BsonReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsBytes">
            <summary>BsonReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsDateTime">
            <summary>BsonReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsDateTimeOffset">
            <summary>BsonReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsDecimal">
            <summary>BsonReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsInt32">
            <summary>BsonReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadAsString">
            <summary>BsonReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadBinary">
            <summary>BsonReader.ReadBinary() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadByte">
            <summary>BsonReader.ReadByte() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadBytesInt32">
            <summary>BsonReader.ReadBytes(Int32 count) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadCodeWScope">
            <summary>BsonReader.ReadCodeWScope() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadDouble">
            <summary>BsonReader.ReadDouble() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadElement">
            <summary>BsonReader.ReadElement() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadInt32">
            <summary>BsonReader.ReadInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadInt64">
            <summary>BsonReader.ReadInt64() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadInternal">
            <summary>BsonReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadLengthString">
            <summary>BsonReader.ReadLengthString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadNormal">
            <summary>BsonReader.ReadNormal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadReference">
            <summary>BsonReader.ReadReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadRootValueAsArrayGet">
            <summary>BsonReader.get_ReadRootValueAsArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadRootValueAsArraySetBoolean">
            <summary>BsonReader.set_ReadRootValueAsArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonReader.AllInstances.ReadString">
            <summary>BsonReader.ReadString() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter">
            <summary>Newtonsoft.Json.Bson.BsonWriter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.#ctor(Newtonsoft.Json.Bson.BsonWriter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.Close">
            <summary>BsonWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.ConstructorBinaryWriter">
            <summary>BsonWriter.BsonWriter(BinaryWriter writer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.ConstructorStream">
            <summary>BsonWriter.BsonWriter(Stream stream) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.DateTimeKindHandlingGet">
            <summary>BsonWriter.get_DateTimeKindHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.DateTimeKindHandlingSetDateTimeKind">
            <summary>BsonWriter.set_DateTimeKindHandling(DateTimeKind value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.Flush">
            <summary>BsonWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.RemoveParent">
            <summary>BsonWriter.RemoveParent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteCommentString">
            <summary>BsonWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteEndJsonToken">
            <summary>BsonWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteNull">
            <summary>BsonWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteObjectIdByteArray">
            <summary>BsonWriter.WriteObjectId(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WritePropertyNameString">
            <summary>BsonWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteRawString">
            <summary>BsonWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteRawValueString">
            <summary>BsonWriter.WriteRawValue(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteRegexStringString">
            <summary>BsonWriter.WriteRegex(String pattern, String options) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteStartArray">
            <summary>BsonWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteStartConstructorString">
            <summary>BsonWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteStartObject">
            <summary>BsonWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteUndefined">
            <summary>BsonWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueBoolean">
            <summary>BsonWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueByte">
            <summary>BsonWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueByteArray">
            <summary>BsonWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueChar">
            <summary>BsonWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueDateTime">
            <summary>BsonWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueDateTimeOffset">
            <summary>BsonWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueDecimal">
            <summary>BsonWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueDouble">
            <summary>BsonWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueGuid">
            <summary>BsonWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueInt16">
            <summary>BsonWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueInt32">
            <summary>BsonWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueInt64">
            <summary>BsonWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueObject">
            <summary>BsonWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueSByte">
            <summary>BsonWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueSingle">
            <summary>BsonWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueString">
            <summary>BsonWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueTimeSpan">
            <summary>BsonWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueUInt16">
            <summary>BsonWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueUInt32">
            <summary>BsonWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueUInt64">
            <summary>BsonWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.WriteValueUri">
            <summary>BsonWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.Close">
            <summary>BsonWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.DateTimeKindHandlingGet">
            <summary>BsonWriter.get_DateTimeKindHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.DateTimeKindHandlingSetDateTimeKind">
            <summary>BsonWriter.set_DateTimeKindHandling(DateTimeKind value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.Flush">
            <summary>BsonWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.RemoveParent">
            <summary>BsonWriter.RemoveParent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteCommentString">
            <summary>BsonWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteEndJsonToken">
            <summary>BsonWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteNull">
            <summary>BsonWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteObjectIdByteArray">
            <summary>BsonWriter.WriteObjectId(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WritePropertyNameString">
            <summary>BsonWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteRawString">
            <summary>BsonWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteRawValueString">
            <summary>BsonWriter.WriteRawValue(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteRegexStringString">
            <summary>BsonWriter.WriteRegex(String pattern, String options) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteStartArray">
            <summary>BsonWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteStartConstructorString">
            <summary>BsonWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteStartObject">
            <summary>BsonWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteUndefined">
            <summary>BsonWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueBoolean">
            <summary>BsonWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueByte">
            <summary>BsonWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueByteArray">
            <summary>BsonWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueChar">
            <summary>BsonWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueDateTime">
            <summary>BsonWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueDateTimeOffset">
            <summary>BsonWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueDecimal">
            <summary>BsonWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueDouble">
            <summary>BsonWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueGuid">
            <summary>BsonWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueInt16">
            <summary>BsonWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueInt32">
            <summary>BsonWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueInt64">
            <summary>BsonWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueObject">
            <summary>BsonWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueSByte">
            <summary>BsonWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueSingle">
            <summary>BsonWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueString">
            <summary>BsonWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueTimeSpan">
            <summary>BsonWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueUInt16">
            <summary>BsonWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueUInt32">
            <summary>BsonWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueUInt64">
            <summary>BsonWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.ShimBsonWriter.AllInstances.WriteValueUri">
            <summary>BsonWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId">
            <summary>Newtonsoft.Json.Bson.BsonObjectId のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId.#ctor(System.Byte[])">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId.InitializeStub">
            <summary>type StubBsonObjectId の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonObjectId.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.StubBsonReader">
            <summary>Newtonsoft.Json.Bson.BsonReader のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.#ctor(System.IO.BinaryReader)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.#ctor(System.IO.Stream)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.AttachBackingFieldToQuoteChar">
            <summary>バッキング フィールドを持つプロパティとして StubBsonReader.QuoteChar をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Close">
            <summary>BsonReader.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Close01">
            <summary>BsonReader.Close() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.DepthGet">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Dispose(System.Boolean)">
            <summary>JsonReader.Dispose(Boolean disposing) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.InitializeStub">
            <summary>type StubBsonReader の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.PathGet">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Read">
            <summary>BsonReader.Read() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Read01">
            <summary>BsonReader.Read() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsBytes">
            <summary>BsonReader.ReadAsBytes() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsBytes01">
            <summary>BsonReader.ReadAsBytes() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDateTime">
            <summary>BsonReader.ReadAsDateTime() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDateTime01">
            <summary>BsonReader.ReadAsDateTime() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDateTimeOffset">
            <summary>BsonReader.ReadAsDateTimeOffset() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDateTimeOffset01">
            <summary>BsonReader.ReadAsDateTimeOffset() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDecimal">
            <summary>BsonReader.ReadAsDecimal() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsDecimal01">
            <summary>BsonReader.ReadAsDecimal() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsInt32">
            <summary>BsonReader.ReadAsInt32() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsInt3201">
            <summary>BsonReader.ReadAsInt32() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsString">
            <summary>BsonReader.ReadAsString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ReadAsString01">
            <summary>BsonReader.ReadAsString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ValueGet">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Depth">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Path">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.QuoteChar">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.TokenType">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.Value">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonReader.ValueType">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.Fakes.StubBsonWriter">
            <summary>Newtonsoft.Json.Bson.BsonWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.#ctor(System.IO.Stream)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.Close">
            <summary>BsonWriter.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.Close01">
            <summary>BsonWriter.Close() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.Flush">
            <summary>BsonWriter.Flush() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.Flush01">
            <summary>BsonWriter.Flush() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.InitializeStub">
            <summary>type StubBsonWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteComment(System.String)">
            <summary>BsonWriter.WriteComment(String text) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteCommentString">
            <summary>BsonWriter.WriteComment(String text) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEnd">
            <summary>JsonWriter.WriteEnd() の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>BsonWriter.WriteEnd(JsonToken token) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEnd01">
            <summary>JsonWriter.WriteEnd() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndArray01">
            <summary>JsonWriter.WriteEndArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndConstructor01">
            <summary>JsonWriter.WriteEndConstructor() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndJsonToken">
            <summary>BsonWriter.WriteEnd(JsonToken token) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteEndObject01">
            <summary>JsonWriter.WriteEndObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteIndent">
            <summary>JsonWriter.WriteIndent() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteIndent01">
            <summary>JsonWriter.WriteIndent() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteIndentSpace">
            <summary>JsonWriter.WriteIndentSpace() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteIndentSpace01">
            <summary>JsonWriter.WriteIndentSpace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteNull">
            <summary>BsonWriter.WriteNull() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteNull01">
            <summary>BsonWriter.WriteNull() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WritePropertyName(System.String)">
            <summary>BsonWriter.WritePropertyName(String name) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WritePropertyNameString">
            <summary>BsonWriter.WritePropertyName(String name) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WritePropertyNameStringBoolean">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteRaw(System.String)">
            <summary>BsonWriter.WriteRaw(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteRawString">
            <summary>BsonWriter.WriteRaw(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteRawValue(System.String)">
            <summary>BsonWriter.WriteRawValue(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteRawValueString">
            <summary>BsonWriter.WriteRawValue(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartArray">
            <summary>BsonWriter.WriteStartArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartArray01">
            <summary>BsonWriter.WriteStartArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartConstructor(System.String)">
            <summary>BsonWriter.WriteStartConstructor(String name) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartConstructorString">
            <summary>BsonWriter.WriteStartConstructor(String name) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartObject">
            <summary>BsonWriter.WriteStartObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteStartObject01">
            <summary>BsonWriter.WriteStartObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteUndefined">
            <summary>BsonWriter.WriteUndefined() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteUndefined01">
            <summary>BsonWriter.WriteUndefined() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteValueDelimiter">
            <summary>JsonWriter.WriteValueDelimiter() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteValueDelimiter01">
            <summary>JsonWriter.WriteValueDelimiter() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteWhitespace(System.String)">
            <summary>JsonWriter.WriteWhitespace(String ws) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.WriteWhitespaceString">
            <summary>JsonWriter.WriteWhitespace(String ws) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.Fakes.StubBsonWriter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter">
            <summary>Newtonsoft.Json.Converters.BsonObjectIdConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.#ctor(Newtonsoft.Json.Converters.BsonObjectIdConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.CanConvertType">
            <summary>BsonObjectIdConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.Constructor">
            <summary>BsonObjectIdConverter.BsonObjectIdConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>BsonObjectIdConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>BsonObjectIdConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.AllInstances.CanConvertType">
            <summary>BsonObjectIdConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>BsonObjectIdConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimBsonObjectIdConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>BsonObjectIdConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1">
            <summary>Newtonsoft.Json.Converters.CustomCreationConverter`1 の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.#ctor(Newtonsoft.Json.Converters.CustomCreationConverter{`0})">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.CanConvertType">
            <summary>CustomCreationConverter`1.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.CanWriteGet">
            <summary>CustomCreationConverter`1.get_CanWrite() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.Constructor">
            <summary>CustomCreationConverter`1.CustomCreationConverter`1() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>CustomCreationConverter`1.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>CustomCreationConverter`1.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.AllInstances.CanConvertType">
            <summary>CustomCreationConverter`1.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.AllInstances.CanWriteGet">
            <summary>CustomCreationConverter`1.get_CanWrite() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>CustomCreationConverter`1.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimCustomCreationConverter`1.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>CustomCreationConverter`1.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase">
            <summary>Newtonsoft.Json.Converters.DateTimeConverterBase の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.#ctor(Newtonsoft.Json.Converters.DateTimeConverterBase)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.CanConvertType">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.Constructor">
            <summary>DateTimeConverterBase.DateTimeConverterBase() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDateTimeConverterBase.AllInstances.CanConvertType">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter">
            <summary>Newtonsoft.Json.Converters.DiscriminatedUnionConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.#ctor(Newtonsoft.Json.Converters.DiscriminatedUnionConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.CanConvertType">
            <summary>DiscriminatedUnionConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.Constructor">
            <summary>DiscriminatedUnionConverter.DiscriminatedUnionConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.EnsureInitializedType">
            <summary>DiscriminatedUnionConverter.EnsureInitialized(Type attributeType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.ReadAndAssertJsonReader">
            <summary>DiscriminatedUnionConverter.ReadAndAssert(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.ReadAndAssertPropertyJsonReaderString">
            <summary>DiscriminatedUnionConverter.ReadAndAssertProperty(JsonReader reader, String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.AllInstances.CanConvertType">
            <summary>DiscriminatedUnionConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimDiscriminatedUnionConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter">
            <summary>Newtonsoft.Json.Converters.IsoDateTimeConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.#ctor(Newtonsoft.Json.Converters.IsoDateTimeConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.Constructor">
            <summary>IsoDateTimeConverter.IsoDateTimeConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.CultureGet">
            <summary>IsoDateTimeConverter.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.CultureSetCultureInfo">
            <summary>IsoDateTimeConverter.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.DateTimeFormatGet">
            <summary>IsoDateTimeConverter.get_DateTimeFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.DateTimeFormatSetString">
            <summary>IsoDateTimeConverter.set_DateTimeFormat(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.DateTimeStylesGet">
            <summary>IsoDateTimeConverter.get_DateTimeStyles() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.DateTimeStylesSetDateTimeStyles">
            <summary>IsoDateTimeConverter.set_DateTimeStyles(DateTimeStyles value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>IsoDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>IsoDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.CultureGet">
            <summary>IsoDateTimeConverter.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.CultureSetCultureInfo">
            <summary>IsoDateTimeConverter.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.DateTimeFormatGet">
            <summary>IsoDateTimeConverter.get_DateTimeFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.DateTimeFormatSetString">
            <summary>IsoDateTimeConverter.set_DateTimeFormat(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.DateTimeStylesGet">
            <summary>IsoDateTimeConverter.get_DateTimeStyles() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.DateTimeStylesSetDateTimeStyles">
            <summary>IsoDateTimeConverter.set_DateTimeStyles(DateTimeStyles value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>IsoDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimIsoDateTimeConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>IsoDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter">
            <summary>Newtonsoft.Json.Converters.JavaScriptDateTimeConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.#ctor(Newtonsoft.Json.Converters.JavaScriptDateTimeConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.Constructor">
            <summary>JavaScriptDateTimeConverter.JavaScriptDateTimeConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimJavaScriptDateTimeConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter">
            <summary>Newtonsoft.Json.Converters.KeyValuePairConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.#ctor(Newtonsoft.Json.Converters.KeyValuePairConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.CanConvertType">
            <summary>KeyValuePairConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.Constructor">
            <summary>KeyValuePairConverter.KeyValuePairConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>KeyValuePairConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>KeyValuePairConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.AllInstances.CanConvertType">
            <summary>KeyValuePairConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>KeyValuePairConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimKeyValuePairConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>KeyValuePairConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter">
            <summary>Newtonsoft.Json.Converters.RegexConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.#ctor(Newtonsoft.Json.Converters.RegexConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.CanConvertType">
            <summary>RegexConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.Constructor">
            <summary>RegexConverter.RegexConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.HasFlagRegexOptionsRegexOptions">
            <summary>RegexConverter.HasFlag(RegexOptions options, RegexOptions flag) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>RegexConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.ReadRegexObjectJsonReaderJsonSerializer">
            <summary>RegexConverter.ReadRegexObject(JsonReader reader, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.ReadRegexStringJsonReader">
            <summary>RegexConverter.ReadRegexString(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.WriteBsonBsonWriterRegex">
            <summary>RegexConverter.WriteBson(BsonWriter writer, Regex regex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.WriteJsonJsonWriterRegexJsonSerializer">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.CanConvertType">
            <summary>RegexConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.HasFlagRegexOptionsRegexOptions">
            <summary>RegexConverter.HasFlag(RegexOptions options, RegexOptions flag) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>RegexConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.ReadRegexObjectJsonReaderJsonSerializer">
            <summary>RegexConverter.ReadRegexObject(JsonReader reader, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.ReadRegexStringJsonReader">
            <summary>RegexConverter.ReadRegexString(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.WriteBsonBsonWriterRegex">
            <summary>RegexConverter.WriteBson(BsonWriter writer, Regex regex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimRegexConverter.AllInstances.WriteJsonJsonWriterRegexJsonSerializer">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Regex regex, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter">
            <summary>Newtonsoft.Json.Converters.StringEnumConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.#ctor(Newtonsoft.Json.Converters.StringEnumConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllowIntegerValuesGet">
            <summary>StringEnumConverter.get_AllowIntegerValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllowIntegerValuesSetBoolean">
            <summary>StringEnumConverter.set_AllowIntegerValues(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.CamelCaseTextGet">
            <summary>StringEnumConverter.get_CamelCaseText() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.CamelCaseTextSetBoolean">
            <summary>StringEnumConverter.set_CamelCaseText(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.CanConvertType">
            <summary>StringEnumConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.Constructor">
            <summary>StringEnumConverter.StringEnumConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>StringEnumConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>StringEnumConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter._GetEnumNameMapb__1EnumMemberAttribute">
            <summary>StringEnumConverter.&lt;GetEnumNameMap&gt;b__1(EnumMemberAttribute a) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.AllowIntegerValuesGet">
            <summary>StringEnumConverter.get_AllowIntegerValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.AllowIntegerValuesSetBoolean">
            <summary>StringEnumConverter.set_AllowIntegerValues(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.CamelCaseTextGet">
            <summary>StringEnumConverter.get_CamelCaseText() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.CamelCaseTextSetBoolean">
            <summary>StringEnumConverter.set_CamelCaseText(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.CanConvertType">
            <summary>StringEnumConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>StringEnumConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimStringEnumConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>StringEnumConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter">
            <summary>Newtonsoft.Json.Converters.VersionConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.#ctor(Newtonsoft.Json.Converters.VersionConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.CanConvertType">
            <summary>VersionConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.Constructor">
            <summary>VersionConverter.VersionConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>VersionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>VersionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.AllInstances.CanConvertType">
            <summary>VersionConverter.CanConvert(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.AllInstances.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>VersionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.ShimVersionConverter.AllInstances.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>VersionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter">
            <summary>Newtonsoft.Json.Converters.BsonObjectIdConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanConvert(System.Type)">
            <summary>BsonObjectIdConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanConvertType">
            <summary>BsonObjectIdConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.InitializeStub">
            <summary>type StubBsonObjectIdConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>BsonObjectIdConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>BsonObjectIdConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>BsonObjectIdConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>BsonObjectIdConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubBsonObjectIdConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1">
            <summary>Newtonsoft.Json.Converters.CustomCreationConverter`1 のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanConvert(System.Type)">
            <summary>CustomCreationConverter`1.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanConvertType">
            <summary>CustomCreationConverter`1.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanWriteGet">
            <summary>CustomCreationConverter`1.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.Create(System.Type)">
            <summary>CustomCreationConverter`1.Create(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CreateType">
            <summary>CustomCreationConverter`1.Create(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.InitializeStub">
            <summary>type StubCustomCreationConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>CustomCreationConverter`1.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>CustomCreationConverter`1.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>CustomCreationConverter`1.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>CustomCreationConverter`1.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.CanWrite">
            <summary>CustomCreationConverter`1.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubCustomCreationConverter`1.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase">
            <summary>Newtonsoft.Json.Converters.DateTimeConverterBase のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanConvert(System.Type)">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanConvertType">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.InitializeStub">
            <summary>type StubDateTimeConverterBase の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JsonConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>JsonConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JsonConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>JsonConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDateTimeConverterBase.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter">
            <summary>Newtonsoft.Json.Converters.DiscriminatedUnionConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>DiscriminatedUnionConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanConvertType">
            <summary>DiscriminatedUnionConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.InitializeStub">
            <summary>type StubDiscriminatedUnionConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>DiscriminatedUnionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>DiscriminatedUnionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>DiscriminatedUnionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubDiscriminatedUnionConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter">
            <summary>Newtonsoft.Json.Converters.IsoDateTimeConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanConvert(System.Type)">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanConvertType">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.InitializeStub">
            <summary>type StubIsoDateTimeConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>IsoDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>IsoDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>IsoDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>IsoDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubIsoDateTimeConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter">
            <summary>Newtonsoft.Json.Converters.JavaScriptDateTimeConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanConvert(System.Type)">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanConvertType">
            <summary>DateTimeConverterBase.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.InitializeStub">
            <summary>type StubJavaScriptDateTimeConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JavaScriptDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JavaScriptDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>JavaScriptDateTimeConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubJavaScriptDateTimeConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter">
            <summary>Newtonsoft.Json.Converters.KeyValuePairConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanConvert(System.Type)">
            <summary>KeyValuePairConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanConvertType">
            <summary>KeyValuePairConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.InitializeStub">
            <summary>type StubKeyValuePairConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>KeyValuePairConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>KeyValuePairConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>KeyValuePairConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>KeyValuePairConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubKeyValuePairConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubRegexConverter">
            <summary>Newtonsoft.Json.Converters.RegexConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanConvert(System.Type)">
            <summary>RegexConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanConvertType">
            <summary>RegexConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.InitializeStub">
            <summary>type StubRegexConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>RegexConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>RegexConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>RegexConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubRegexConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter">
            <summary>Newtonsoft.Json.Converters.StringEnumConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanConvert(System.Type)">
            <summary>StringEnumConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanConvertType">
            <summary>StringEnumConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.InitializeStub">
            <summary>type StubStringEnumConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>StringEnumConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>StringEnumConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>StringEnumConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>StringEnumConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubStringEnumConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.Fakes.StubVersionConverter">
            <summary>Newtonsoft.Json.Converters.VersionConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanConvert(System.Type)">
            <summary>VersionConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanConvertType">
            <summary>VersionConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.InitializeStub">
            <summary>type StubVersionConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>VersionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>VersionConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>VersionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>VersionConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.Fakes.StubVersionConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute">
            <summary>Newtonsoft.Json.JsonArrayAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.#ctor(Newtonsoft.Json.JsonArrayAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.AllowNullItemsGet">
            <summary>JsonArrayAttribute.get_AllowNullItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.AllowNullItemsSetBoolean">
            <summary>JsonArrayAttribute.set_AllowNullItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.Constructor">
            <summary>JsonArrayAttribute.JsonArrayAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.ConstructorBoolean">
            <summary>JsonArrayAttribute.JsonArrayAttribute(Boolean allowNullItems) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.ConstructorString">
            <summary>JsonArrayAttribute.JsonArrayAttribute(String id) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.AllInstances.AllowNullItemsGet">
            <summary>JsonArrayAttribute.get_AllowNullItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonArrayAttribute.AllInstances.AllowNullItemsSetBoolean">
            <summary>JsonArrayAttribute.set_AllowNullItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute">
            <summary>Newtonsoft.Json.JsonConstructorAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.#ctor(Newtonsoft.Json.JsonConstructorAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.Constructor">
            <summary>JsonConstructorAttribute.JsonConstructorAttribute() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConstructorAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute">
            <summary>Newtonsoft.Json.JsonContainerAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.#ctor(Newtonsoft.Json.JsonContainerAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.Constructor">
            <summary>JsonContainerAttribute.JsonContainerAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ConstructorString">
            <summary>JsonContainerAttribute.JsonContainerAttribute(String id) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.DescriptionGet">
            <summary>JsonContainerAttribute.get_Description() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.DescriptionSetString">
            <summary>JsonContainerAttribute.set_Description(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.IdGet">
            <summary>JsonContainerAttribute.get_Id() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.IdSetString">
            <summary>JsonContainerAttribute.set_Id(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.IsReferenceGet">
            <summary>JsonContainerAttribute.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.IsReferenceSetBoolean">
            <summary>JsonContainerAttribute.set_IsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemConverterTypeGet">
            <summary>JsonContainerAttribute.get_ItemConverterType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemConverterTypeSetType">
            <summary>JsonContainerAttribute.set_ItemConverterType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemIsReferenceGet">
            <summary>JsonContainerAttribute.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemIsReferenceSetBoolean">
            <summary>JsonContainerAttribute.set_ItemIsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemReferenceLoopHandlingGet">
            <summary>JsonContainerAttribute.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonContainerAttribute.set_ItemReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemTypeNameHandlingGet">
            <summary>JsonContainerAttribute.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.ItemTypeNameHandlingSetTypeNameHandling">
            <summary>JsonContainerAttribute.set_ItemTypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.TitleGet">
            <summary>JsonContainerAttribute.get_Title() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.TitleSetString">
            <summary>JsonContainerAttribute.set_Title(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.DescriptionGet">
            <summary>JsonContainerAttribute.get_Description() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.DescriptionSetString">
            <summary>JsonContainerAttribute.set_Description(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.IdGet">
            <summary>JsonContainerAttribute.get_Id() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.IdSetString">
            <summary>JsonContainerAttribute.set_Id(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.IsReferenceGet">
            <summary>JsonContainerAttribute.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.IsReferenceSetBoolean">
            <summary>JsonContainerAttribute.set_IsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemConverterTypeGet">
            <summary>JsonContainerAttribute.get_ItemConverterType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemConverterTypeSetType">
            <summary>JsonContainerAttribute.set_ItemConverterType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemIsReferenceGet">
            <summary>JsonContainerAttribute.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemIsReferenceSetBoolean">
            <summary>JsonContainerAttribute.set_ItemIsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemReferenceLoopHandlingGet">
            <summary>JsonContainerAttribute.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonContainerAttribute.set_ItemReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemTypeNameHandlingGet">
            <summary>JsonContainerAttribute.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.ItemTypeNameHandlingSetTypeNameHandling">
            <summary>JsonContainerAttribute.set_ItemTypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.TitleGet">
            <summary>JsonContainerAttribute.get_Title() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonContainerAttribute.AllInstances.TitleSetString">
            <summary>JsonContainerAttribute.set_Title(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConvert">
            <summary>Newtonsoft.Json.JsonConvert の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeAnonymousTypeOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,``0})">
            <summary>JsonConvert.DeserializeAnonymousType(String value, !!0 anonymousTypeObject) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeAnonymousTypeOf1StringM0JsonSerializerSettings``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0,Newtonsoft.Json.JsonSerializerSettings,``0})">
            <summary>JsonConvert.DeserializeAnonymousType(String value, !!0 anonymousTypeObject, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>JsonConvert.DeserializeObject(String value) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectOf1StringJsonConverterArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Newtonsoft.Json.JsonConverter[],``0})">
            <summary>JsonConvert.DeserializeObject(String value, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectOf1StringJsonSerializerSettings``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,Newtonsoft.Json.JsonSerializerSettings,``0})">
            <summary>JsonConvert.DeserializeObject(String value, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DefaultSettingsGet">
            <summary>JsonConvert.get_DefaultSettings() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DefaultSettingsSetFuncOfJsonSerializerSettings">
            <summary>JsonConvert.set_DefaultSettings(Func`1&lt;JsonSerializerSettings&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectString">
            <summary>JsonConvert.DeserializeObject(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectStringJsonSerializerSettings">
            <summary>JsonConvert.DeserializeObject(String value, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectStringType">
            <summary>JsonConvert.DeserializeObject(String value, Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectStringTypeJsonConverterArray">
            <summary>JsonConvert.DeserializeObject(String value, Type type, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.DeserializeObjectStringTypeJsonSerializerSettings">
            <summary>JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.EnsureDecimalPlaceDoubleString">
            <summary>JsonConvert.EnsureDecimalPlace(Double value, String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.EnsureDecimalPlaceString">
            <summary>JsonConvert.EnsureDecimalPlace(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.EnsureFloatFormatDoubleStringFloatFormatHandlingCharBoolean">
            <summary>JsonConvert.EnsureFloatFormat(Double value, String text, FloatFormatHandling floatFormatHandling, Char quoteChar, Boolean nullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.PopulateObjectStringObject">
            <summary>JsonConvert.PopulateObject(String value, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.PopulateObjectStringObjectJsonSerializerSettings">
            <summary>JsonConvert.PopulateObject(String value, Object target, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectInternalObjectTypeJsonSerializer">
            <summary>JsonConvert.SerializeObjectInternal(Object value, Type type, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObject">
            <summary>JsonConvert.SerializeObject(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectFormatting">
            <summary>JsonConvert.SerializeObject(Object value, Formatting formatting) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectFormattingJsonConverterArray">
            <summary>JsonConvert.SerializeObject(Object value, Formatting formatting, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectFormattingJsonSerializerSettings">
            <summary>JsonConvert.SerializeObject(Object value, Formatting formatting, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectJsonConverterArray">
            <summary>JsonConvert.SerializeObject(Object value, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectJsonSerializerSettings">
            <summary>JsonConvert.SerializeObject(Object value, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectTypeFormattingJsonSerializerSettings">
            <summary>JsonConvert.SerializeObject(Object value, Type type, Formatting formatting, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.SerializeObjectObjectTypeJsonSerializerSettings">
            <summary>JsonConvert.SerializeObject(Object value, Type type, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.StaticConstructor">
            <summary>JsonConvert.JsonConvert() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringBoolean">
            <summary>JsonConvert.ToString(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringByte">
            <summary>JsonConvert.ToString(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringChar">
            <summary>JsonConvert.ToString(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDateTime">
            <summary>JsonConvert.ToString(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDateTimeDateFormatHandlingDateTimeZoneHandling">
            <summary>JsonConvert.ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDateTimeOffset">
            <summary>JsonConvert.ToString(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDateTimeOffsetDateFormatHandling">
            <summary>JsonConvert.ToString(DateTimeOffset value, DateFormatHandling format) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDecimal">
            <summary>JsonConvert.ToString(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDouble">
            <summary>JsonConvert.ToString(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringDoubleFloatFormatHandlingCharBoolean">
            <summary>JsonConvert.ToString(Double value, FloatFormatHandling floatFormatHandling, Char quoteChar, Boolean nullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringEnum">
            <summary>JsonConvert.ToString(Enum value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringGuid">
            <summary>JsonConvert.ToString(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringGuidChar">
            <summary>JsonConvert.ToString(Guid value, Char quoteChar) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringInt16">
            <summary>JsonConvert.ToString(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringInt32">
            <summary>JsonConvert.ToString(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringInt64">
            <summary>JsonConvert.ToString(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringObject">
            <summary>JsonConvert.ToString(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringSByte">
            <summary>JsonConvert.ToString(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringSingle">
            <summary>JsonConvert.ToString(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringSingleFloatFormatHandlingCharBoolean">
            <summary>JsonConvert.ToString(Single value, FloatFormatHandling floatFormatHandling, Char quoteChar, Boolean nullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringString">
            <summary>JsonConvert.ToString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringStringChar">
            <summary>JsonConvert.ToString(String value, Char delimiter) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringTimeSpan">
            <summary>JsonConvert.ToString(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringTimeSpanChar">
            <summary>JsonConvert.ToString(TimeSpan value, Char quoteChar) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringUInt16">
            <summary>JsonConvert.ToString(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringUInt32">
            <summary>JsonConvert.ToString(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringUInt64">
            <summary>JsonConvert.ToString(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringUri">
            <summary>JsonConvert.ToString(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConvert.ToStringUriChar">
            <summary>JsonConvert.ToString(Uri value, Char quoteChar) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverter">
            <summary>Newtonsoft.Json.JsonConverter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverter.#ctor(Newtonsoft.Json.JsonConverter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.Constructor">
            <summary>JsonConverter.JsonConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.AllInstances.CanReadGet">
            <summary>JsonConverter.get_CanRead() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.AllInstances.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverter.AllInstances.GetSchema">
            <summary>JsonConverter.GetSchema() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute">
            <summary>Newtonsoft.Json.JsonConverterAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.#ctor(Newtonsoft.Json.JsonConverterAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.ConstructorType">
            <summary>JsonConverterAttribute.JsonConverterAttribute(Type converterType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.ConverterTypeGet">
            <summary>JsonConverterAttribute.get_ConverterType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.CreateJsonConverterInstanceType">
            <summary>JsonConverterAttribute.CreateJsonConverterInstance(Type converterType) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterAttribute.AllInstances.ConverterTypeGet">
            <summary>JsonConverterAttribute.get_ConverterType() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverterCollection">
            <summary>Newtonsoft.Json.JsonConverterCollection の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.#ctor(Newtonsoft.Json.JsonConverterCollection)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.JsonConverter})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.Generic.IReadOnlyCollection{Newtonsoft.Json.JsonConverter})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Bind(System.Collections.Generic.IReadOnlyList{Newtonsoft.Json.JsonConverter})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.Constructor">
            <summary>JsonConverterCollection.JsonConverterCollection() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonConverterCollection.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute">
            <summary>Newtonsoft.Json.JsonDictionaryAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.#ctor(Newtonsoft.Json.JsonDictionaryAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.Constructor">
            <summary>JsonDictionaryAttribute.JsonDictionaryAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.ConstructorString">
            <summary>JsonDictionaryAttribute.JsonDictionaryAttribute(String id) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonDictionaryAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonException">
            <summary>Newtonsoft.Json.JsonException の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonException.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonException.#ctor(Newtonsoft.Json.JsonException)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonException.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonException.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonException.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonException.Constructor">
            <summary>JsonException.JsonException() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonException.ConstructorString">
            <summary>JsonException.JsonException(String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonException.ConstructorStringException">
            <summary>JsonException.JsonException(String message, Exception innerException) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonException.CreateIJsonLineInfoStringString">
            <summary>JsonException.Create(IJsonLineInfo lineInfo, String path, String message) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonException.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute">
            <summary>Newtonsoft.Json.JsonExtensionDataAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.#ctor(Newtonsoft.Json.JsonExtensionDataAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.Constructor">
            <summary>JsonExtensionDataAttribute.JsonExtensionDataAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.ReadDataGet">
            <summary>JsonExtensionDataAttribute.get_ReadData() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.ReadDataSetBoolean">
            <summary>JsonExtensionDataAttribute.set_ReadData(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.WriteDataGet">
            <summary>JsonExtensionDataAttribute.get_WriteData() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.WriteDataSetBoolean">
            <summary>JsonExtensionDataAttribute.set_WriteData(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.AllInstances.ReadDataGet">
            <summary>JsonExtensionDataAttribute.get_ReadData() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.AllInstances.ReadDataSetBoolean">
            <summary>JsonExtensionDataAttribute.set_ReadData(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.AllInstances.WriteDataGet">
            <summary>JsonExtensionDataAttribute.get_WriteData() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonExtensionDataAttribute.AllInstances.WriteDataSetBoolean">
            <summary>JsonExtensionDataAttribute.set_WriteData(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute">
            <summary>Newtonsoft.Json.JsonIgnoreAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.#ctor(Newtonsoft.Json.JsonIgnoreAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.Constructor">
            <summary>JsonIgnoreAttribute.JsonIgnoreAttribute() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonIgnoreAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute">
            <summary>Newtonsoft.Json.JsonObjectAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.#ctor(Newtonsoft.Json.JsonObjectAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.Constructor">
            <summary>JsonObjectAttribute.JsonObjectAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.ConstructorMemberSerialization">
            <summary>JsonObjectAttribute.JsonObjectAttribute(MemberSerialization memberSerialization) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.ConstructorString">
            <summary>JsonObjectAttribute.JsonObjectAttribute(String id) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.ItemRequiredGet">
            <summary>JsonObjectAttribute.get_ItemRequired() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.ItemRequiredSetRequired">
            <summary>JsonObjectAttribute.set_ItemRequired(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.MemberSerializationGet">
            <summary>JsonObjectAttribute.get_MemberSerialization() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.MemberSerializationSetMemberSerialization">
            <summary>JsonObjectAttribute.set_MemberSerialization(MemberSerialization value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.AllInstances.ItemRequiredGet">
            <summary>JsonObjectAttribute.get_ItemRequired() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.AllInstances.ItemRequiredSetRequired">
            <summary>JsonObjectAttribute.set_ItemRequired(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.AllInstances.MemberSerializationGet">
            <summary>JsonObjectAttribute.get_MemberSerialization() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonObjectAttribute.AllInstances.MemberSerializationSetMemberSerialization">
            <summary>JsonObjectAttribute.set_MemberSerialization(MemberSerialization value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute">
            <summary>Newtonsoft.Json.JsonPropertyAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.#ctor(Newtonsoft.Json.JsonPropertyAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.Constructor">
            <summary>JsonPropertyAttribute.JsonPropertyAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ConstructorString">
            <summary>JsonPropertyAttribute.JsonPropertyAttribute(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.DefaultValueHandlingGet">
            <summary>JsonPropertyAttribute.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonPropertyAttribute.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.IsReferenceGet">
            <summary>JsonPropertyAttribute.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.IsReferenceSetBoolean">
            <summary>JsonPropertyAttribute.set_IsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemConverterTypeGet">
            <summary>JsonPropertyAttribute.get_ItemConverterType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemConverterTypeSetType">
            <summary>JsonPropertyAttribute.set_ItemConverterType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemIsReferenceGet">
            <summary>JsonPropertyAttribute.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemIsReferenceSetBoolean">
            <summary>JsonPropertyAttribute.set_ItemIsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemReferenceLoopHandlingGet">
            <summary>JsonPropertyAttribute.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonPropertyAttribute.set_ItemReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemTypeNameHandlingGet">
            <summary>JsonPropertyAttribute.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ItemTypeNameHandlingSetTypeNameHandling">
            <summary>JsonPropertyAttribute.set_ItemTypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.NullValueHandlingGet">
            <summary>JsonPropertyAttribute.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.NullValueHandlingSetNullValueHandling">
            <summary>JsonPropertyAttribute.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ObjectCreationHandlingGet">
            <summary>JsonPropertyAttribute.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonPropertyAttribute.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.OrderGet">
            <summary>JsonPropertyAttribute.get_Order() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.OrderSetInt32">
            <summary>JsonPropertyAttribute.set_Order(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.PropertyNameGet">
            <summary>JsonPropertyAttribute.get_PropertyName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.PropertyNameSetString">
            <summary>JsonPropertyAttribute.set_PropertyName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ReferenceLoopHandlingGet">
            <summary>JsonPropertyAttribute.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonPropertyAttribute.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.RequiredGet">
            <summary>JsonPropertyAttribute.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.RequiredSetRequired">
            <summary>JsonPropertyAttribute.set_Required(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.TypeNameHandlingGet">
            <summary>JsonPropertyAttribute.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonPropertyAttribute.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.DefaultValueHandlingGet">
            <summary>JsonPropertyAttribute.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonPropertyAttribute.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.IsReferenceGet">
            <summary>JsonPropertyAttribute.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.IsReferenceSetBoolean">
            <summary>JsonPropertyAttribute.set_IsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemConverterTypeGet">
            <summary>JsonPropertyAttribute.get_ItemConverterType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemConverterTypeSetType">
            <summary>JsonPropertyAttribute.set_ItemConverterType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemIsReferenceGet">
            <summary>JsonPropertyAttribute.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemIsReferenceSetBoolean">
            <summary>JsonPropertyAttribute.set_ItemIsReference(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemReferenceLoopHandlingGet">
            <summary>JsonPropertyAttribute.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonPropertyAttribute.set_ItemReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemTypeNameHandlingGet">
            <summary>JsonPropertyAttribute.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ItemTypeNameHandlingSetTypeNameHandling">
            <summary>JsonPropertyAttribute.set_ItemTypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.NullValueHandlingGet">
            <summary>JsonPropertyAttribute.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.NullValueHandlingSetNullValueHandling">
            <summary>JsonPropertyAttribute.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ObjectCreationHandlingGet">
            <summary>JsonPropertyAttribute.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonPropertyAttribute.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.OrderGet">
            <summary>JsonPropertyAttribute.get_Order() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.OrderSetInt32">
            <summary>JsonPropertyAttribute.set_Order(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.PropertyNameGet">
            <summary>JsonPropertyAttribute.get_PropertyName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.PropertyNameSetString">
            <summary>JsonPropertyAttribute.set_PropertyName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ReferenceLoopHandlingGet">
            <summary>JsonPropertyAttribute.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonPropertyAttribute.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.RequiredGet">
            <summary>JsonPropertyAttribute.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.RequiredSetRequired">
            <summary>JsonPropertyAttribute.set_Required(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.TypeNameHandlingGet">
            <summary>JsonPropertyAttribute.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonPropertyAttribute.AllInstances.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonPropertyAttribute.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonReader">
            <summary>Newtonsoft.Json.JsonReader の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReader.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReader.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReader.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.Close">
            <summary>JsonReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.CloseInputGet">
            <summary>JsonReader.get_CloseInput() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.CloseInputSetBoolean">
            <summary>JsonReader.set_CloseInput(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.Constructor">
            <summary>JsonReader.JsonReader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.CultureGet">
            <summary>JsonReader.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.CultureSetCultureInfo">
            <summary>JsonReader.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DateParseHandlingGet">
            <summary>JsonReader.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DateParseHandlingSetDateParseHandling">
            <summary>JsonReader.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DateTimeZoneHandlingGet">
            <summary>JsonReader.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonReader.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DepthGet">
            <summary>JsonReader.get_Depth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.FloatParseHandlingGet">
            <summary>JsonReader.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonReader.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.IsPrimitiveTokenJsonToken">
            <summary>JsonReader.IsPrimitiveToken(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.IsStartTokenJsonToken">
            <summary>JsonReader.IsStartToken(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.IsWrappedInTypeObject">
            <summary>JsonReader.IsWrappedInTypeObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.MaxDepthGet">
            <summary>JsonReader.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.MaxDepthSetNullableOfInt32">
            <summary>JsonReader.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.PathGet">
            <summary>JsonReader.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsBytesInternal">
            <summary>JsonReader.ReadAsBytesInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsDateTimeInternal">
            <summary>JsonReader.ReadAsDateTimeInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsDateTimeOffsetInternal">
            <summary>JsonReader.ReadAsDateTimeOffsetInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsDecimalInternal">
            <summary>JsonReader.ReadAsDecimalInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsInt32Internal">
            <summary>JsonReader.ReadAsInt32Internal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadAsStringInternal">
            <summary>JsonReader.ReadAsStringInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ReadInternal">
            <summary>JsonReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SetFinished">
            <summary>JsonReader.SetFinished() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SetStateBasedOnCurrent">
            <summary>JsonReader.SetStateBasedOnCurrent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SetTokenJsonToken">
            <summary>JsonReader.SetToken(JsonToken newToken) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SetTokenJsonTokenObject">
            <summary>JsonReader.SetToken(JsonToken newToken, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.Skip">
            <summary>JsonReader.Skip() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SupportMultipleContentGet">
            <summary>JsonReader.get_SupportMultipleContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SupportMultipleContentSetBoolean">
            <summary>JsonReader.set_SupportMultipleContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.SystemIDisposableDispose">
            <summary>JsonReader.System.IDisposable.Dispose() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.UpdateScopeWithFinishedValue">
            <summary>JsonReader.UpdateScopeWithFinishedValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ValidateEndJsonToken">
            <summary>JsonReader.ValidateEnd(JsonToken endToken) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ValueGet">
            <summary>JsonReader.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.Close">
            <summary>JsonReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.CloseInputGet">
            <summary>JsonReader.get_CloseInput() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.CloseInputSetBoolean">
            <summary>JsonReader.set_CloseInput(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.CultureGet">
            <summary>JsonReader.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.CultureSetCultureInfo">
            <summary>JsonReader.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DateParseHandlingGet">
            <summary>JsonReader.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DateParseHandlingSetDateParseHandling">
            <summary>JsonReader.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DateTimeZoneHandlingGet">
            <summary>JsonReader.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonReader.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DepthGet">
            <summary>JsonReader.get_Depth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.FloatParseHandlingGet">
            <summary>JsonReader.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonReader.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.IsWrappedInTypeObject">
            <summary>JsonReader.IsWrappedInTypeObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.MaxDepthGet">
            <summary>JsonReader.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.MaxDepthSetNullableOfInt32">
            <summary>JsonReader.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.PathGet">
            <summary>JsonReader.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsBytesInternal">
            <summary>JsonReader.ReadAsBytesInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsDateTimeInternal">
            <summary>JsonReader.ReadAsDateTimeInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsDateTimeOffsetInternal">
            <summary>JsonReader.ReadAsDateTimeOffsetInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsDecimalInternal">
            <summary>JsonReader.ReadAsDecimalInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsInt32Internal">
            <summary>JsonReader.ReadAsInt32Internal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadAsStringInternal">
            <summary>JsonReader.ReadAsStringInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ReadInternal">
            <summary>JsonReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SetFinished">
            <summary>JsonReader.SetFinished() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SetStateBasedOnCurrent">
            <summary>JsonReader.SetStateBasedOnCurrent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SetTokenJsonToken">
            <summary>JsonReader.SetToken(JsonToken newToken) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SetTokenJsonTokenObject">
            <summary>JsonReader.SetToken(JsonToken newToken, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.Skip">
            <summary>JsonReader.Skip() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SupportMultipleContentGet">
            <summary>JsonReader.get_SupportMultipleContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SupportMultipleContentSetBoolean">
            <summary>JsonReader.set_SupportMultipleContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.SystemIDisposableDispose">
            <summary>JsonReader.System.IDisposable.Dispose() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.UpdateScopeWithFinishedValue">
            <summary>JsonReader.UpdateScopeWithFinishedValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ValidateEndJsonToken">
            <summary>JsonReader.ValidateEnd(JsonToken endToken) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ValueGet">
            <summary>JsonReader.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReader.AllInstances.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonReaderException">
            <summary>Newtonsoft.Json.JsonReaderException の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReaderException.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReaderException.#ctor(Newtonsoft.Json.JsonReaderException)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReaderException.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReaderException.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonReaderException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.Constructor">
            <summary>JsonReaderException.JsonReaderException() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.ConstructorString">
            <summary>JsonReaderException.JsonReaderException(String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.ConstructorStringException">
            <summary>JsonReaderException.JsonReaderException(String message, Exception innerException) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.ConstructorStringExceptionStringInt32Int32">
            <summary>JsonReaderException.JsonReaderException(String message, Exception innerException, String path, Int32 lineNumber, Int32 linePosition) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.CreateIJsonLineInfoStringStringException">
            <summary>JsonReaderException.Create(IJsonLineInfo lineInfo, String path, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.CreateJsonReaderString">
            <summary>JsonReaderException.Create(JsonReader reader, String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.CreateJsonReaderStringException">
            <summary>JsonReaderException.Create(JsonReader reader, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.LineNumberGet">
            <summary>JsonReaderException.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.LineNumberSetInt32">
            <summary>JsonReaderException.set_LineNumber(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.LinePositionGet">
            <summary>JsonReaderException.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.LinePositionSetInt32">
            <summary>JsonReaderException.set_LinePosition(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.PathGet">
            <summary>JsonReaderException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.PathSetString">
            <summary>JsonReaderException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.LineNumberGet">
            <summary>JsonReaderException.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.LineNumberSetInt32">
            <summary>JsonReaderException.set_LineNumber(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.LinePositionGet">
            <summary>JsonReaderException.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.LinePositionSetInt32">
            <summary>JsonReaderException.set_LinePosition(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.PathGet">
            <summary>JsonReaderException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonReaderException.AllInstances.PathSetString">
            <summary>JsonReaderException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializationException">
            <summary>Newtonsoft.Json.JsonSerializationException の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializationException.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializationException.#ctor(Newtonsoft.Json.JsonSerializationException)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializationException.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializationException.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.Constructor">
            <summary>JsonSerializationException.JsonSerializationException() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.ConstructorString">
            <summary>JsonSerializationException.JsonSerializationException(String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.ConstructorStringException">
            <summary>JsonSerializationException.JsonSerializationException(String message, Exception innerException) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.CreateIJsonLineInfoStringStringException">
            <summary>JsonSerializationException.Create(IJsonLineInfo lineInfo, String path, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.CreateJsonReaderString">
            <summary>JsonSerializationException.Create(JsonReader reader, String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializationException.CreateJsonReaderStringException">
            <summary>JsonSerializationException.Create(JsonReader reader, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializationException.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializer">
            <summary>Newtonsoft.Json.JsonSerializer の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.#ctor(Newtonsoft.Json.JsonSerializer)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.DeserializeOf1JsonReader``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.JsonReader,``0})">
            <summary>JsonSerializer.Deserialize(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ApplySerializerSettingsJsonSerializerJsonSerializerSettings">
            <summary>JsonSerializer.ApplySerializerSettings(JsonSerializer serializer, JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.BinderGet">
            <summary>JsonSerializer.get_Binder() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.BinderSetSerializationBinder">
            <summary>JsonSerializer.set_Binder(SerializationBinder value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CheckAdditionalContentGet">
            <summary>JsonSerializer.get_CheckAdditionalContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CheckAdditionalContentSetBoolean">
            <summary>JsonSerializer.set_CheckAdditionalContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.Constructor">
            <summary>JsonSerializer.JsonSerializer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ConstructorHandlingGet">
            <summary>JsonSerializer.get_ConstructorHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ConstructorHandlingSetConstructorHandling">
            <summary>JsonSerializer.set_ConstructorHandling(ConstructorHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ContextGet">
            <summary>JsonSerializer.get_Context() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ContextSetStreamingContext">
            <summary>JsonSerializer.set_Context(StreamingContext value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ContractResolverGet">
            <summary>JsonSerializer.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ContractResolverSetIContractResolver">
            <summary>JsonSerializer.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ConvertersGet">
            <summary>JsonSerializer.get_Converters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.Create">
            <summary>JsonSerializer.Create() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CreateDefault">
            <summary>JsonSerializer.CreateDefault() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CreateDefaultJsonSerializerSettings">
            <summary>JsonSerializer.CreateDefault(JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CreateJsonSerializerSettings">
            <summary>JsonSerializer.Create(JsonSerializerSettings settings) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CultureGet">
            <summary>JsonSerializer.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.CultureSetCultureInfo">
            <summary>JsonSerializer.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateFormatHandlingGet">
            <summary>JsonSerializer.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonSerializer.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateFormatStringGet">
            <summary>JsonSerializer.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateFormatStringSetString">
            <summary>JsonSerializer.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateParseHandlingGet">
            <summary>JsonSerializer.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateParseHandlingSetDateParseHandling">
            <summary>JsonSerializer.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateTimeZoneHandlingGet">
            <summary>JsonSerializer.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonSerializer.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DefaultValueHandlingGet">
            <summary>JsonSerializer.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonSerializer.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DeserializeInternalJsonReaderType">
            <summary>JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DeserializeJsonReader">
            <summary>JsonSerializer.Deserialize(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DeserializeJsonReaderType">
            <summary>JsonSerializer.Deserialize(JsonReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.DeserializeTextReaderType">
            <summary>JsonSerializer.Deserialize(TextReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ErrorAddEventHandlerOfErrorEventArgs">
            <summary>JsonSerializer.add_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ErrorRemoveEventHandlerOfErrorEventArgs">
            <summary>JsonSerializer.remove_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FloatFormatHandlingGet">
            <summary>JsonSerializer.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonSerializer.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FloatParseHandlingGet">
            <summary>JsonSerializer.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonSerializer.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FormattingGet">
            <summary>JsonSerializer.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.FormattingSetFormatting">
            <summary>JsonSerializer.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.GetMatchingConverterIListOfJsonConverterType">
            <summary>JsonSerializer.GetMatchingConverter(IList`1&lt;JsonConverter&gt; converters, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.GetMatchingConverterType">
            <summary>JsonSerializer.GetMatchingConverter(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.GetReferenceResolver">
            <summary>JsonSerializer.GetReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.IsCheckAdditionalContentSet">
            <summary>JsonSerializer.IsCheckAdditionalContentSet() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.MaxDepthGet">
            <summary>JsonSerializer.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.MaxDepthSetNullableOfInt32">
            <summary>JsonSerializer.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.MissingMemberHandlingGet">
            <summary>JsonSerializer.get_MissingMemberHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.MissingMemberHandlingSetMissingMemberHandling">
            <summary>JsonSerializer.set_MissingMemberHandling(MissingMemberHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.NullValueHandlingGet">
            <summary>JsonSerializer.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.NullValueHandlingSetNullValueHandling">
            <summary>JsonSerializer.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ObjectCreationHandlingGet">
            <summary>JsonSerializer.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonSerializer.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.OnErrorErrorEventArgs">
            <summary>JsonSerializer.OnError(ErrorEventArgs e) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.PopulateInternalJsonReaderObject">
            <summary>JsonSerializer.PopulateInternal(JsonReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.PopulateJsonReaderObject">
            <summary>JsonSerializer.Populate(JsonReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.PopulateTextReaderObject">
            <summary>JsonSerializer.Populate(TextReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.PreserveReferencesHandlingGet">
            <summary>JsonSerializer.get_PreserveReferencesHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.PreserveReferencesHandlingSetPreserveReferencesHandling">
            <summary>JsonSerializer.set_PreserveReferencesHandling(PreserveReferencesHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ReferenceLoopHandlingGet">
            <summary>JsonSerializer.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonSerializer.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ReferenceResolverGet">
            <summary>JsonSerializer.get_ReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.ReferenceResolverSetIReferenceResolver">
            <summary>JsonSerializer.set_ReferenceResolver(IReferenceResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.SerializeInternalJsonWriterObjectType">
            <summary>JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.SerializeJsonWriterObject">
            <summary>JsonSerializer.Serialize(JsonWriter jsonWriter, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.SerializeJsonWriterObjectType">
            <summary>JsonSerializer.Serialize(JsonWriter jsonWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.SerializeTextWriterObject">
            <summary>JsonSerializer.Serialize(TextWriter textWriter, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.SerializeTextWriterObjectType">
            <summary>JsonSerializer.Serialize(TextWriter textWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.StringEscapeHandlingGet">
            <summary>JsonSerializer.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonSerializer.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TraceWriterGet">
            <summary>JsonSerializer.get_TraceWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TraceWriterSetITraceWriter">
            <summary>JsonSerializer.set_TraceWriter(ITraceWriter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TypeNameAssemblyFormatGet">
            <summary>JsonSerializer.get_TypeNameAssemblyFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TypeNameAssemblyFormatSetFormatterAssemblyStyle">
            <summary>JsonSerializer.set_TypeNameAssemblyFormat(FormatterAssemblyStyle value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TypeNameHandlingGet">
            <summary>JsonSerializer.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonSerializer.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DeserializeOf1JsonReader``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.JsonSerializer,Newtonsoft.Json.JsonReader,``0})">
            <summary>JsonSerializer.Deserialize(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.BinderGet">
            <summary>JsonSerializer.get_Binder() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.BinderSetSerializationBinder">
            <summary>JsonSerializer.set_Binder(SerializationBinder value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.CheckAdditionalContentGet">
            <summary>JsonSerializer.get_CheckAdditionalContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.CheckAdditionalContentSetBoolean">
            <summary>JsonSerializer.set_CheckAdditionalContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ConstructorHandlingGet">
            <summary>JsonSerializer.get_ConstructorHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ConstructorHandlingSetConstructorHandling">
            <summary>JsonSerializer.set_ConstructorHandling(ConstructorHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ContextGet">
            <summary>JsonSerializer.get_Context() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ContextSetStreamingContext">
            <summary>JsonSerializer.set_Context(StreamingContext value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ContractResolverGet">
            <summary>JsonSerializer.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ContractResolverSetIContractResolver">
            <summary>JsonSerializer.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ConvertersGet">
            <summary>JsonSerializer.get_Converters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.CultureGet">
            <summary>JsonSerializer.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.CultureSetCultureInfo">
            <summary>JsonSerializer.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateFormatHandlingGet">
            <summary>JsonSerializer.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonSerializer.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateFormatStringGet">
            <summary>JsonSerializer.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateFormatStringSetString">
            <summary>JsonSerializer.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateParseHandlingGet">
            <summary>JsonSerializer.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateParseHandlingSetDateParseHandling">
            <summary>JsonSerializer.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateTimeZoneHandlingGet">
            <summary>JsonSerializer.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonSerializer.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DefaultValueHandlingGet">
            <summary>JsonSerializer.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonSerializer.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DeserializeInternalJsonReaderType">
            <summary>JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DeserializeJsonReader">
            <summary>JsonSerializer.Deserialize(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DeserializeJsonReaderType">
            <summary>JsonSerializer.Deserialize(JsonReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.DeserializeTextReaderType">
            <summary>JsonSerializer.Deserialize(TextReader reader, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ErrorAddEventHandlerOfErrorEventArgs">
            <summary>JsonSerializer.add_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ErrorRemoveEventHandlerOfErrorEventArgs">
            <summary>JsonSerializer.remove_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FloatFormatHandlingGet">
            <summary>JsonSerializer.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonSerializer.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FloatParseHandlingGet">
            <summary>JsonSerializer.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonSerializer.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FormattingGet">
            <summary>JsonSerializer.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.FormattingSetFormatting">
            <summary>JsonSerializer.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.GetMatchingConverterType">
            <summary>JsonSerializer.GetMatchingConverter(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.GetReferenceResolver">
            <summary>JsonSerializer.GetReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.IsCheckAdditionalContentSet">
            <summary>JsonSerializer.IsCheckAdditionalContentSet() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.MaxDepthGet">
            <summary>JsonSerializer.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.MaxDepthSetNullableOfInt32">
            <summary>JsonSerializer.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.MissingMemberHandlingGet">
            <summary>JsonSerializer.get_MissingMemberHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.MissingMemberHandlingSetMissingMemberHandling">
            <summary>JsonSerializer.set_MissingMemberHandling(MissingMemberHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.NullValueHandlingGet">
            <summary>JsonSerializer.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.NullValueHandlingSetNullValueHandling">
            <summary>JsonSerializer.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ObjectCreationHandlingGet">
            <summary>JsonSerializer.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonSerializer.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.OnErrorErrorEventArgs">
            <summary>JsonSerializer.OnError(ErrorEventArgs e) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.PopulateInternalJsonReaderObject">
            <summary>JsonSerializer.PopulateInternal(JsonReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.PopulateJsonReaderObject">
            <summary>JsonSerializer.Populate(JsonReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.PopulateTextReaderObject">
            <summary>JsonSerializer.Populate(TextReader reader, Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.PreserveReferencesHandlingGet">
            <summary>JsonSerializer.get_PreserveReferencesHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.PreserveReferencesHandlingSetPreserveReferencesHandling">
            <summary>JsonSerializer.set_PreserveReferencesHandling(PreserveReferencesHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ReferenceLoopHandlingGet">
            <summary>JsonSerializer.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonSerializer.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ReferenceResolverGet">
            <summary>JsonSerializer.get_ReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.ReferenceResolverSetIReferenceResolver">
            <summary>JsonSerializer.set_ReferenceResolver(IReferenceResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.SerializeInternalJsonWriterObjectType">
            <summary>JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.SerializeJsonWriterObject">
            <summary>JsonSerializer.Serialize(JsonWriter jsonWriter, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.SerializeJsonWriterObjectType">
            <summary>JsonSerializer.Serialize(JsonWriter jsonWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.SerializeTextWriterObject">
            <summary>JsonSerializer.Serialize(TextWriter textWriter, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.SerializeTextWriterObjectType">
            <summary>JsonSerializer.Serialize(TextWriter textWriter, Object value, Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.StringEscapeHandlingGet">
            <summary>JsonSerializer.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonSerializer.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TraceWriterGet">
            <summary>JsonSerializer.get_TraceWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TraceWriterSetITraceWriter">
            <summary>JsonSerializer.set_TraceWriter(ITraceWriter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TypeNameAssemblyFormatGet">
            <summary>JsonSerializer.get_TypeNameAssemblyFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TypeNameAssemblyFormatSetFormatterAssemblyStyle">
            <summary>JsonSerializer.set_TypeNameAssemblyFormat(FormatterAssemblyStyle value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TypeNameHandlingGet">
            <summary>JsonSerializer.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializer.AllInstances.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonSerializer.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings">
            <summary>Newtonsoft.Json.JsonSerializerSettings の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.BinderGet">
            <summary>JsonSerializerSettings.get_Binder() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.BinderSetSerializationBinder">
            <summary>JsonSerializerSettings.set_Binder(SerializationBinder value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.CheckAdditionalContentGet">
            <summary>JsonSerializerSettings.get_CheckAdditionalContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.CheckAdditionalContentSetBoolean">
            <summary>JsonSerializerSettings.set_CheckAdditionalContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.Constructor">
            <summary>JsonSerializerSettings.JsonSerializerSettings() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ConstructorHandlingGet">
            <summary>JsonSerializerSettings.get_ConstructorHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ConstructorHandlingSetConstructorHandling">
            <summary>JsonSerializerSettings.set_ConstructorHandling(ConstructorHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ContextGet">
            <summary>JsonSerializerSettings.get_Context() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ContextSetStreamingContext">
            <summary>JsonSerializerSettings.set_Context(StreamingContext value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ContractResolverGet">
            <summary>JsonSerializerSettings.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ContractResolverSetIContractResolver">
            <summary>JsonSerializerSettings.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ConvertersGet">
            <summary>JsonSerializerSettings.get_Converters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ConvertersSetIListOfJsonConverter">
            <summary>JsonSerializerSettings.set_Converters(IList`1&lt;JsonConverter&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.CultureGet">
            <summary>JsonSerializerSettings.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.CultureSetCultureInfo">
            <summary>JsonSerializerSettings.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateFormatHandlingGet">
            <summary>JsonSerializerSettings.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonSerializerSettings.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateFormatStringGet">
            <summary>JsonSerializerSettings.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateFormatStringSetString">
            <summary>JsonSerializerSettings.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateParseHandlingGet">
            <summary>JsonSerializerSettings.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateParseHandlingSetDateParseHandling">
            <summary>JsonSerializerSettings.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateTimeZoneHandlingGet">
            <summary>JsonSerializerSettings.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonSerializerSettings.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DefaultValueHandlingGet">
            <summary>JsonSerializerSettings.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonSerializerSettings.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ErrorGet">
            <summary>JsonSerializerSettings.get_Error() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ErrorSetEventHandlerOfErrorEventArgs">
            <summary>JsonSerializerSettings.set_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FloatFormatHandlingGet">
            <summary>JsonSerializerSettings.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonSerializerSettings.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FloatParseHandlingGet">
            <summary>JsonSerializerSettings.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonSerializerSettings.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FormattingGet">
            <summary>JsonSerializerSettings.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.FormattingSetFormatting">
            <summary>JsonSerializerSettings.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.MaxDepthGet">
            <summary>JsonSerializerSettings.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.MaxDepthSetNullableOfInt32">
            <summary>JsonSerializerSettings.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.MissingMemberHandlingGet">
            <summary>JsonSerializerSettings.get_MissingMemberHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.MissingMemberHandlingSetMissingMemberHandling">
            <summary>JsonSerializerSettings.set_MissingMemberHandling(MissingMemberHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.NullValueHandlingGet">
            <summary>JsonSerializerSettings.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.NullValueHandlingSetNullValueHandling">
            <summary>JsonSerializerSettings.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ObjectCreationHandlingGet">
            <summary>JsonSerializerSettings.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonSerializerSettings.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.PreserveReferencesHandlingGet">
            <summary>JsonSerializerSettings.get_PreserveReferencesHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.PreserveReferencesHandlingSetPreserveReferencesHandling">
            <summary>JsonSerializerSettings.set_PreserveReferencesHandling(PreserveReferencesHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ReferenceLoopHandlingGet">
            <summary>JsonSerializerSettings.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonSerializerSettings.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ReferenceResolverGet">
            <summary>JsonSerializerSettings.get_ReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.ReferenceResolverSetIReferenceResolver">
            <summary>JsonSerializerSettings.set_ReferenceResolver(IReferenceResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.StaticConstructor">
            <summary>JsonSerializerSettings.JsonSerializerSettings() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.StringEscapeHandlingGet">
            <summary>JsonSerializerSettings.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonSerializerSettings.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TraceWriterGet">
            <summary>JsonSerializerSettings.get_TraceWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TraceWriterSetITraceWriter">
            <summary>JsonSerializerSettings.set_TraceWriter(ITraceWriter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TypeNameAssemblyFormatGet">
            <summary>JsonSerializerSettings.get_TypeNameAssemblyFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TypeNameAssemblyFormatSetFormatterAssemblyStyle">
            <summary>JsonSerializerSettings.set_TypeNameAssemblyFormat(FormatterAssemblyStyle value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TypeNameHandlingGet">
            <summary>JsonSerializerSettings.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonSerializerSettings.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.BinderGet">
            <summary>JsonSerializerSettings.get_Binder() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.BinderSetSerializationBinder">
            <summary>JsonSerializerSettings.set_Binder(SerializationBinder value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.CheckAdditionalContentGet">
            <summary>JsonSerializerSettings.get_CheckAdditionalContent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.CheckAdditionalContentSetBoolean">
            <summary>JsonSerializerSettings.set_CheckAdditionalContent(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ConstructorHandlingGet">
            <summary>JsonSerializerSettings.get_ConstructorHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ConstructorHandlingSetConstructorHandling">
            <summary>JsonSerializerSettings.set_ConstructorHandling(ConstructorHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ContextGet">
            <summary>JsonSerializerSettings.get_Context() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ContextSetStreamingContext">
            <summary>JsonSerializerSettings.set_Context(StreamingContext value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ContractResolverGet">
            <summary>JsonSerializerSettings.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ContractResolverSetIContractResolver">
            <summary>JsonSerializerSettings.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ConvertersGet">
            <summary>JsonSerializerSettings.get_Converters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ConvertersSetIListOfJsonConverter">
            <summary>JsonSerializerSettings.set_Converters(IList`1&lt;JsonConverter&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.CultureGet">
            <summary>JsonSerializerSettings.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.CultureSetCultureInfo">
            <summary>JsonSerializerSettings.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateFormatHandlingGet">
            <summary>JsonSerializerSettings.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonSerializerSettings.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateFormatStringGet">
            <summary>JsonSerializerSettings.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateFormatStringSetString">
            <summary>JsonSerializerSettings.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateParseHandlingGet">
            <summary>JsonSerializerSettings.get_DateParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateParseHandlingSetDateParseHandling">
            <summary>JsonSerializerSettings.set_DateParseHandling(DateParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateTimeZoneHandlingGet">
            <summary>JsonSerializerSettings.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonSerializerSettings.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DefaultValueHandlingGet">
            <summary>JsonSerializerSettings.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonSerializerSettings.set_DefaultValueHandling(DefaultValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ErrorGet">
            <summary>JsonSerializerSettings.get_Error() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ErrorSetEventHandlerOfErrorEventArgs">
            <summary>JsonSerializerSettings.set_Error(EventHandler`1&lt;ErrorEventArgs&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FloatFormatHandlingGet">
            <summary>JsonSerializerSettings.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonSerializerSettings.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FloatParseHandlingGet">
            <summary>JsonSerializerSettings.get_FloatParseHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonSerializerSettings.set_FloatParseHandling(FloatParseHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FormattingGet">
            <summary>JsonSerializerSettings.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.FormattingSetFormatting">
            <summary>JsonSerializerSettings.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.MaxDepthGet">
            <summary>JsonSerializerSettings.get_MaxDepth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.MaxDepthSetNullableOfInt32">
            <summary>JsonSerializerSettings.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.MissingMemberHandlingGet">
            <summary>JsonSerializerSettings.get_MissingMemberHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.MissingMemberHandlingSetMissingMemberHandling">
            <summary>JsonSerializerSettings.set_MissingMemberHandling(MissingMemberHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.NullValueHandlingGet">
            <summary>JsonSerializerSettings.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.NullValueHandlingSetNullValueHandling">
            <summary>JsonSerializerSettings.set_NullValueHandling(NullValueHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ObjectCreationHandlingGet">
            <summary>JsonSerializerSettings.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonSerializerSettings.set_ObjectCreationHandling(ObjectCreationHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.PreserveReferencesHandlingGet">
            <summary>JsonSerializerSettings.get_PreserveReferencesHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.PreserveReferencesHandlingSetPreserveReferencesHandling">
            <summary>JsonSerializerSettings.set_PreserveReferencesHandling(PreserveReferencesHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ReferenceLoopHandlingGet">
            <summary>JsonSerializerSettings.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonSerializerSettings.set_ReferenceLoopHandling(ReferenceLoopHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ReferenceResolverGet">
            <summary>JsonSerializerSettings.get_ReferenceResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.ReferenceResolverSetIReferenceResolver">
            <summary>JsonSerializerSettings.set_ReferenceResolver(IReferenceResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.StringEscapeHandlingGet">
            <summary>JsonSerializerSettings.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonSerializerSettings.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TraceWriterGet">
            <summary>JsonSerializerSettings.get_TraceWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TraceWriterSetITraceWriter">
            <summary>JsonSerializerSettings.set_TraceWriter(ITraceWriter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TypeNameAssemblyFormatGet">
            <summary>JsonSerializerSettings.get_TypeNameAssemblyFormat() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TypeNameAssemblyFormatSetFormatterAssemblyStyle">
            <summary>JsonSerializerSettings.set_TypeNameAssemblyFormat(FormatterAssemblyStyle value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TypeNameHandlingGet">
            <summary>JsonSerializerSettings.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonSerializerSettings.AllInstances.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonSerializerSettings.set_TypeNameHandling(TypeNameHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonTextReader">
            <summary>Newtonsoft.Json.JsonTextReader の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.#ctor(Newtonsoft.Json.JsonTextReader)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextReader.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.BlockCopyCharsCharArrayInt32CharArrayInt32Int32">
            <summary>JsonTextReader.BlockCopyChars(Char[] src, Int32 srcOffset, Char[] dst, Int32 dstOffset, Int32 count) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ClearRecentString">
            <summary>JsonTextReader.ClearRecentString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.Close">
            <summary>JsonTextReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ConstructorTextReader">
            <summary>JsonTextReader.JsonTextReader(TextReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.EatWhitespaceBoolean">
            <summary>JsonTextReader.EatWhitespace(Boolean oneOrMore) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.EnsureCharsInt32Boolean">
            <summary>JsonTextReader.EnsureChars(Int32 relativePosition, Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.HasLineInfo">
            <summary>JsonTextReader.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.IsSeperatorChar">
            <summary>JsonTextReader.IsSeperator(Char c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.LineNumberGet">
            <summary>JsonTextReader.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.LinePositionGet">
            <summary>JsonTextReader.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.MatchValueString">
            <summary>JsonTextReader.MatchValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.MatchValueWithTrailingSeperatorString">
            <summary>JsonTextReader.MatchValueWithTrailingSeperator(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.OnNewLineInt32">
            <summary>JsonTextReader.OnNewLine(Int32 pos) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseComment">
            <summary>JsonTextReader.ParseComment() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseConstructor">
            <summary>JsonTextReader.ParseConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseFalse">
            <summary>JsonTextReader.ParseFalse() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseNull">
            <summary>JsonTextReader.ParseNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseNumber">
            <summary>JsonTextReader.ParseNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseNumberNaN">
            <summary>JsonTextReader.ParseNumberNaN() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseNumberNegativeInfinity">
            <summary>JsonTextReader.ParseNumberNegativeInfinity() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseNumberPositiveInfinity">
            <summary>JsonTextReader.ParseNumberPositiveInfinity() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseObject">
            <summary>JsonTextReader.ParseObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParsePostValue">
            <summary>JsonTextReader.ParsePostValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseProperty">
            <summary>JsonTextReader.ParseProperty() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseStringChar">
            <summary>JsonTextReader.ParseString(Char quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseTrue">
            <summary>JsonTextReader.ParseTrue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseUndefined">
            <summary>JsonTextReader.ParseUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseUnicode">
            <summary>JsonTextReader.ParseUnicode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseUnquotedProperty">
            <summary>JsonTextReader.ParseUnquotedProperty() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ParseValue">
            <summary>JsonTextReader.ParseValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ProcessCarriageReturnBoolean">
            <summary>JsonTextReader.ProcessCarriageReturn(Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ProcessLineFeed">
            <summary>JsonTextReader.ProcessLineFeed() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.Read">
            <summary>JsonTextReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsBytes">
            <summary>JsonTextReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsDateTime">
            <summary>JsonTextReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsDateTimeOffset">
            <summary>JsonTextReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsDecimal">
            <summary>JsonTextReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsInt32">
            <summary>JsonTextReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadAsString">
            <summary>JsonTextReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadCharsInt32Boolean">
            <summary>JsonTextReader.ReadChars(Int32 relativePosition, Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadDataBoolean">
            <summary>JsonTextReader.ReadData(Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadDataBooleanInt32">
            <summary>JsonTextReader.ReadData(Boolean append, Int32 charsRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadInternal">
            <summary>JsonTextReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadNumberIntoBuffer">
            <summary>JsonTextReader.ReadNumberIntoBuffer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ReadStringIntoBufferChar">
            <summary>JsonTextReader.ReadStringIntoBuffer(Char quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ShiftBufferIfNeeded">
            <summary>JsonTextReader.ShiftBufferIfNeeded() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.ValidIdentifierCharChar">
            <summary>JsonTextReader.ValidIdentifierChar(Char value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ClearRecentString">
            <summary>JsonTextReader.ClearRecentString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.Close">
            <summary>JsonTextReader.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.EatWhitespaceBoolean">
            <summary>JsonTextReader.EatWhitespace(Boolean oneOrMore) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.EnsureCharsInt32Boolean">
            <summary>JsonTextReader.EnsureChars(Int32 relativePosition, Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.HasLineInfo">
            <summary>JsonTextReader.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.IsSeperatorChar">
            <summary>JsonTextReader.IsSeperator(Char c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.LineNumberGet">
            <summary>JsonTextReader.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.LinePositionGet">
            <summary>JsonTextReader.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.MatchValueString">
            <summary>JsonTextReader.MatchValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.MatchValueWithTrailingSeperatorString">
            <summary>JsonTextReader.MatchValueWithTrailingSeperator(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.OnNewLineInt32">
            <summary>JsonTextReader.OnNewLine(Int32 pos) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseComment">
            <summary>JsonTextReader.ParseComment() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseConstructor">
            <summary>JsonTextReader.ParseConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseFalse">
            <summary>JsonTextReader.ParseFalse() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseNull">
            <summary>JsonTextReader.ParseNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseNumber">
            <summary>JsonTextReader.ParseNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseNumberNaN">
            <summary>JsonTextReader.ParseNumberNaN() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseNumberNegativeInfinity">
            <summary>JsonTextReader.ParseNumberNegativeInfinity() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseNumberPositiveInfinity">
            <summary>JsonTextReader.ParseNumberPositiveInfinity() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseObject">
            <summary>JsonTextReader.ParseObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParsePostValue">
            <summary>JsonTextReader.ParsePostValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseProperty">
            <summary>JsonTextReader.ParseProperty() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseStringChar">
            <summary>JsonTextReader.ParseString(Char quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseTrue">
            <summary>JsonTextReader.ParseTrue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseUndefined">
            <summary>JsonTextReader.ParseUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseUnicode">
            <summary>JsonTextReader.ParseUnicode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseUnquotedProperty">
            <summary>JsonTextReader.ParseUnquotedProperty() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ParseValue">
            <summary>JsonTextReader.ParseValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ProcessCarriageReturnBoolean">
            <summary>JsonTextReader.ProcessCarriageReturn(Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ProcessLineFeed">
            <summary>JsonTextReader.ProcessLineFeed() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.Read">
            <summary>JsonTextReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsBytes">
            <summary>JsonTextReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsDateTime">
            <summary>JsonTextReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsDateTimeOffset">
            <summary>JsonTextReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsDecimal">
            <summary>JsonTextReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsInt32">
            <summary>JsonTextReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadAsString">
            <summary>JsonTextReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadCharsInt32Boolean">
            <summary>JsonTextReader.ReadChars(Int32 relativePosition, Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadDataBoolean">
            <summary>JsonTextReader.ReadData(Boolean append) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadDataBooleanInt32">
            <summary>JsonTextReader.ReadData(Boolean append, Int32 charsRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadInternal">
            <summary>JsonTextReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadNumberIntoBuffer">
            <summary>JsonTextReader.ReadNumberIntoBuffer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ReadStringIntoBufferChar">
            <summary>JsonTextReader.ReadStringIntoBuffer(Char quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ShiftBufferIfNeeded">
            <summary>JsonTextReader.ShiftBufferIfNeeded() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextReader.AllInstances.ValidIdentifierCharChar">
            <summary>JsonTextReader.ValidIdentifierChar(Char value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonTextWriter">
            <summary>Newtonsoft.Json.JsonTextWriter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextWriter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextWriter.#ctor(Newtonsoft.Json.JsonTextWriter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextWriter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextWriter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonTextWriter.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.Close">
            <summary>JsonTextWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.ConstructorTextWriter">
            <summary>JsonTextWriter.JsonTextWriter(TextWriter textWriter) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.EnsureWriteBuffer">
            <summary>JsonTextWriter.EnsureWriteBuffer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.Flush">
            <summary>JsonTextWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.IndentCharGet">
            <summary>JsonTextWriter.get_IndentChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.IndentCharSetChar">
            <summary>JsonTextWriter.set_IndentChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.IndentationGet">
            <summary>JsonTextWriter.get_Indentation() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.IndentationSetInt32">
            <summary>JsonTextWriter.set_Indentation(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.OnStringEscapeHandlingChanged">
            <summary>JsonTextWriter.OnStringEscapeHandlingChanged() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.QuoteCharGet">
            <summary>JsonTextWriter.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.QuoteCharSetChar">
            <summary>JsonTextWriter.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.QuoteNameGet">
            <summary>JsonTextWriter.get_QuoteName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.QuoteNameSetBoolean">
            <summary>JsonTextWriter.set_QuoteName(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.UpdateCharEscapeFlags">
            <summary>JsonTextWriter.UpdateCharEscapeFlags() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteCommentString">
            <summary>JsonTextWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteEndJsonToken">
            <summary>JsonTextWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteEscapedStringStringBoolean">
            <summary>JsonTextWriter.WriteEscapedString(String value, Boolean quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteIndent">
            <summary>JsonTextWriter.WriteIndent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteIndentSpace">
            <summary>JsonTextWriter.WriteIndentSpace() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteIntegerValueInt64">
            <summary>JsonTextWriter.WriteIntegerValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteIntegerValueUInt64">
            <summary>JsonTextWriter.WriteIntegerValue(UInt64 uvalue) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteNull">
            <summary>JsonTextWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WritePropertyNameString">
            <summary>JsonTextWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WritePropertyNameStringBoolean">
            <summary>JsonTextWriter.WritePropertyName(String name, Boolean escape) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteRawString">
            <summary>JsonTextWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteStartArray">
            <summary>JsonTextWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteStartConstructorString">
            <summary>JsonTextWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteStartObject">
            <summary>JsonTextWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteUndefined">
            <summary>JsonTextWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueBoolean">
            <summary>JsonTextWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueByte">
            <summary>JsonTextWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueByteArray">
            <summary>JsonTextWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueChar">
            <summary>JsonTextWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueDateTime">
            <summary>JsonTextWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueDateTimeOffset">
            <summary>JsonTextWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueDecimal">
            <summary>JsonTextWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueDelimiter">
            <summary>JsonTextWriter.WriteValueDelimiter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueDouble">
            <summary>JsonTextWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueGuid">
            <summary>JsonTextWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueInt16">
            <summary>JsonTextWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueInt32">
            <summary>JsonTextWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueInt64">
            <summary>JsonTextWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueInternalStringJsonToken">
            <summary>JsonTextWriter.WriteValueInternal(String value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueNullableOfDouble">
            <summary>JsonTextWriter.WriteValue(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueNullableOfSingle">
            <summary>JsonTextWriter.WriteValue(Nullable`1&lt;Single&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueObject">
            <summary>JsonTextWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueSByte">
            <summary>JsonTextWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueSingle">
            <summary>JsonTextWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueString">
            <summary>JsonTextWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueTimeSpan">
            <summary>JsonTextWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueUInt16">
            <summary>JsonTextWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueUInt32">
            <summary>JsonTextWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueUInt64">
            <summary>JsonTextWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteValueUri">
            <summary>JsonTextWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.WriteWhitespaceString">
            <summary>JsonTextWriter.WriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.Close">
            <summary>JsonTextWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.EnsureWriteBuffer">
            <summary>JsonTextWriter.EnsureWriteBuffer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.Flush">
            <summary>JsonTextWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.IndentCharGet">
            <summary>JsonTextWriter.get_IndentChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.IndentCharSetChar">
            <summary>JsonTextWriter.set_IndentChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.IndentationGet">
            <summary>JsonTextWriter.get_Indentation() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.IndentationSetInt32">
            <summary>JsonTextWriter.set_Indentation(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.OnStringEscapeHandlingChanged">
            <summary>JsonTextWriter.OnStringEscapeHandlingChanged() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.QuoteCharGet">
            <summary>JsonTextWriter.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.QuoteCharSetChar">
            <summary>JsonTextWriter.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.QuoteNameGet">
            <summary>JsonTextWriter.get_QuoteName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.QuoteNameSetBoolean">
            <summary>JsonTextWriter.set_QuoteName(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.UpdateCharEscapeFlags">
            <summary>JsonTextWriter.UpdateCharEscapeFlags() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteCommentString">
            <summary>JsonTextWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteEndJsonToken">
            <summary>JsonTextWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteEscapedStringStringBoolean">
            <summary>JsonTextWriter.WriteEscapedString(String value, Boolean quote) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteIndent">
            <summary>JsonTextWriter.WriteIndent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteIndentSpace">
            <summary>JsonTextWriter.WriteIndentSpace() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteIntegerValueInt64">
            <summary>JsonTextWriter.WriteIntegerValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteIntegerValueUInt64">
            <summary>JsonTextWriter.WriteIntegerValue(UInt64 uvalue) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteNull">
            <summary>JsonTextWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WritePropertyNameString">
            <summary>JsonTextWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WritePropertyNameStringBoolean">
            <summary>JsonTextWriter.WritePropertyName(String name, Boolean escape) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteRawString">
            <summary>JsonTextWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteStartArray">
            <summary>JsonTextWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteStartConstructorString">
            <summary>JsonTextWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteStartObject">
            <summary>JsonTextWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteUndefined">
            <summary>JsonTextWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueBoolean">
            <summary>JsonTextWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueByte">
            <summary>JsonTextWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueByteArray">
            <summary>JsonTextWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueChar">
            <summary>JsonTextWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueDateTime">
            <summary>JsonTextWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueDateTimeOffset">
            <summary>JsonTextWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueDecimal">
            <summary>JsonTextWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueDelimiter">
            <summary>JsonTextWriter.WriteValueDelimiter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueDouble">
            <summary>JsonTextWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueGuid">
            <summary>JsonTextWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueInt16">
            <summary>JsonTextWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueInt32">
            <summary>JsonTextWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueInt64">
            <summary>JsonTextWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueInternalStringJsonToken">
            <summary>JsonTextWriter.WriteValueInternal(String value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueNullableOfDouble">
            <summary>JsonTextWriter.WriteValue(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueNullableOfSingle">
            <summary>JsonTextWriter.WriteValue(Nullable`1&lt;Single&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueObject">
            <summary>JsonTextWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueSByte">
            <summary>JsonTextWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueSingle">
            <summary>JsonTextWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueString">
            <summary>JsonTextWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueTimeSpan">
            <summary>JsonTextWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueUInt16">
            <summary>JsonTextWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueUInt32">
            <summary>JsonTextWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueUInt64">
            <summary>JsonTextWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteValueUri">
            <summary>JsonTextWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonTextWriter.AllInstances.WriteWhitespaceString">
            <summary>JsonTextWriter.WriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonValidatingReader">
            <summary>Newtonsoft.Json.JsonValidatingReader の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.#ctor(Newtonsoft.Json.JsonValidatingReader)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ConstructorJsonReader">
            <summary>JsonValidatingReader.JsonValidatingReader(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.DepthGet">
            <summary>JsonValidatingReader.get_Depth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.FloatingPointRemainderDoubleDouble">
            <summary>JsonValidatingReader.FloatingPointRemainder(Double dividend, Double divisor) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.GetCurrentNodeSchemaType">
            <summary>JsonValidatingReader.GetCurrentNodeSchemaType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.IsZeroDouble">
            <summary>JsonValidatingReader.IsZero(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.OnValidationEventJsonSchemaException">
            <summary>JsonValidatingReader.OnValidationEvent(JsonSchemaException exception) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.PathGet">
            <summary>JsonValidatingReader.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ProcessValue">
            <summary>JsonValidatingReader.ProcessValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.QuoteCharGet">
            <summary>JsonValidatingReader.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.QuoteCharSetChar">
            <summary>JsonValidatingReader.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.Read">
            <summary>JsonValidatingReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsBytes">
            <summary>JsonValidatingReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsDateTime">
            <summary>JsonValidatingReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsDateTimeOffset">
            <summary>JsonValidatingReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsDecimal">
            <summary>JsonValidatingReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsInt32">
            <summary>JsonValidatingReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReadAsString">
            <summary>JsonValidatingReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ReaderGet">
            <summary>JsonValidatingReader.get_Reader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.SchemaGet">
            <summary>JsonValidatingReader.get_Schema() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.SchemaSetJsonSchema">
            <summary>JsonValidatingReader.set_Schema(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.StaticConstructor">
            <summary>JsonValidatingReader.JsonValidatingReader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.TokenTypeGet">
            <summary>JsonValidatingReader.get_TokenType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ValidateCurrentToken">
            <summary>JsonValidatingReader.ValidateCurrentToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ValidationEventHandlerAddValidationEventHandler">
            <summary>JsonValidatingReader.add_ValidationEventHandler(ValidationEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ValidationEventHandlerRemoveValidationEventHandler">
            <summary>JsonValidatingReader.remove_ValidationEventHandler(ValidationEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ValueGet">
            <summary>JsonValidatingReader.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.ValueTypeGet">
            <summary>JsonValidatingReader.get_ValueType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader._ValidateEndObjectb__6KeyValuePairOfStringBoolean">
            <summary>JsonValidatingReader.&lt;ValidateEndObject&gt;b__6(KeyValuePair`2&lt;String,Boolean&gt; kv) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader._ValidateEndObjectb__7KeyValuePairOfStringBoolean">
            <summary>JsonValidatingReader.&lt;ValidateEndObject&gt;b__7(KeyValuePair`2&lt;String,Boolean&gt; kv) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.DepthGet">
            <summary>JsonValidatingReader.get_Depth() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.GetCurrentNodeSchemaType">
            <summary>JsonValidatingReader.GetCurrentNodeSchemaType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.OnValidationEventJsonSchemaException">
            <summary>JsonValidatingReader.OnValidationEvent(JsonSchemaException exception) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.PathGet">
            <summary>JsonValidatingReader.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ProcessValue">
            <summary>JsonValidatingReader.ProcessValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.QuoteCharGet">
            <summary>JsonValidatingReader.get_QuoteChar() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.QuoteCharSetChar">
            <summary>JsonValidatingReader.set_QuoteChar(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.Read">
            <summary>JsonValidatingReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsBytes">
            <summary>JsonValidatingReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsDateTime">
            <summary>JsonValidatingReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsDateTimeOffset">
            <summary>JsonValidatingReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsDecimal">
            <summary>JsonValidatingReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsInt32">
            <summary>JsonValidatingReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReadAsString">
            <summary>JsonValidatingReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ReaderGet">
            <summary>JsonValidatingReader.get_Reader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.SchemaGet">
            <summary>JsonValidatingReader.get_Schema() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.SchemaSetJsonSchema">
            <summary>JsonValidatingReader.set_Schema(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.TokenTypeGet">
            <summary>JsonValidatingReader.get_TokenType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ValidateCurrentToken">
            <summary>JsonValidatingReader.ValidateCurrentToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ValidationEventHandlerAddValidationEventHandler">
            <summary>JsonValidatingReader.add_ValidationEventHandler(ValidationEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ValidationEventHandlerRemoveValidationEventHandler">
            <summary>JsonValidatingReader.remove_ValidationEventHandler(ValidationEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ValueGet">
            <summary>JsonValidatingReader.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonValidatingReader.AllInstances.ValueTypeGet">
            <summary>JsonValidatingReader.get_ValueType() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonWriter">
            <summary>Newtonsoft.Json.JsonWriter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriter.#ctor(Newtonsoft.Json.JsonWriter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriter.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AutoCompleteAll">
            <summary>JsonWriter.AutoCompleteAll() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AutoCompleteJsonToken">
            <summary>JsonWriter.AutoComplete(JsonToken tokenBeingWritten) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.Close">
            <summary>JsonWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.CloseOutputGet">
            <summary>JsonWriter.get_CloseOutput() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.CloseOutputSetBoolean">
            <summary>JsonWriter.set_CloseOutput(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.Constructor">
            <summary>JsonWriter.JsonWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.ContainerPathGet">
            <summary>JsonWriter.get_ContainerPath() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.CreateUnsupportedTypeExceptionJsonWriterObject">
            <summary>JsonWriter.CreateUnsupportedTypeException(JsonWriter writer, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.CultureGet">
            <summary>JsonWriter.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.CultureSetCultureInfo">
            <summary>JsonWriter.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateFormatHandlingGet">
            <summary>JsonWriter.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonWriter.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateFormatStringGet">
            <summary>JsonWriter.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateFormatStringSetString">
            <summary>JsonWriter.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateTimeZoneHandlingGet">
            <summary>JsonWriter.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonWriter.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.DisposeBoolean">
            <summary>JsonWriter.Dispose(Boolean disposing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.FloatFormatHandlingGet">
            <summary>JsonWriter.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonWriter.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.FormattingGet">
            <summary>JsonWriter.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.FormattingSetFormatting">
            <summary>JsonWriter.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.InternalWriteComment">
            <summary>JsonWriter.InternalWriteComment() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.InternalWritePropertyNameString">
            <summary>JsonWriter.InternalWritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.InternalWriteRaw">
            <summary>JsonWriter.InternalWriteRaw() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.InternalWriteValueJsonToken">
            <summary>JsonWriter.InternalWriteValue(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.InternalWriteWhitespaceString">
            <summary>JsonWriter.InternalWriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.IsEndTokenJsonToken">
            <summary>JsonWriter.IsEndToken(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.IsStartTokenJsonToken">
            <summary>JsonWriter.IsStartToken(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.OnStringEscapeHandlingChanged">
            <summary>JsonWriter.OnStringEscapeHandlingChanged() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.PathGet">
            <summary>JsonWriter.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.SetWriteStateJsonTokenObject">
            <summary>JsonWriter.SetWriteState(JsonToken token, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.StaticConstructor">
            <summary>JsonWriter.JsonWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.StringEscapeHandlingGet">
            <summary>JsonWriter.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonWriter.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.SystemIDisposableDispose">
            <summary>JsonWriter.System.IDisposable.Dispose() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.TopGet">
            <summary>JsonWriter.get_Top() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.UpdateScopeWithFinishedValue">
            <summary>JsonWriter.UpdateScopeWithFinishedValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteCommentString">
            <summary>JsonWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteConstructorDateJsonReader">
            <summary>JsonWriter.WriteConstructorDate(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteEnd">
            <summary>JsonWriter.WriteEnd() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteEndJsonToken">
            <summary>JsonWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteIndent">
            <summary>JsonWriter.WriteIndent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteIndentSpace">
            <summary>JsonWriter.WriteIndentSpace() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteNull">
            <summary>JsonWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WritePropertyNameString">
            <summary>JsonWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WritePropertyNameStringBoolean">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteRawString">
            <summary>JsonWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteRawValueString">
            <summary>JsonWriter.WriteRawValue(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteStartArray">
            <summary>JsonWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteStartConstructorString">
            <summary>JsonWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteStartObject">
            <summary>JsonWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteStateGet">
            <summary>JsonWriter.get_WriteState() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteTokenJsonReader">
            <summary>JsonWriter.WriteToken(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteTokenJsonReaderBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Boolean writeChildren) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteTokenJsonReaderBooleanBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Boolean writeChildren, Boolean writeDateConstructorAsDate) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteTokenJsonReaderInt32BooleanBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Int32 initialDepth, Boolean writeChildren, Boolean writeDateConstructorAsDate) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteUndefined">
            <summary>JsonWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueBoolean">
            <summary>JsonWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueByte">
            <summary>JsonWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueByteArray">
            <summary>JsonWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueChar">
            <summary>JsonWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueDateTime">
            <summary>JsonWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueDateTimeOffset">
            <summary>JsonWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueDecimal">
            <summary>JsonWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueDelimiter">
            <summary>JsonWriter.WriteValueDelimiter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueDouble">
            <summary>JsonWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueGuid">
            <summary>JsonWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueInt16">
            <summary>JsonWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueInt32">
            <summary>JsonWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueInt64">
            <summary>JsonWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfBoolean">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfByte">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Byte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfChar">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Char&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfDateTime">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;DateTime&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfDateTimeOffset">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;DateTimeOffset&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfDecimal">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Decimal&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfDouble">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfGuid">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Guid&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfInt16">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfInt32">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfInt64">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfSByte">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;SByte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfSingle">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Single&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfTimeSpan">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;TimeSpan&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfUInt16">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfUInt32">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueNullableOfUInt64">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueObject">
            <summary>JsonWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueSByte">
            <summary>JsonWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueSingle">
            <summary>JsonWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueString">
            <summary>JsonWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueTimeSpan">
            <summary>JsonWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueUInt16">
            <summary>JsonWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueUInt32">
            <summary>JsonWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueUInt64">
            <summary>JsonWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteValueUri">
            <summary>JsonWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.WriteWhitespaceString">
            <summary>JsonWriter.WriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.AutoCompleteAll">
            <summary>JsonWriter.AutoCompleteAll() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.AutoCompleteJsonToken">
            <summary>JsonWriter.AutoComplete(JsonToken tokenBeingWritten) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.Close">
            <summary>JsonWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.CloseOutputGet">
            <summary>JsonWriter.get_CloseOutput() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.CloseOutputSetBoolean">
            <summary>JsonWriter.set_CloseOutput(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.ContainerPathGet">
            <summary>JsonWriter.get_ContainerPath() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.CultureGet">
            <summary>JsonWriter.get_Culture() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.CultureSetCultureInfo">
            <summary>JsonWriter.set_Culture(CultureInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateFormatHandlingGet">
            <summary>JsonWriter.get_DateFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonWriter.set_DateFormatHandling(DateFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateFormatStringGet">
            <summary>JsonWriter.get_DateFormatString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateFormatStringSetString">
            <summary>JsonWriter.set_DateFormatString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateTimeZoneHandlingGet">
            <summary>JsonWriter.get_DateTimeZoneHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonWriter.set_DateTimeZoneHandling(DateTimeZoneHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.DisposeBoolean">
            <summary>JsonWriter.Dispose(Boolean disposing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.FloatFormatHandlingGet">
            <summary>JsonWriter.get_FloatFormatHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonWriter.set_FloatFormatHandling(FloatFormatHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.FormattingGet">
            <summary>JsonWriter.get_Formatting() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.FormattingSetFormatting">
            <summary>JsonWriter.set_Formatting(Formatting value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.InternalWriteComment">
            <summary>JsonWriter.InternalWriteComment() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.InternalWritePropertyNameString">
            <summary>JsonWriter.InternalWritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.InternalWriteRaw">
            <summary>JsonWriter.InternalWriteRaw() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.InternalWriteValueJsonToken">
            <summary>JsonWriter.InternalWriteValue(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.InternalWriteWhitespaceString">
            <summary>JsonWriter.InternalWriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.OnStringEscapeHandlingChanged">
            <summary>JsonWriter.OnStringEscapeHandlingChanged() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.PathGet">
            <summary>JsonWriter.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.SetWriteStateJsonTokenObject">
            <summary>JsonWriter.SetWriteState(JsonToken token, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.StringEscapeHandlingGet">
            <summary>JsonWriter.get_StringEscapeHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonWriter.set_StringEscapeHandling(StringEscapeHandling value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.SystemIDisposableDispose">
            <summary>JsonWriter.System.IDisposable.Dispose() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.TopGet">
            <summary>JsonWriter.get_Top() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.UpdateScopeWithFinishedValue">
            <summary>JsonWriter.UpdateScopeWithFinishedValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteCommentString">
            <summary>JsonWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteConstructorDateJsonReader">
            <summary>JsonWriter.WriteConstructorDate(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteEnd">
            <summary>JsonWriter.WriteEnd() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteEndJsonToken">
            <summary>JsonWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteIndent">
            <summary>JsonWriter.WriteIndent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteIndentSpace">
            <summary>JsonWriter.WriteIndentSpace() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteNull">
            <summary>JsonWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WritePropertyNameString">
            <summary>JsonWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WritePropertyNameStringBoolean">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteRawString">
            <summary>JsonWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteRawValueString">
            <summary>JsonWriter.WriteRawValue(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteStartArray">
            <summary>JsonWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteStartConstructorString">
            <summary>JsonWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteStartObject">
            <summary>JsonWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteStateGet">
            <summary>JsonWriter.get_WriteState() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteTokenJsonReader">
            <summary>JsonWriter.WriteToken(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteTokenJsonReaderBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Boolean writeChildren) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteTokenJsonReaderBooleanBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Boolean writeChildren, Boolean writeDateConstructorAsDate) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteTokenJsonReaderInt32BooleanBoolean">
            <summary>JsonWriter.WriteToken(JsonReader reader, Int32 initialDepth, Boolean writeChildren, Boolean writeDateConstructorAsDate) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteUndefined">
            <summary>JsonWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueBoolean">
            <summary>JsonWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueByte">
            <summary>JsonWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueByteArray">
            <summary>JsonWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueChar">
            <summary>JsonWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueDateTime">
            <summary>JsonWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueDateTimeOffset">
            <summary>JsonWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueDecimal">
            <summary>JsonWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueDelimiter">
            <summary>JsonWriter.WriteValueDelimiter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueDouble">
            <summary>JsonWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueGuid">
            <summary>JsonWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueInt16">
            <summary>JsonWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueInt32">
            <summary>JsonWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueInt64">
            <summary>JsonWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfBoolean">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfByte">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Byte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfChar">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Char&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfDateTime">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;DateTime&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfDateTimeOffset">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;DateTimeOffset&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfDecimal">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Decimal&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfDouble">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfGuid">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Guid&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfInt16">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfInt32">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfInt64">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Int64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfSByte">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;SByte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfSingle">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;Single&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfTimeSpan">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;TimeSpan&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfUInt16">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfUInt32">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueNullableOfUInt64">
            <summary>JsonWriter.WriteValue(Nullable`1&lt;UInt64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueObject">
            <summary>JsonWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueSByte">
            <summary>JsonWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueSingle">
            <summary>JsonWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueString">
            <summary>JsonWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueTimeSpan">
            <summary>JsonWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueUInt16">
            <summary>JsonWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueUInt32">
            <summary>JsonWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueUInt64">
            <summary>JsonWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteValueUri">
            <summary>JsonWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriter.AllInstances.WriteWhitespaceString">
            <summary>JsonWriter.WriteWhitespace(String ws) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonWriterException">
            <summary>Newtonsoft.Json.JsonWriterException の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriterException.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriterException.#ctor(Newtonsoft.Json.JsonWriterException)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriterException.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriterException.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimJsonWriterException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.Constructor">
            <summary>JsonWriterException.JsonWriterException() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.ConstructorString">
            <summary>JsonWriterException.JsonWriterException(String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.ConstructorStringException">
            <summary>JsonWriterException.JsonWriterException(String message, Exception innerException) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.ConstructorStringExceptionString">
            <summary>JsonWriterException.JsonWriterException(String message, Exception innerException, String path) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.CreateJsonWriterStringException">
            <summary>JsonWriterException.Create(JsonWriter writer, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.CreateStringStringException">
            <summary>JsonWriterException.Create(String path, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.PathGet">
            <summary>JsonWriterException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.PathSetString">
            <summary>JsonWriterException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimJsonWriterException.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.AllInstances.PathGet">
            <summary>JsonWriterException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimJsonWriterException.AllInstances.PathSetString">
            <summary>JsonWriterException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimSerializationBinder">
            <summary>Newtonsoft.Json.SerializationBinder の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimSerializationBinder.#ctor(Newtonsoft.Json.SerializationBinder)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimSerializationBinder.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.ShimSerializationBinder.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimSerializationBinder.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimSerializationBinder.BindToNameTypeStringOutStringOut">
            <summary>SerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimSerializationBinder.Constructor">
            <summary>SerializationBinder.SerializationBinder() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.ShimSerializationBinder.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.ShimSerializationBinder.AllInstances.BindToNameTypeStringOutStringOut">
            <summary>SerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubIJsonLineInfo">
            <summary>Newtonsoft.Json.IJsonLineInfo のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubIJsonLineInfo.#ctor">
            <summary>type StubIJsonLineInfo の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubIJsonLineInfo.HasLineInfo">
            <summary>IJsonLineInfo.HasLineInfo() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubIJsonLineInfo.LineNumberGet">
            <summary>IJsonLineInfo.get_LineNumber() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubIJsonLineInfo.LinePositionGet">
            <summary>IJsonLineInfo.get_LinePosition() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubIJsonLineInfo.nj::Newtonsoft#Json#IJsonLineInfo#HasLineInfo">
            <summary>IJsonLineInfo.HasLineInfo() の スタブ の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubIJsonLineInfo.nj::Newtonsoft#Json#IJsonLineInfo#LineNumber">
            <summary>IJsonLineInfo.get_LineNumber() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubIJsonLineInfo.nj::Newtonsoft#Json#IJsonLineInfo#LinePosition">
            <summary>IJsonLineInfo.get_LinePosition() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonContainerAttribute">
            <summary>Newtonsoft.Json.JsonContainerAttribute のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.Equals(System.Object)">
            <summary>Attribute.Equals(Object obj) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.EqualsObject">
            <summary>Attribute.Equals(Object obj) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.GetHashCode">
            <summary>Attribute.GetHashCode() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.GetHashCode01">
            <summary>Attribute.GetHashCode() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.InitializeStub">
            <summary>type StubJsonContainerAttribute の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.IsDefaultAttribute">
            <summary>Attribute.IsDefaultAttribute() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.IsDefaultAttribute01">
            <summary>Attribute.IsDefaultAttribute() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.Match(System.Object)">
            <summary>Attribute.Match(Object obj) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.MatchObject">
            <summary>Attribute.Match(Object obj) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.TypeIdGet">
            <summary>Attribute.get_TypeId() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonContainerAttribute.TypeId">
            <summary>Attribute.get_TypeId() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonConverter">
            <summary>Newtonsoft.Json.JsonConverter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.CanConvert(System.Type)">
            <summary>JsonConverter.CanConvert(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.CanConvertType">
            <summary>JsonConverter.CanConvert(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.CanReadGet">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.CanWriteGet">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.GetSchema">
            <summary>JsonConverter.GetSchema() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.GetSchema01">
            <summary>JsonConverter.GetSchema() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.InitializeStub">
            <summary>type StubJsonConverter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JsonConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.ReadJsonJsonReaderTypeObjectJsonSerializer">
            <summary>JsonConverter.ReadJson(JsonReader reader, Type objectType, Object existingValue, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>JsonConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverter.WriteJsonJsonWriterObjectJsonSerializer">
            <summary>JsonConverter.WriteJson(JsonWriter writer, Object value, JsonSerializer serializer) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverter.CanRead">
            <summary>JsonConverter.get_CanRead() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverter.CanWrite">
            <summary>JsonConverter.get_CanWrite() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonConverterCollection">
            <summary>Newtonsoft.Json.JsonConverterCollection のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.ClearItems">
            <summary>Collection`1.ClearItems() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverterCollection.ClearItems01">
            <summary>Collection`1.ClearItems() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.InitializeStub">
            <summary>type StubJsonConverterCollection の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.InsertItem(System.Int32,Newtonsoft.Json.JsonConverter)">
            <summary>Collection`1.InsertItem(Int32 index, !0 item) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverterCollection.InsertItemInt32JsonConverter">
            <summary>Collection`1.InsertItem(Int32 index, !0 item) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.RemoveItem(System.Int32)">
            <summary>Collection`1.RemoveItem(Int32 index) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverterCollection.RemoveItemInt32">
            <summary>Collection`1.RemoveItem(Int32 index) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonConverterCollection.SetItem(System.Int32,Newtonsoft.Json.JsonConverter)">
            <summary>Collection`1.SetItem(Int32 index, !0 item) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonConverterCollection.SetItemInt32JsonConverter">
            <summary>Collection`1.SetItem(Int32 index, !0 item) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverterCollection.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverterCollection.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonConverterCollection.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonException">
            <summary>Newtonsoft.Json.JsonException のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.#ctor(System.String,System.Exception)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.AttachBackingFieldToHelpLink">
            <summary>バッキング フィールドを持つプロパティとして StubJsonException.HelpLink をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.AttachBackingFieldToSource">
            <summary>バッキング フィールドを持つプロパティとして StubJsonException.Source をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.DataGet">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.GetBaseException">
            <summary>Exception.GetBaseException() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.GetBaseException01">
            <summary>Exception.GetBaseException() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.HelpLinkGet">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.HelpLinkSetString">
            <summary>Exception.set_HelpLink(String value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.InitializeStub">
            <summary>type StubJsonException の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.MessageGet">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.SourceGet">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.SourceSetString">
            <summary>Exception.set_Source(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.StackTraceGet">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonException.ToString">
            <summary>Exception.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonException.ToString01">
            <summary>Exception.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.Data">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.HelpLink">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.Message">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.Source">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonException.StackTrace">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute">
            <summary>Newtonsoft.Json.JsonExtensionDataAttribute のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.Equals(System.Object)">
            <summary>Attribute.Equals(Object obj) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.EqualsObject">
            <summary>Attribute.Equals(Object obj) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.GetHashCode">
            <summary>Attribute.GetHashCode() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.GetHashCode01">
            <summary>Attribute.GetHashCode() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.InitializeStub">
            <summary>type StubJsonExtensionDataAttribute の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.IsDefaultAttribute">
            <summary>Attribute.IsDefaultAttribute() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.IsDefaultAttribute01">
            <summary>Attribute.IsDefaultAttribute() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.Match(System.Object)">
            <summary>Attribute.Match(Object obj) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.MatchObject">
            <summary>Attribute.Match(Object obj) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.TypeIdGet">
            <summary>Attribute.get_TypeId() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonExtensionDataAttribute.TypeId">
            <summary>Attribute.get_TypeId() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonReader">
            <summary>Newtonsoft.Json.JsonReader のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.AttachBackingFieldToQuoteChar">
            <summary>バッキング フィールドを持つプロパティとして StubJsonReader.QuoteChar をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.Close">
            <summary>JsonReader.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.Close01">
            <summary>JsonReader.Close() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.DepthGet">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.Dispose(System.Boolean)">
            <summary>JsonReader.Dispose(Boolean disposing) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.InitializeStub">
            <summary>type StubJsonReader の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.PathGet">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.Read">
            <summary>JsonReader.Read() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.Read01">
            <summary>JsonReader.Read() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsBytes">
            <summary>JsonReader.ReadAsBytes() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsBytes01">
            <summary>JsonReader.ReadAsBytes() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDateTime">
            <summary>JsonReader.ReadAsDateTime() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDateTime01">
            <summary>JsonReader.ReadAsDateTime() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDateTimeOffset">
            <summary>JsonReader.ReadAsDateTimeOffset() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDateTimeOffset01">
            <summary>JsonReader.ReadAsDateTimeOffset() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDecimal">
            <summary>JsonReader.ReadAsDecimal() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsDecimal01">
            <summary>JsonReader.ReadAsDecimal() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsInt32">
            <summary>JsonReader.ReadAsInt32() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsInt3201">
            <summary>JsonReader.ReadAsInt32() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsString">
            <summary>JsonReader.ReadAsString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ReadAsString01">
            <summary>JsonReader.ReadAsString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ValueGet">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReader.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.Depth">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.Path">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.QuoteChar">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.TokenType">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.Value">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReader.ValueType">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonReaderException">
            <summary>Newtonsoft.Json.JsonReaderException のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.#ctor(System.String,System.Exception)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.AttachBackingFieldToHelpLink">
            <summary>バッキング フィールドを持つプロパティとして StubJsonReaderException.HelpLink をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.AttachBackingFieldToSource">
            <summary>バッキング フィールドを持つプロパティとして StubJsonReaderException.Source をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.DataGet">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.GetBaseException">
            <summary>Exception.GetBaseException() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.GetBaseException01">
            <summary>Exception.GetBaseException() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.HelpLinkGet">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.HelpLinkSetString">
            <summary>Exception.set_HelpLink(String value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.InitializeStub">
            <summary>type StubJsonReaderException の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.MessageGet">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.SourceGet">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.SourceSetString">
            <summary>Exception.set_Source(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.StackTraceGet">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonReaderException.ToString">
            <summary>Exception.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonReaderException.ToString01">
            <summary>Exception.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.Data">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.HelpLink">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.Message">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.Source">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonReaderException.StackTrace">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonSerializationException">
            <summary>Newtonsoft.Json.JsonSerializationException のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.AttachBackingFieldToHelpLink">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializationException.HelpLink をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.AttachBackingFieldToSource">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializationException.Source をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.DataGet">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.GetBaseException">
            <summary>Exception.GetBaseException() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.GetBaseException01">
            <summary>Exception.GetBaseException() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.HelpLinkGet">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.HelpLinkSetString">
            <summary>Exception.set_HelpLink(String value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.InitializeStub">
            <summary>type StubJsonSerializationException の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.MessageGet">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.SourceGet">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.SourceSetString">
            <summary>Exception.set_Source(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.StackTraceGet">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializationException.ToString">
            <summary>Exception.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializationException.ToString01">
            <summary>Exception.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.Data">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.HelpLink">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.Message">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.Source">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializationException.StackTrace">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonSerializer">
            <summary>Newtonsoft.Json.JsonSerializer のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToBinder">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.Binder をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToCheckAdditionalContent">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.CheckAdditionalContent をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToConstructorHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.ConstructorHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToContext">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.Context をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToContractResolver">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.ContractResolver をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToCulture">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.Culture をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToDateFormatHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.DateFormatHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToDateFormatString">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.DateFormatString をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToDateParseHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.DateParseHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToDateTimeZoneHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.DateTimeZoneHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToDefaultValueHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.DefaultValueHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToFloatFormatHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.FloatFormatHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToFloatParseHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.FloatParseHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToFormatting">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.Formatting をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToMaxDepth">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.MaxDepth をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToMissingMemberHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.MissingMemberHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToNullValueHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.NullValueHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToObjectCreationHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.ObjectCreationHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToPreserveReferencesHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.PreserveReferencesHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToReferenceLoopHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.ReferenceLoopHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToReferenceResolver">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.ReferenceResolver をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToStringEscapeHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.StringEscapeHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToTraceWriter">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.TraceWriter をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToTypeNameAssemblyFormat">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.TypeNameAssemblyFormat をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.AttachBackingFieldToTypeNameHandling">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSerializer.TypeNameHandling をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.BinderGet">
            <summary>JsonSerializer.get_Binder() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.BinderSetSerializationBinder">
            <summary>JsonSerializer.set_Binder(SerializationBinder value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.CheckAdditionalContentGet">
            <summary>JsonSerializer.get_CheckAdditionalContent() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.CheckAdditionalContentSetBoolean">
            <summary>JsonSerializer.set_CheckAdditionalContent(Boolean value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ConstructorHandlingGet">
            <summary>JsonSerializer.get_ConstructorHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ConstructorHandlingSetConstructorHandling">
            <summary>JsonSerializer.set_ConstructorHandling(ConstructorHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ContextGet">
            <summary>JsonSerializer.get_Context() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ContextSetStreamingContext">
            <summary>JsonSerializer.set_Context(StreamingContext value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ContractResolverGet">
            <summary>JsonSerializer.get_ContractResolver() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ContractResolverSetIContractResolver">
            <summary>JsonSerializer.set_ContractResolver(IContractResolver value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ConvertersGet">
            <summary>JsonSerializer.get_Converters() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.CultureGet">
            <summary>JsonSerializer.get_Culture() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.CultureSetCultureInfo">
            <summary>JsonSerializer.set_Culture(CultureInfo value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatHandlingGet">
            <summary>JsonSerializer.get_DateFormatHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatHandlingSetDateFormatHandling">
            <summary>JsonSerializer.set_DateFormatHandling(DateFormatHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatStringGet">
            <summary>JsonSerializer.get_DateFormatString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatStringSetString">
            <summary>JsonSerializer.set_DateFormatString(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateParseHandlingGet">
            <summary>JsonSerializer.get_DateParseHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateParseHandlingSetDateParseHandling">
            <summary>JsonSerializer.set_DateParseHandling(DateParseHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateTimeZoneHandlingGet">
            <summary>JsonSerializer.get_DateTimeZoneHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DateTimeZoneHandlingSetDateTimeZoneHandling">
            <summary>JsonSerializer.set_DateTimeZoneHandling(DateTimeZoneHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DefaultValueHandlingGet">
            <summary>JsonSerializer.get_DefaultValueHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.DefaultValueHandlingSetDefaultValueHandling">
            <summary>JsonSerializer.set_DefaultValueHandling(DefaultValueHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatFormatHandlingGet">
            <summary>JsonSerializer.get_FloatFormatHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatFormatHandlingSetFloatFormatHandling">
            <summary>JsonSerializer.set_FloatFormatHandling(FloatFormatHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatParseHandlingGet">
            <summary>JsonSerializer.get_FloatParseHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatParseHandlingSetFloatParseHandling">
            <summary>JsonSerializer.set_FloatParseHandling(FloatParseHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FormattingGet">
            <summary>JsonSerializer.get_Formatting() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.FormattingSetFormatting">
            <summary>JsonSerializer.set_Formatting(Formatting value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializer.InitializeStub">
            <summary>type StubJsonSerializer の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.MaxDepthGet">
            <summary>JsonSerializer.get_MaxDepth() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.MaxDepthSetNullableOfInt32">
            <summary>JsonSerializer.set_MaxDepth(Nullable`1&lt;Int32&gt; value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.MissingMemberHandlingGet">
            <summary>JsonSerializer.get_MissingMemberHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.MissingMemberHandlingSetMissingMemberHandling">
            <summary>JsonSerializer.set_MissingMemberHandling(MissingMemberHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.NullValueHandlingGet">
            <summary>JsonSerializer.get_NullValueHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.NullValueHandlingSetNullValueHandling">
            <summary>JsonSerializer.set_NullValueHandling(NullValueHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ObjectCreationHandlingGet">
            <summary>JsonSerializer.get_ObjectCreationHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ObjectCreationHandlingSetObjectCreationHandling">
            <summary>JsonSerializer.set_ObjectCreationHandling(ObjectCreationHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.PreserveReferencesHandlingGet">
            <summary>JsonSerializer.get_PreserveReferencesHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.PreserveReferencesHandlingSetPreserveReferencesHandling">
            <summary>JsonSerializer.set_PreserveReferencesHandling(PreserveReferencesHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceLoopHandlingGet">
            <summary>JsonSerializer.get_ReferenceLoopHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceLoopHandlingSetReferenceLoopHandling">
            <summary>JsonSerializer.set_ReferenceLoopHandling(ReferenceLoopHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceResolverGet">
            <summary>JsonSerializer.get_ReferenceResolver() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceResolverSetIReferenceResolver">
            <summary>JsonSerializer.set_ReferenceResolver(IReferenceResolver value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.StringEscapeHandlingGet">
            <summary>JsonSerializer.get_StringEscapeHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.StringEscapeHandlingSetStringEscapeHandling">
            <summary>JsonSerializer.set_StringEscapeHandling(StringEscapeHandling value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TraceWriterGet">
            <summary>JsonSerializer.get_TraceWriter() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TraceWriterSetITraceWriter">
            <summary>JsonSerializer.set_TraceWriter(ITraceWriter value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameAssemblyFormatGet">
            <summary>JsonSerializer.get_TypeNameAssemblyFormat() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameAssemblyFormatSetFormatterAssemblyStyle">
            <summary>JsonSerializer.set_TypeNameAssemblyFormat(FormatterAssemblyStyle value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameHandlingGet">
            <summary>JsonSerializer.get_TypeNameHandling() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameHandlingSetTypeNameHandling">
            <summary>JsonSerializer.set_TypeNameHandling(TypeNameHandling value) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.Binder">
            <summary>JsonSerializer.get_Binder() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.CheckAdditionalContent">
            <summary>JsonSerializer.get_CheckAdditionalContent() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.ConstructorHandling">
            <summary>JsonSerializer.get_ConstructorHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.Context">
            <summary>JsonSerializer.get_Context() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.ContractResolver">
            <summary>JsonSerializer.get_ContractResolver() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.Converters">
            <summary>JsonSerializer.get_Converters() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.Culture">
            <summary>JsonSerializer.get_Culture() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatHandling">
            <summary>JsonSerializer.get_DateFormatHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.DateFormatString">
            <summary>JsonSerializer.get_DateFormatString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.DateParseHandling">
            <summary>JsonSerializer.get_DateParseHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.DateTimeZoneHandling">
            <summary>JsonSerializer.get_DateTimeZoneHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.DefaultValueHandling">
            <summary>JsonSerializer.get_DefaultValueHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatFormatHandling">
            <summary>JsonSerializer.get_FloatFormatHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.FloatParseHandling">
            <summary>JsonSerializer.get_FloatParseHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.Formatting">
            <summary>JsonSerializer.get_Formatting() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.MaxDepth">
            <summary>JsonSerializer.get_MaxDepth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.MissingMemberHandling">
            <summary>JsonSerializer.get_MissingMemberHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.NullValueHandling">
            <summary>JsonSerializer.get_NullValueHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.ObjectCreationHandling">
            <summary>JsonSerializer.get_ObjectCreationHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.PreserveReferencesHandling">
            <summary>JsonSerializer.get_PreserveReferencesHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceLoopHandling">
            <summary>JsonSerializer.get_ReferenceLoopHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.ReferenceResolver">
            <summary>JsonSerializer.get_ReferenceResolver() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.StringEscapeHandling">
            <summary>JsonSerializer.get_StringEscapeHandling() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.TraceWriter">
            <summary>JsonSerializer.get_TraceWriter() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameAssemblyFormat">
            <summary>JsonSerializer.get_TypeNameAssemblyFormat() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializer.TypeNameHandling">
            <summary>JsonSerializer.get_TypeNameHandling() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonSerializerSettings">
            <summary>Newtonsoft.Json.JsonSerializerSettings のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializerSettings.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonSerializerSettings.InitializeStub">
            <summary>type StubJsonSerializerSettings の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializerSettings.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializerSettings.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonSerializerSettings.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonTextReader">
            <summary>Newtonsoft.Json.JsonTextReader のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.#ctor(System.IO.TextReader)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.AttachBackingFieldToQuoteChar">
            <summary>バッキング フィールドを持つプロパティとして StubJsonTextReader.QuoteChar をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.Close">
            <summary>JsonTextReader.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.Close01">
            <summary>JsonTextReader.Close() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.DepthGet">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.Dispose(System.Boolean)">
            <summary>JsonReader.Dispose(Boolean disposing) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.InitializeStub">
            <summary>type StubJsonTextReader の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.PathGet">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.Read">
            <summary>JsonTextReader.Read() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.Read01">
            <summary>JsonTextReader.Read() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsBytes">
            <summary>JsonTextReader.ReadAsBytes() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsBytes01">
            <summary>JsonTextReader.ReadAsBytes() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDateTime">
            <summary>JsonTextReader.ReadAsDateTime() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDateTime01">
            <summary>JsonTextReader.ReadAsDateTime() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDateTimeOffset">
            <summary>JsonTextReader.ReadAsDateTimeOffset() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDateTimeOffset01">
            <summary>JsonTextReader.ReadAsDateTimeOffset() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDecimal">
            <summary>JsonTextReader.ReadAsDecimal() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsDecimal01">
            <summary>JsonTextReader.ReadAsDecimal() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsInt32">
            <summary>JsonTextReader.ReadAsInt32() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsInt3201">
            <summary>JsonTextReader.ReadAsInt32() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsString">
            <summary>JsonTextReader.ReadAsString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ReadAsString01">
            <summary>JsonTextReader.ReadAsString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ValueGet">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextReader.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.Depth">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.Path">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.QuoteChar">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.TokenType">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.Value">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextReader.ValueType">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonTextWriter">
            <summary>Newtonsoft.Json.JsonTextWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.Close">
            <summary>JsonTextWriter.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.Close01">
            <summary>JsonTextWriter.Close() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.Flush">
            <summary>JsonTextWriter.Flush() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.Flush01">
            <summary>JsonTextWriter.Flush() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.InitializeStub">
            <summary>type StubJsonTextWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteComment(System.String)">
            <summary>JsonTextWriter.WriteComment(String text) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteCommentString">
            <summary>JsonTextWriter.WriteComment(String text) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEnd">
            <summary>JsonWriter.WriteEnd() の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>JsonTextWriter.WriteEnd(JsonToken token) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEnd01">
            <summary>JsonWriter.WriteEnd() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndArray01">
            <summary>JsonWriter.WriteEndArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndConstructor01">
            <summary>JsonWriter.WriteEndConstructor() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndJsonToken">
            <summary>JsonTextWriter.WriteEnd(JsonToken token) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteEndObject01">
            <summary>JsonWriter.WriteEndObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteIndent">
            <summary>JsonTextWriter.WriteIndent() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteIndent01">
            <summary>JsonTextWriter.WriteIndent() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteIndentSpace">
            <summary>JsonTextWriter.WriteIndentSpace() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteIndentSpace01">
            <summary>JsonTextWriter.WriteIndentSpace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteNull">
            <summary>JsonTextWriter.WriteNull() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteNull01">
            <summary>JsonTextWriter.WriteNull() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WritePropertyName(System.String)">
            <summary>JsonTextWriter.WritePropertyName(String name) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JsonTextWriter.WritePropertyName(String name, Boolean escape) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WritePropertyNameString">
            <summary>JsonTextWriter.WritePropertyName(String name) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WritePropertyNameStringBoolean">
            <summary>JsonTextWriter.WritePropertyName(String name, Boolean escape) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteRaw(System.String)">
            <summary>JsonTextWriter.WriteRaw(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteRawString">
            <summary>JsonTextWriter.WriteRaw(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteRawValue(System.String)">
            <summary>JsonWriter.WriteRawValue(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteRawValueString">
            <summary>JsonWriter.WriteRawValue(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartArray">
            <summary>JsonTextWriter.WriteStartArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartArray01">
            <summary>JsonTextWriter.WriteStartArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartConstructor(System.String)">
            <summary>JsonTextWriter.WriteStartConstructor(String name) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartConstructorString">
            <summary>JsonTextWriter.WriteStartConstructor(String name) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartObject">
            <summary>JsonTextWriter.WriteStartObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteStartObject01">
            <summary>JsonTextWriter.WriteStartObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteUndefined">
            <summary>JsonTextWriter.WriteUndefined() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteUndefined01">
            <summary>JsonTextWriter.WriteUndefined() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteValueDelimiter">
            <summary>JsonTextWriter.WriteValueDelimiter() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteValueDelimiter01">
            <summary>JsonTextWriter.WriteValueDelimiter() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteWhitespace(System.String)">
            <summary>JsonTextWriter.WriteWhitespace(String ws) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonTextWriter.WriteWhitespaceString">
            <summary>JsonTextWriter.WriteWhitespace(String ws) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextWriter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextWriter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonTextWriter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonValidatingReader">
            <summary>Newtonsoft.Json.JsonValidatingReader のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.AttachBackingFieldToQuoteChar">
            <summary>バッキング フィールドを持つプロパティとして StubJsonValidatingReader.QuoteChar をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Close">
            <summary>JsonReader.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Close01">
            <summary>JsonReader.Close() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.DepthGet">
            <summary>JsonValidatingReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Dispose(System.Boolean)">
            <summary>JsonReader.Dispose(Boolean disposing) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.InitializeStub">
            <summary>type StubJsonValidatingReader の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.PathGet">
            <summary>JsonValidatingReader.get_Path() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.QuoteCharGet">
            <summary>JsonValidatingReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.QuoteCharSetChar">
            <summary>JsonValidatingReader.set_QuoteChar(Char value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Read">
            <summary>JsonValidatingReader.Read() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Read01">
            <summary>JsonValidatingReader.Read() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsBytes">
            <summary>JsonValidatingReader.ReadAsBytes() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsBytes01">
            <summary>JsonValidatingReader.ReadAsBytes() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDateTime">
            <summary>JsonValidatingReader.ReadAsDateTime() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDateTime01">
            <summary>JsonValidatingReader.ReadAsDateTime() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDateTimeOffset">
            <summary>JsonValidatingReader.ReadAsDateTimeOffset() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDateTimeOffset01">
            <summary>JsonValidatingReader.ReadAsDateTimeOffset() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDecimal">
            <summary>JsonValidatingReader.ReadAsDecimal() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsDecimal01">
            <summary>JsonValidatingReader.ReadAsDecimal() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsInt32">
            <summary>JsonValidatingReader.ReadAsInt32() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsInt3201">
            <summary>JsonValidatingReader.ReadAsInt32() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsString">
            <summary>JsonValidatingReader.ReadAsString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ReadAsString01">
            <summary>JsonValidatingReader.ReadAsString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.TokenTypeGet">
            <summary>JsonValidatingReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ValueGet">
            <summary>JsonValidatingReader.get_Value() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ValueTypeGet">
            <summary>JsonValidatingReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Depth">
            <summary>JsonValidatingReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Path">
            <summary>JsonValidatingReader.get_Path() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.QuoteChar">
            <summary>JsonValidatingReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.TokenType">
            <summary>JsonValidatingReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.Value">
            <summary>JsonValidatingReader.get_Value() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonValidatingReader.ValueType">
            <summary>JsonValidatingReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonWriter">
            <summary>Newtonsoft.Json.JsonWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.Close">
            <summary>JsonWriter.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.Close01">
            <summary>JsonWriter.Close() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.Flush">
            <summary>JsonWriter.Flush() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.Flush01">
            <summary>JsonWriter.Flush() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.InitializeStub">
            <summary>type StubJsonWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteComment(System.String)">
            <summary>JsonWriter.WriteComment(String text) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteCommentString">
            <summary>JsonWriter.WriteComment(String text) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEnd">
            <summary>JsonWriter.WriteEnd() の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>JsonWriter.WriteEnd(JsonToken token) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEnd01">
            <summary>JsonWriter.WriteEnd() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndArray01">
            <summary>JsonWriter.WriteEndArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndConstructor01">
            <summary>JsonWriter.WriteEndConstructor() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndJsonToken">
            <summary>JsonWriter.WriteEnd(JsonToken token) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteEndObject01">
            <summary>JsonWriter.WriteEndObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteIndent">
            <summary>JsonWriter.WriteIndent() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteIndent01">
            <summary>JsonWriter.WriteIndent() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteIndentSpace">
            <summary>JsonWriter.WriteIndentSpace() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteIndentSpace01">
            <summary>JsonWriter.WriteIndentSpace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteNull">
            <summary>JsonWriter.WriteNull() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteNull01">
            <summary>JsonWriter.WriteNull() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WritePropertyName(System.String)">
            <summary>JsonWriter.WritePropertyName(String name) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WritePropertyNameString">
            <summary>JsonWriter.WritePropertyName(String name) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WritePropertyNameStringBoolean">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteRaw(System.String)">
            <summary>JsonWriter.WriteRaw(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteRawString">
            <summary>JsonWriter.WriteRaw(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteRawValue(System.String)">
            <summary>JsonWriter.WriteRawValue(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteRawValueString">
            <summary>JsonWriter.WriteRawValue(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartArray">
            <summary>JsonWriter.WriteStartArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartArray01">
            <summary>JsonWriter.WriteStartArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartConstructor(System.String)">
            <summary>JsonWriter.WriteStartConstructor(String name) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartConstructorString">
            <summary>JsonWriter.WriteStartConstructor(String name) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartObject">
            <summary>JsonWriter.WriteStartObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteStartObject01">
            <summary>JsonWriter.WriteStartObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteUndefined">
            <summary>JsonWriter.WriteUndefined() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteUndefined01">
            <summary>JsonWriter.WriteUndefined() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteValueDelimiter">
            <summary>JsonWriter.WriteValueDelimiter() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteValueDelimiter01">
            <summary>JsonWriter.WriteValueDelimiter() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriter.WriteWhitespace(System.String)">
            <summary>JsonWriter.WriteWhitespace(String ws) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriter.WriteWhitespaceString">
            <summary>JsonWriter.WriteWhitespace(String ws) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubJsonWriterException">
            <summary>Newtonsoft.Json.JsonWriterException のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.#ctor(System.String,System.Exception)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.AttachBackingFieldToHelpLink">
            <summary>バッキング フィールドを持つプロパティとして StubJsonWriterException.HelpLink をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.AttachBackingFieldToSource">
            <summary>バッキング フィールドを持つプロパティとして StubJsonWriterException.Source をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.DataGet">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.GetBaseException">
            <summary>Exception.GetBaseException() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.GetBaseException01">
            <summary>Exception.GetBaseException() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.HelpLinkGet">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.HelpLinkSetString">
            <summary>Exception.set_HelpLink(String value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.InitializeStub">
            <summary>type StubJsonWriterException の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.MessageGet">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.SourceGet">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.SourceSetString">
            <summary>Exception.set_Source(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.StackTraceGet">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubJsonWriterException.ToString">
            <summary>Exception.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubJsonWriterException.ToString01">
            <summary>Exception.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.Data">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.HelpLink">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.Message">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.Source">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubJsonWriterException.StackTrace">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Fakes.StubSerializationBinder">
            <summary>Newtonsoft.Json.SerializationBinder のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubSerializationBinder.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>SerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubSerializationBinder.BindToNameTypeStringOutStringOut">
            <summary>SerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubSerializationBinder.BindToType(System.String,System.String)">
            <summary>SerializationBinder.BindToType(String assemblyName, String typeName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Fakes.StubSerializationBinder.BindToTypeStringString">
            <summary>SerializationBinder.BindToType(String assemblyName, String typeName) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Fakes.StubSerializationBinder.InitializeStub">
            <summary>type StubSerializationBinder の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubSerializationBinder.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubSerializationBinder.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Fakes.StubSerializationBinder.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimExtensions">
            <summary>Newtonsoft.Json.Linq.Extensions の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.AncestorsOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.Ancestors(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.AsJEnumerableOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Linq.IJEnumerable{``0}})">
            <summary>Extensions.AsJEnumerable(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ChildrenOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.Children(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ChildrenOf2IEnumerableOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Extensions.Children(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ConvertOf2IEnumerableOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>Extensions.Convert(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ConvertOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>Extensions.Convert(!!0 token) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.DescendantsOf1IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.Descendants(IEnumerable`1&lt;!!0&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValueOf1IEnumerableOfJToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},``0})">
            <summary>Extensions.Value(IEnumerable`1&lt;JToken&gt; value) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValueOf2IEnumerableOfM0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>Extensions.Value(IEnumerable`1&lt;!!0&gt; value) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValuesOf1IEnumerableOfJToken``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Extensions.Values(IEnumerable`1&lt;JToken&gt; source) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValuesOf1IEnumerableOfJTokenObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Extensions.Values(IEnumerable`1&lt;JToken&gt; source, Object key) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValuesOf2IEnumerableOfM0Object``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Object,System.Collections.Generic.IEnumerable{``1}})">
            <summary>Extensions.Values(IEnumerable`1&lt;!!0&gt; source, Object key) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions._Ancestorsb__0Of1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.&lt;Ancestors&gt;b__0(!!0 j) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions._Childrenb__eOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.&lt;Children&gt;b__e(!!0 c) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimExtensions._Descendantsb__1Of1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken}})">
            <summary>Extensions.&lt;Descendants&gt;b__1(!!0 j) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions.AsJEnumerableIEnumerableOfJToken">
            <summary>Extensions.AsJEnumerable(IEnumerable`1&lt;JToken&gt; source) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions.PropertiesIEnumerableOfJObject">
            <summary>Extensions.Properties(IEnumerable`1&lt;JObject&gt; source) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValuesIEnumerableOfJToken">
            <summary>Extensions.Values(IEnumerable`1&lt;JToken&gt; source) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions.ValuesIEnumerableOfJTokenObject">
            <summary>Extensions.Values(IEnumerable`1&lt;JToken&gt; source, Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimExtensions._Propertiesb__2JObject">
            <summary>Extensions.&lt;Properties&gt;b__2(JObject d) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJArray">
            <summary>Newtonsoft.Json.Linq.JArray の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJArray.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AddJToken">
            <summary>JArray.Add(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ChildrenTokensGet">
            <summary>JArray.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.Clear">
            <summary>JArray.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.CloneToken">
            <summary>JArray.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.Constructor">
            <summary>JArray.JArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ConstructorJArray">
            <summary>JArray.JArray(JArray other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ConstructorObject">
            <summary>JArray.JArray(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ConstructorObjectArray">
            <summary>JArray.JArray(Object[] content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ContainsJToken">
            <summary>JArray.Contains(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.CopyToJTokenArrayInt32">
            <summary>JArray.CopyTo(JToken[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.DeepEqualsJToken">
            <summary>JArray.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.FromObjectObject">
            <summary>JArray.FromObject(Object o) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.FromObjectObjectJsonSerializer">
            <summary>JArray.FromObject(Object o, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.GetDeepHashCode">
            <summary>JArray.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.GetEnumerator">
            <summary>JArray.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.IndexOfJToken">
            <summary>JArray.IndexOf(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.InsertInt32JToken">
            <summary>JArray.Insert(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.IsReadOnlyGet">
            <summary>JArray.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ItemGetInt32">
            <summary>JArray.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ItemGetObject">
            <summary>JArray.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ItemSetInt32JToken">
            <summary>JArray.set_Item(Int32 index, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ItemSetObjectJToken">
            <summary>JArray.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.LoadJsonReader">
            <summary>JArray.Load(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.ParseString">
            <summary>JArray.Parse(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.RemoveAtInt32">
            <summary>JArray.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.RemoveJToken">
            <summary>JArray.Remove(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.TypeGet">
            <summary>JArray.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.WriteToJsonWriterJsonConverterArray">
            <summary>JArray.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.AddJToken">
            <summary>JArray.Add(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ChildrenTokensGet">
            <summary>JArray.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.Clear">
            <summary>JArray.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.CloneToken">
            <summary>JArray.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ContainsJToken">
            <summary>JArray.Contains(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.CopyToJTokenArrayInt32">
            <summary>JArray.CopyTo(JToken[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.DeepEqualsJToken">
            <summary>JArray.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.GetDeepHashCode">
            <summary>JArray.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.GetEnumerator">
            <summary>JArray.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.IndexOfJToken">
            <summary>JArray.IndexOf(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.InsertInt32JToken">
            <summary>JArray.Insert(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.IsReadOnlyGet">
            <summary>JArray.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ItemGetInt32">
            <summary>JArray.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ItemGetObject">
            <summary>JArray.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ItemSetInt32JToken">
            <summary>JArray.set_Item(Int32 index, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.ItemSetObjectJToken">
            <summary>JArray.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.RemoveAtInt32">
            <summary>JArray.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.RemoveJToken">
            <summary>JArray.Remove(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.TypeGet">
            <summary>JArray.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJArray.AllInstances.WriteToJsonWriterJsonConverterArray">
            <summary>JArray.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJConstructor">
            <summary>Newtonsoft.Json.Linq.JConstructor の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ChildrenTokensGet">
            <summary>JConstructor.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.CloneToken">
            <summary>JConstructor.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.Constructor">
            <summary>JConstructor.JConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ConstructorJConstructor">
            <summary>JConstructor.JConstructor(JConstructor other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ConstructorString">
            <summary>JConstructor.JConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ConstructorStringObject">
            <summary>JConstructor.JConstructor(String name, Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ConstructorStringObjectArray">
            <summary>JConstructor.JConstructor(String name, Object[] content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.DeepEqualsJToken">
            <summary>JConstructor.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.GetDeepHashCode">
            <summary>JConstructor.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ItemGetObject">
            <summary>JConstructor.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.ItemSetObjectJToken">
            <summary>JConstructor.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.LoadJsonReader">
            <summary>JConstructor.Load(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.NameGet">
            <summary>JConstructor.get_Name() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.NameSetString">
            <summary>JConstructor.set_Name(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.TypeGet">
            <summary>JConstructor.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.WriteToJsonWriterJsonConverterArray">
            <summary>JConstructor.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.ChildrenTokensGet">
            <summary>JConstructor.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.CloneToken">
            <summary>JConstructor.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.DeepEqualsJToken">
            <summary>JConstructor.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.GetDeepHashCode">
            <summary>JConstructor.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.ItemGetObject">
            <summary>JConstructor.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.ItemSetObjectJToken">
            <summary>JConstructor.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.NameGet">
            <summary>JConstructor.get_Name() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.NameSetString">
            <summary>JConstructor.set_Name(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.TypeGet">
            <summary>JConstructor.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJConstructor.AllInstances.WriteToJsonWriterJsonConverterArray">
            <summary>JConstructor.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJContainer">
            <summary>Newtonsoft.Json.Linq.JContainer の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ValuesOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>JContainer.Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AddAndSkipParentCheckJToken">
            <summary>JContainer.AddAndSkipParentCheck(JToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AddFirstObject">
            <summary>JContainer.AddFirst(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AddInternalInt32ObjectBoolean">
            <summary>JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AddObject">
            <summary>JContainer.Add(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CheckReentrancy">
            <summary>JContainer.CheckReentrancy() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Children">
            <summary>JContainer.Children() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ClearItems">
            <summary>JContainer.ClearItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Constructor">
            <summary>JContainer.JContainer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ConstructorJContainer">
            <summary>JContainer.JContainer(JContainer other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ContainsItemJToken">
            <summary>JContainer.ContainsItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ContentsEqualJContainer">
            <summary>JContainer.ContentsEqual(JContainer container) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ContentsHashCode">
            <summary>JContainer.ContentsHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CopyItemsToArrayInt32">
            <summary>JContainer.CopyItemsTo(Array array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CountGet">
            <summary>JContainer.get_Count() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CreateChildrenCollection">
            <summary>JContainer.CreateChildrenCollection() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CreateFromContentObject">
            <summary>JContainer.CreateFromContent(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.CreateWriter">
            <summary>JContainer.CreateWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.Descendants">
            <summary>JContainer.Descendants() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.EnsureParentTokenJTokenBoolean">
            <summary>JContainer.EnsureParentToken(JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.EnsureValueObject">
            <summary>JContainer.EnsureValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.FirstGet">
            <summary>JContainer.get_First() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.GetItemInt32">
            <summary>JContainer.GetItem(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.HasValuesGet">
            <summary>JContainer.get_HasValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IndexOfItemJToken">
            <summary>JContainer.IndexOfItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.InsertItemInt32JTokenBoolean">
            <summary>JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsFixedSizeSystemCollectionsIListget">
            <summary>JContainer.System.Collections.IList.get_IsFixedSize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsMultiContentObject">
            <summary>JContainer.IsMultiContent(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsReadOnlySystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenget">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsReadOnlySystemCollectionsIListget">
            <summary>JContainer.System.Collections.IList.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsSynchronizedSystemCollectionsICollectionget">
            <summary>JContainer.System.Collections.ICollection.get_IsSynchronized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.IsTokenUnchangedJTokenJToken">
            <summary>JContainer.IsTokenUnchanged(JToken currentValue, JToken newValue) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ItemSystemCollectionsGenericIListNewtonsoftJsonLinqJTokengetInt32">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ItemSystemCollectionsGenericIListNewtonsoftJsonLinqJTokensetInt32JToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.set_Item(Int32 index, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ItemSystemCollectionsIListgetInt32">
            <summary>JContainer.System.Collections.IList.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ItemSystemCollectionsIListsetInt32Object">
            <summary>JContainer.System.Collections.IList.set_Item(Int32 index, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.LastGet">
            <summary>JContainer.get_Last() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ReadContentFromJsonReader">
            <summary>JContainer.ReadContentFrom(JsonReader r) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ReadTokenFromJsonReader">
            <summary>JContainer.ReadTokenFrom(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.RemoveAll">
            <summary>JContainer.RemoveAll() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.RemoveItemAtInt32">
            <summary>JContainer.RemoveItemAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.RemoveItemJToken">
            <summary>JContainer.RemoveItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ReplaceAllObject">
            <summary>JContainer.ReplaceAll(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ReplaceItemJTokenJToken">
            <summary>JContainer.ReplaceItem(JToken existing, JToken replacement) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SetItemInt32JToken">
            <summary>JContainer.SetItem(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SyncRootSystemCollectionsICollectionget">
            <summary>JContainer.System.Collections.ICollection.get_SyncRoot() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenAddJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Add(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenClear">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenContainsJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Contains(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenCopyToJTokenArrayInt32">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.CopyTo(JToken[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenRemoveJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Remove(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenIndexOfJToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.IndexOf(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenInsertInt32JToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.Insert(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenRemoveAtInt32">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>JContainer.System.Collections.ICollection.CopyTo(Array array, Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListAddObject">
            <summary>JContainer.System.Collections.IList.Add(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListClear">
            <summary>JContainer.System.Collections.IList.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListContainsObject">
            <summary>JContainer.System.Collections.IList.Contains(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListIndexOfObject">
            <summary>JContainer.System.Collections.IList.IndexOf(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListInsertInt32Object">
            <summary>JContainer.System.Collections.IList.Insert(Int32 index, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListRemoveAtInt32">
            <summary>JContainer.System.Collections.IList.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.SystemCollectionsIListRemoveObject">
            <summary>JContainer.System.Collections.IList.Remove(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.ValidateTokenJTokenJToken">
            <summary>JContainer.ValidateToken(JToken o, JToken existing) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ValuesOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JContainer,System.Collections.Generic.IEnumerable{``0}})">
            <summary>JContainer.Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.AddAndSkipParentCheckJToken">
            <summary>JContainer.AddAndSkipParentCheck(JToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.AddFirstObject">
            <summary>JContainer.AddFirst(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.AddInternalInt32ObjectBoolean">
            <summary>JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.AddObject">
            <summary>JContainer.Add(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CheckReentrancy">
            <summary>JContainer.CheckReentrancy() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.Children">
            <summary>JContainer.Children() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ClearItems">
            <summary>JContainer.ClearItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ContainsItemJToken">
            <summary>JContainer.ContainsItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ContentsEqualJContainer">
            <summary>JContainer.ContentsEqual(JContainer container) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ContentsHashCode">
            <summary>JContainer.ContentsHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CopyItemsToArrayInt32">
            <summary>JContainer.CopyItemsTo(Array array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CountGet">
            <summary>JContainer.get_Count() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CreateChildrenCollection">
            <summary>JContainer.CreateChildrenCollection() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CreateFromContentObject">
            <summary>JContainer.CreateFromContent(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.CreateWriter">
            <summary>JContainer.CreateWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.Descendants">
            <summary>JContainer.Descendants() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.EnsureParentTokenJTokenBoolean">
            <summary>JContainer.EnsureParentToken(JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.EnsureValueObject">
            <summary>JContainer.EnsureValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.FirstGet">
            <summary>JContainer.get_First() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.GetItemInt32">
            <summary>JContainer.GetItem(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.HasValuesGet">
            <summary>JContainer.get_HasValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IndexOfItemJToken">
            <summary>JContainer.IndexOfItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.InsertItemInt32JTokenBoolean">
            <summary>JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IsFixedSizeSystemCollectionsIListget">
            <summary>JContainer.System.Collections.IList.get_IsFixedSize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IsMultiContentObject">
            <summary>JContainer.IsMultiContent(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IsReadOnlySystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenget">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IsReadOnlySystemCollectionsIListget">
            <summary>JContainer.System.Collections.IList.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.IsSynchronizedSystemCollectionsICollectionget">
            <summary>JContainer.System.Collections.ICollection.get_IsSynchronized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ItemSystemCollectionsGenericIListNewtonsoftJsonLinqJTokengetInt32">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ItemSystemCollectionsGenericIListNewtonsoftJsonLinqJTokensetInt32JToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.set_Item(Int32 index, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ItemSystemCollectionsIListgetInt32">
            <summary>JContainer.System.Collections.IList.get_Item(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ItemSystemCollectionsIListsetInt32Object">
            <summary>JContainer.System.Collections.IList.set_Item(Int32 index, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.LastGet">
            <summary>JContainer.get_Last() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ReadContentFromJsonReader">
            <summary>JContainer.ReadContentFrom(JsonReader r) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ReadTokenFromJsonReader">
            <summary>JContainer.ReadTokenFrom(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.RemoveAll">
            <summary>JContainer.RemoveAll() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.RemoveItemAtInt32">
            <summary>JContainer.RemoveItemAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.RemoveItemJToken">
            <summary>JContainer.RemoveItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ReplaceAllObject">
            <summary>JContainer.ReplaceAll(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ReplaceItemJTokenJToken">
            <summary>JContainer.ReplaceItem(JToken existing, JToken replacement) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SetItemInt32JToken">
            <summary>JContainer.SetItem(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SyncRootSystemCollectionsICollectionget">
            <summary>JContainer.System.Collections.ICollection.get_SyncRoot() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenAddJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Add(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenClear">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenContainsJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Contains(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenCopyToJTokenArrayInt32">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.CopyTo(JToken[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericICollectionNewtonsoftJsonLinqJTokenRemoveJToken">
            <summary>JContainer.System.Collections.Generic.ICollection&lt;Newtonsoft.Json.Linq.JToken&gt;.Remove(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenIndexOfJToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.IndexOf(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenInsertInt32JToken">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.Insert(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsGenericIListNewtonsoftJsonLinqJTokenRemoveAtInt32">
            <summary>JContainer.System.Collections.Generic.IList&lt;Newtonsoft.Json.Linq.JToken&gt;.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsICollectionCopyToArrayInt32">
            <summary>JContainer.System.Collections.ICollection.CopyTo(Array array, Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListAddObject">
            <summary>JContainer.System.Collections.IList.Add(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListClear">
            <summary>JContainer.System.Collections.IList.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListContainsObject">
            <summary>JContainer.System.Collections.IList.Contains(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListIndexOfObject">
            <summary>JContainer.System.Collections.IList.IndexOf(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListInsertInt32Object">
            <summary>JContainer.System.Collections.IList.Insert(Int32 index, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListRemoveAtInt32">
            <summary>JContainer.System.Collections.IList.RemoveAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.SystemCollectionsIListRemoveObject">
            <summary>JContainer.System.Collections.IList.Remove(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJContainer.AllInstances.ValidateTokenJTokenJToken">
            <summary>JContainer.ValidateToken(JToken o, JToken existing) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1">
            <summary>Newtonsoft.Json.Linq.JEnumerable`1 の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.StaticConstructor">
            <summary>JEnumerable`1.JEnumerable`1() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJEnumerable`1.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJObject">
            <summary>Newtonsoft.Json.Linq.JObject の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJObject.Bind(System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AddStringJToken">
            <summary>JObject.Add(String propertyName, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ChildrenTokensGet">
            <summary>JObject.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.CloneToken">
            <summary>JObject.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.Constructor">
            <summary>JObject.JObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ConstructorJObject">
            <summary>JObject.JObject(JObject other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ConstructorObject">
            <summary>JObject.JObject(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ConstructorObjectArray">
            <summary>JObject.JObject(Object[] content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.DeepEqualsJToken">
            <summary>JObject.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.FromObjectObject">
            <summary>JObject.FromObject(Object o) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.FromObjectObjectJsonSerializer">
            <summary>JObject.FromObject(Object o, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.GetDeepHashCode">
            <summary>JObject.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.GetEnumerator">
            <summary>JObject.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.GetValueString">
            <summary>JObject.GetValue(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.GetValueStringStringComparison">
            <summary>JObject.GetValue(String propertyName, StringComparison comparison) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.InsertItemInt32JTokenBoolean">
            <summary>JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.InternalPropertyChangedJProperty">
            <summary>JObject.InternalPropertyChanged(JProperty childProperty) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.InternalPropertyChangingJProperty">
            <summary>JObject.InternalPropertyChanging(JProperty childProperty) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.IsReadOnlySystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ItemGetObject">
            <summary>JObject.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ItemGetString">
            <summary>JObject.get_Item(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ItemSetObjectJToken">
            <summary>JObject.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ItemSetStringJToken">
            <summary>JObject.set_Item(String propertyName, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.KeysSystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Keys() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.LoadJsonReader">
            <summary>JObject.Load(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.OnPropertyChangedString">
            <summary>JObject.OnPropertyChanged(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ParseString">
            <summary>JObject.Parse(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.Properties">
            <summary>JObject.Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.PropertyChangedAddPropertyChangedEventHandler">
            <summary>JObject.add_PropertyChanged(PropertyChangedEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.PropertyChangedRemovePropertyChangedEventHandler">
            <summary>JObject.remove_PropertyChanged(PropertyChangedEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.PropertyString">
            <summary>JObject.Property(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.PropertyValues">
            <summary>JObject.PropertyValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.RemoveString">
            <summary>JObject.Remove(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenAddKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Add(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenClear">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenContainsKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Contains(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenCopyToKeyValuePairOfStringJTokenArrayInt32">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.CopyTo(KeyValuePair`2&lt;String,JToken&gt;[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenRemoveKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Remove(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.SystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenContainsKeyString">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.ContainsKey(String key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.TryGetValueStringJTokenOut">
            <summary>JObject.TryGetValue(String propertyName, JToken&amp; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.TryGetValueStringStringComparisonJTokenOut">
            <summary>JObject.TryGetValue(String propertyName, StringComparison comparison, JToken&amp; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.TypeGet">
            <summary>JObject.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ValidateTokenJTokenJToken">
            <summary>JObject.ValidateToken(JToken o, JToken existing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.ValuesSystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.WriteToJsonWriterJsonConverterArray">
            <summary>JObject.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject._PropertyValuesb__0JProperty">
            <summary>JObject.&lt;PropertyValues&gt;b__0(JProperty p) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.AddStringJToken">
            <summary>JObject.Add(String propertyName, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ChildrenTokensGet">
            <summary>JObject.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.CloneToken">
            <summary>JObject.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.DeepEqualsJToken">
            <summary>JObject.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.GetDeepHashCode">
            <summary>JObject.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.GetEnumerator">
            <summary>JObject.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.GetValueString">
            <summary>JObject.GetValue(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.GetValueStringStringComparison">
            <summary>JObject.GetValue(String propertyName, StringComparison comparison) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.InsertItemInt32JTokenBoolean">
            <summary>JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.InternalPropertyChangedJProperty">
            <summary>JObject.InternalPropertyChanged(JProperty childProperty) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.InternalPropertyChangingJProperty">
            <summary>JObject.InternalPropertyChanging(JProperty childProperty) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.IsReadOnlySystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.get_IsReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ItemGetObject">
            <summary>JObject.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ItemGetString">
            <summary>JObject.get_Item(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ItemSetObjectJToken">
            <summary>JObject.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ItemSetStringJToken">
            <summary>JObject.set_Item(String propertyName, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.KeysSystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Keys() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.OnPropertyChangedString">
            <summary>JObject.OnPropertyChanged(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.Properties">
            <summary>JObject.Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.PropertyChangedAddPropertyChangedEventHandler">
            <summary>JObject.add_PropertyChanged(PropertyChangedEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.PropertyChangedRemovePropertyChangedEventHandler">
            <summary>JObject.remove_PropertyChanged(PropertyChangedEventHandler value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.PropertyString">
            <summary>JObject.Property(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.PropertyValues">
            <summary>JObject.PropertyValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.RemoveString">
            <summary>JObject.Remove(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenAddKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Add(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenClear">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Clear() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenContainsKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Contains(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenCopyToKeyValuePairOfStringJTokenArrayInt32">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.CopyTo(KeyValuePair`2&lt;String,JToken&gt;[] array, Int32 arrayIndex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericICollectionSystemCollectionsGenericKeyValuePairSystemStringNewtonsoftJsonLinqJTokenRemoveKeyValuePairOfStringJToken">
            <summary>JObject.System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;&gt;.Remove(KeyValuePair`2&lt;String,JToken&gt; item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.SystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenContainsKeyString">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.ContainsKey(String key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.TryGetValueStringJTokenOut">
            <summary>JObject.TryGetValue(String propertyName, JToken&amp; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.TryGetValueStringStringComparisonJTokenOut">
            <summary>JObject.TryGetValue(String propertyName, StringComparison comparison, JToken&amp; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.TypeGet">
            <summary>JObject.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ValidateTokenJTokenJToken">
            <summary>JObject.ValidateToken(JToken o, JToken existing) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.ValuesSystemCollectionsGenericIDictionarySystemStringNewtonsoftJsonLinqJTokenget">
            <summary>JObject.System.Collections.Generic.IDictionary&lt;System.String,Newtonsoft.Json.Linq.JToken&gt;.get_Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJObject.AllInstances.WriteToJsonWriterJsonConverterArray">
            <summary>JObject.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJProperty">
            <summary>Newtonsoft.Json.Linq.JProperty の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ChildrenTokensGet">
            <summary>JProperty.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ClearItems">
            <summary>JProperty.ClearItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.CloneToken">
            <summary>JProperty.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ConstructorJProperty">
            <summary>JProperty.JProperty(JProperty other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ConstructorString">
            <summary>JProperty.JProperty(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ConstructorStringObject">
            <summary>JProperty.JProperty(String name, Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ConstructorStringObjectArray">
            <summary>JProperty.JProperty(String name, Object[] content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ContainsItemJToken">
            <summary>JProperty.ContainsItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.DeepEqualsJToken">
            <summary>JProperty.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.GetDeepHashCode">
            <summary>JProperty.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.GetItemInt32">
            <summary>JProperty.GetItem(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.InsertItemInt32JTokenBoolean">
            <summary>JProperty.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.LoadJsonReader">
            <summary>JProperty.Load(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.NameGet">
            <summary>JProperty.get_Name() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.RemoveItemAtInt32">
            <summary>JProperty.RemoveItemAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.RemoveItemJToken">
            <summary>JProperty.RemoveItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.SetItemInt32JToken">
            <summary>JProperty.SetItem(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.TypeGet">
            <summary>JProperty.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ValueGet">
            <summary>JProperty.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.ValueSetJToken">
            <summary>JProperty.set_Value(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.WriteToJsonWriterJsonConverterArray">
            <summary>JProperty.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.ChildrenTokensGet">
            <summary>JProperty.get_ChildrenTokens() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.ClearItems">
            <summary>JProperty.ClearItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.CloneToken">
            <summary>JProperty.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.ContainsItemJToken">
            <summary>JProperty.ContainsItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.DeepEqualsJToken">
            <summary>JProperty.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.GetDeepHashCode">
            <summary>JProperty.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.GetItemInt32">
            <summary>JProperty.GetItem(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.InsertItemInt32JTokenBoolean">
            <summary>JProperty.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.NameGet">
            <summary>JProperty.get_Name() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.RemoveItemAtInt32">
            <summary>JProperty.RemoveItemAt(Int32 index) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.RemoveItemJToken">
            <summary>JProperty.RemoveItem(JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.SetItemInt32JToken">
            <summary>JProperty.SetItem(Int32 index, JToken item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.TypeGet">
            <summary>JProperty.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.ValueGet">
            <summary>JProperty.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.ValueSetJToken">
            <summary>JProperty.set_Value(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJProperty.AllInstances.WriteToJsonWriterJsonConverterArray">
            <summary>JProperty.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJRaw">
            <summary>Newtonsoft.Json.Linq.JRaw の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.IComparable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.IConvertible)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.IFormattable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.IComparable{Newtonsoft.Json.Linq.JValue})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.IEquatable{Newtonsoft.Json.Linq.JValue})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.CloneToken">
            <summary>JRaw.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.ConstructorJRaw">
            <summary>JRaw.JRaw(JRaw other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.ConstructorObject">
            <summary>JRaw.JRaw(Object rawJson) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.CreateJsonReader">
            <summary>JRaw.Create(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJRaw.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJRaw.AllInstances.CloneToken">
            <summary>JRaw.CloneToken() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJToken">
            <summary>Newtonsoft.Json.Linq.JToken の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.ChildrenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JEnumerable{``0}})">
            <summary>JToken.Children() の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToObjectOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>JToken.ToObject() の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToObjectOf1JsonSerializer``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.JsonSerializer,``0})">
            <summary>JToken.ToObject(JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.ValueOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>JToken.Value(Object key) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.ValuesOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>JToken.Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AddAfterSelfObject">
            <summary>JToken.AddAfterSelf(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AddBeforeSelfObject">
            <summary>JToken.AddBeforeSelf(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AfterSelf">
            <summary>JToken.AfterSelf() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.Ancestors">
            <summary>JToken.Ancestors() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.BeforeSelf">
            <summary>JToken.BeforeSelf() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.Children">
            <summary>JToken.Children() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.Constructor">
            <summary>JToken.JToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.CreateReader">
            <summary>JToken.CreateReader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.DeepClone">
            <summary>JToken.DeepClone() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.DeepEqualsJTokenJToken">
            <summary>JToken.DeepEquals(JToken t1, JToken t2) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.EnsureValueJToken">
            <summary>JToken.EnsureValue(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.EqualityComparerGet">
            <summary>JToken.get_EqualityComparer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenBoolean">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenByte">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenByteArray">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenChar">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenDateTime">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenDateTimeOffset">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenDecimal">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenDouble">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenGuid">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenInt16">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenInt32">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenInt64">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfBoolean">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfByte">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfChar">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfDateTime">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfDateTimeOffset">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfDecimal">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfDouble">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfGuid">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfInt16">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfInt32">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfInt64">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfSByte">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfSingle">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfTimeSpan">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfUInt16">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfUInt32">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenNullableOfUInt64">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenSByte">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenSingle">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenString">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenTimeSpan">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenUInt16">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenUInt32">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenUInt64">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ExplicitOpJTokenUri">
            <summary>JToken.op_Explicit(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.FirstGet">
            <summary>JToken.get_First() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.FromObjectInternalObjectJsonSerializer">
            <summary>JToken.FromObjectInternal(Object o, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.FromObjectObject">
            <summary>JToken.FromObject(Object o) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.FromObjectObjectJsonSerializer">
            <summary>JToken.FromObject(Object o, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.GetTypeJToken">
            <summary>JToken.GetType(JToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpBooleanJToken">
            <summary>JToken.op_Implicit(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpByteArrayJToken">
            <summary>JToken.op_Implicit(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpByteJToken">
            <summary>JToken.op_Implicit(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpDateTimeJToken">
            <summary>JToken.op_Implicit(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpDateTimeOffsetJToken">
            <summary>JToken.op_Implicit(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpDecimalJToken">
            <summary>JToken.op_Implicit(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpDoubleJToken">
            <summary>JToken.op_Implicit(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpGuidJToken">
            <summary>JToken.op_Implicit(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpInt16JToken">
            <summary>JToken.op_Implicit(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpInt32JToken">
            <summary>JToken.op_Implicit(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpInt64JToken">
            <summary>JToken.op_Implicit(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfBooleanJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfByteJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Byte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfDateTimeJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;DateTime&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfDateTimeOffsetJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;DateTimeOffset&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfDecimalJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Decimal&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfDoubleJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfGuidJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Guid&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfInt16JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Int16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfInt32JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfInt64JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Int64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfSByteJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;SByte&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfSingleJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;Single&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfTimeSpanJToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;TimeSpan&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfUInt16JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;UInt16&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfUInt32JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;UInt32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpNullableOfUInt64JToken">
            <summary>JToken.op_Implicit(Nullable`1&lt;UInt64&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpSByteJToken">
            <summary>JToken.op_Implicit(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpSingleJToken">
            <summary>JToken.op_Implicit(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpStringJToken">
            <summary>JToken.op_Implicit(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpTimeSpanJToken">
            <summary>JToken.op_Implicit(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpUInt16JToken">
            <summary>JToken.op_Implicit(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpUInt32JToken">
            <summary>JToken.op_Implicit(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpUInt64JToken">
            <summary>JToken.op_Implicit(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ImplicitOpUriJToken">
            <summary>JToken.op_Implicit(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ItemGetObject">
            <summary>JToken.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ItemNewtonsoftJsonLinqIJEnumerableNewtonsoftJsonLinqJTokengetObject">
            <summary>JToken.Newtonsoft.Json.Linq.IJEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ItemSetObjectJToken">
            <summary>JToken.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.LastGet">
            <summary>JToken.get_Last() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.LoadJsonReader">
            <summary>JToken.Load(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.NextGet">
            <summary>JToken.get_Next() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.NextSetJToken">
            <summary>JToken.set_Next(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ParentGet">
            <summary>JToken.get_Parent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ParentSetJContainer">
            <summary>JToken.set_Parent(JContainer value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ParseString">
            <summary>JToken.Parse(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.PathGet">
            <summary>JToken.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.PreviousGet">
            <summary>JToken.get_Previous() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.PreviousSetJToken">
            <summary>JToken.set_Previous(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ReadFromJsonReader">
            <summary>JToken.ReadFrom(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.Remove">
            <summary>JToken.Remove() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ReplaceJToken">
            <summary>JToken.Replace(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.RootGet">
            <summary>JToken.get_Root() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SelectTokenString">
            <summary>JToken.SelectToken(String path) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SelectTokenStringBoolean">
            <summary>JToken.SelectToken(String path, Boolean errorWhenNoMatch) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SelectTokensString">
            <summary>JToken.SelectTokens(String path) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SelectTokensStringBoolean">
            <summary>JToken.SelectTokens(String path, Boolean errorWhenNoMatch) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SetLineInfoIJsonLineInfo">
            <summary>JToken.SetLineInfo(IJsonLineInfo lineInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SetLineInfoInt32Int32">
            <summary>JToken.SetLineInfo(Int32 lineNumber, Int32 linePosition) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.StaticConstructor">
            <summary>JToken.JToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SystemCollectionsGenericIEnumerableNewtonsoftJsonLinqJTokenGetEnumerator">
            <summary>JToken.System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.SystemCollectionsIEnumerableGetEnumerator">
            <summary>JToken.System.Collections.IEnumerable.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToObjectType">
            <summary>JToken.ToObject(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToObjectTypeJsonSerializer">
            <summary>JToken.ToObject(Type objectType, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToString">
            <summary>JToken.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ToStringFormattingJsonConverterArray">
            <summary>JToken.ToString(Formatting formatting, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.ValidateTokenJTokenJTokenTypeArrayBoolean">
            <summary>JToken.ValidateToken(JToken o, JTokenType[] validTypes, Boolean nullable) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ChildrenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JEnumerable{``0}})">
            <summary>JToken.Children() の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToObjectOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JToken,``0})">
            <summary>JToken.ToObject() の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToObjectOf1JsonSerializer``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.JsonSerializer,``0})">
            <summary>JToken.ToObject(JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ValueOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JToken,System.Object,``0})">
            <summary>JToken.Value(Object key) の shim の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ValuesOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Newtonsoft.Json.Linq.JToken,System.Collections.Generic.IEnumerable{``0}})">
            <summary>JToken.Values() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.AddAfterSelfObject">
            <summary>JToken.AddAfterSelf(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.AddBeforeSelfObject">
            <summary>JToken.AddBeforeSelf(Object content) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.AfterSelf">
            <summary>JToken.AfterSelf() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.Ancestors">
            <summary>JToken.Ancestors() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.BeforeSelf">
            <summary>JToken.BeforeSelf() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.Children">
            <summary>JToken.Children() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.CreateReader">
            <summary>JToken.CreateReader() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.DeepClone">
            <summary>JToken.DeepClone() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.FirstGet">
            <summary>JToken.get_First() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ItemGetObject">
            <summary>JToken.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ItemNewtonsoftJsonLinqIJEnumerableNewtonsoftJsonLinqJTokengetObject">
            <summary>JToken.Newtonsoft.Json.Linq.IJEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.get_Item(Object key) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ItemSetObjectJToken">
            <summary>JToken.set_Item(Object key, JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.LastGet">
            <summary>JToken.get_Last() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JToken.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.NextGet">
            <summary>JToken.get_Next() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.NextSetJToken">
            <summary>JToken.set_Next(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ParentGet">
            <summary>JToken.get_Parent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ParentSetJContainer">
            <summary>JToken.set_Parent(JContainer value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.PathGet">
            <summary>JToken.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.PreviousGet">
            <summary>JToken.get_Previous() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.PreviousSetJToken">
            <summary>JToken.set_Previous(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.Remove">
            <summary>JToken.Remove() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ReplaceJToken">
            <summary>JToken.Replace(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.RootGet">
            <summary>JToken.get_Root() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SelectTokenString">
            <summary>JToken.SelectToken(String path) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SelectTokenStringBoolean">
            <summary>JToken.SelectToken(String path, Boolean errorWhenNoMatch) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SelectTokensString">
            <summary>JToken.SelectTokens(String path) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SelectTokensStringBoolean">
            <summary>JToken.SelectTokens(String path, Boolean errorWhenNoMatch) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SetLineInfoIJsonLineInfo">
            <summary>JToken.SetLineInfo(IJsonLineInfo lineInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SetLineInfoInt32Int32">
            <summary>JToken.SetLineInfo(Int32 lineNumber, Int32 linePosition) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SystemCollectionsGenericIEnumerableNewtonsoftJsonLinqJTokenGetEnumerator">
            <summary>JToken.System.Collections.Generic.IEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt;.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>JToken.System.Collections.IEnumerable.GetEnumerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToObjectType">
            <summary>JToken.ToObject(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToObjectTypeJsonSerializer">
            <summary>JToken.ToObject(Type objectType, JsonSerializer jsonSerializer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToString01">
            <summary>JToken.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJToken.AllInstances.ToStringFormattingJsonConverterArray">
            <summary>JToken.ToString(Formatting formatting, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer">
            <summary>Newtonsoft.Json.Linq.JTokenEqualityComparer の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.#ctor(Newtonsoft.Json.Linq.JTokenEqualityComparer)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.Bind(System.Collections.Generic.IEqualityComparer{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.Constructor">
            <summary>JTokenEqualityComparer.JTokenEqualityComparer() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.EqualsJTokenJToken">
            <summary>JTokenEqualityComparer.Equals(JToken x, JToken y) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.GetHashCodeJToken">
            <summary>JTokenEqualityComparer.GetHashCode(JToken obj) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.AllInstances.EqualsJTokenJToken">
            <summary>JTokenEqualityComparer.Equals(JToken x, JToken y) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenEqualityComparer.AllInstances.GetHashCodeJToken">
            <summary>JTokenEqualityComparer.GetHashCode(JToken obj) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader">
            <summary>Newtonsoft.Json.Linq.JTokenReader の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.#ctor(Newtonsoft.Json.Linq.JTokenReader)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ConstructorJToken">
            <summary>JTokenReader.JTokenReader(JToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.GetEndTokenJContainer">
            <summary>JTokenReader.GetEndToken(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.IsEndElementGet">
            <summary>JTokenReader.get_IsEndElement() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.Read">
            <summary>JTokenReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsBytes">
            <summary>JTokenReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsDateTime">
            <summary>JTokenReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsDateTimeOffset">
            <summary>JTokenReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsDecimal">
            <summary>JTokenReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsInt32">
            <summary>JTokenReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadAsString">
            <summary>JTokenReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadInternal">
            <summary>JTokenReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadIntoJContainer">
            <summary>JTokenReader.ReadInto(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadOverJToken">
            <summary>JTokenReader.ReadOver(JToken t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.ReadToEnd">
            <summary>JTokenReader.ReadToEnd() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.SafeToStringObject">
            <summary>JTokenReader.SafeToString(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.SetEndJContainer">
            <summary>JTokenReader.SetEnd(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.SetTokenJToken">
            <summary>JTokenReader.SetToken(JToken token) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.GetEndTokenJContainer">
            <summary>JTokenReader.GetEndToken(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.IsEndElementGet">
            <summary>JTokenReader.get_IsEndElement() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.LineNumberNewtonsoftJsonIJsonLineInfoget">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.LinePositionNewtonsoftJsonIJsonLineInfoget">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.NewtonsoftJsonIJsonLineInfoHasLineInfo">
            <summary>JTokenReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.Read">
            <summary>JTokenReader.Read() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsBytes">
            <summary>JTokenReader.ReadAsBytes() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsDateTime">
            <summary>JTokenReader.ReadAsDateTime() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsDateTimeOffset">
            <summary>JTokenReader.ReadAsDateTimeOffset() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsDecimal">
            <summary>JTokenReader.ReadAsDecimal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsInt32">
            <summary>JTokenReader.ReadAsInt32() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadAsString">
            <summary>JTokenReader.ReadAsString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadInternal">
            <summary>JTokenReader.ReadInternal() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadIntoJContainer">
            <summary>JTokenReader.ReadInto(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadOverJToken">
            <summary>JTokenReader.ReadOver(JToken t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.ReadToEnd">
            <summary>JTokenReader.ReadToEnd() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.SafeToStringObject">
            <summary>JTokenReader.SafeToString(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.SetEndJContainer">
            <summary>JTokenReader.SetEnd(JContainer c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenReader.AllInstances.SetTokenJToken">
            <summary>JTokenReader.SetToken(JToken token) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter">
            <summary>Newtonsoft.Json.Linq.JTokenWriter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.#ctor(Newtonsoft.Json.Linq.JTokenWriter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.Bind(System.IDisposable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AddParentJContainer">
            <summary>JTokenWriter.AddParent(JContainer container) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AddValueJValueJsonToken">
            <summary>JTokenWriter.AddValue(JValue value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AddValueObjectJsonToken">
            <summary>JTokenWriter.AddValue(Object value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.Close">
            <summary>JTokenWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.Constructor">
            <summary>JTokenWriter.JTokenWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.ConstructorJContainer">
            <summary>JTokenWriter.JTokenWriter(JContainer container) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.Flush">
            <summary>JTokenWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.RemoveParent">
            <summary>JTokenWriter.RemoveParent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.TokenGet">
            <summary>JTokenWriter.get_Token() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteCommentString">
            <summary>JTokenWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteEndJsonToken">
            <summary>JTokenWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteNull">
            <summary>JTokenWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WritePropertyNameString">
            <summary>JTokenWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteRawString">
            <summary>JTokenWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteStartArray">
            <summary>JTokenWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteStartConstructorString">
            <summary>JTokenWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteStartObject">
            <summary>JTokenWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteUndefined">
            <summary>JTokenWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueBoolean">
            <summary>JTokenWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueByte">
            <summary>JTokenWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueByteArray">
            <summary>JTokenWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueChar">
            <summary>JTokenWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueDateTime">
            <summary>JTokenWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueDateTimeOffset">
            <summary>JTokenWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueDecimal">
            <summary>JTokenWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueDouble">
            <summary>JTokenWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueGuid">
            <summary>JTokenWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueInt16">
            <summary>JTokenWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueInt32">
            <summary>JTokenWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueInt64">
            <summary>JTokenWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueObject">
            <summary>JTokenWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueSByte">
            <summary>JTokenWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueSingle">
            <summary>JTokenWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueString">
            <summary>JTokenWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueTimeSpan">
            <summary>JTokenWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueUInt16">
            <summary>JTokenWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueUInt32">
            <summary>JTokenWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueUInt64">
            <summary>JTokenWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.WriteValueUri">
            <summary>JTokenWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.AddParentJContainer">
            <summary>JTokenWriter.AddParent(JContainer container) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.AddValueJValueJsonToken">
            <summary>JTokenWriter.AddValue(JValue value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.AddValueObjectJsonToken">
            <summary>JTokenWriter.AddValue(Object value, JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.Close">
            <summary>JTokenWriter.Close() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.Flush">
            <summary>JTokenWriter.Flush() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.RemoveParent">
            <summary>JTokenWriter.RemoveParent() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.TokenGet">
            <summary>JTokenWriter.get_Token() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteCommentString">
            <summary>JTokenWriter.WriteComment(String text) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteEndJsonToken">
            <summary>JTokenWriter.WriteEnd(JsonToken token) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteNull">
            <summary>JTokenWriter.WriteNull() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WritePropertyNameString">
            <summary>JTokenWriter.WritePropertyName(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteRawString">
            <summary>JTokenWriter.WriteRaw(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteStartArray">
            <summary>JTokenWriter.WriteStartArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteStartConstructorString">
            <summary>JTokenWriter.WriteStartConstructor(String name) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteStartObject">
            <summary>JTokenWriter.WriteStartObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteUndefined">
            <summary>JTokenWriter.WriteUndefined() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueBoolean">
            <summary>JTokenWriter.WriteValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueByte">
            <summary>JTokenWriter.WriteValue(Byte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueByteArray">
            <summary>JTokenWriter.WriteValue(Byte[] value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueChar">
            <summary>JTokenWriter.WriteValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueDateTime">
            <summary>JTokenWriter.WriteValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueDateTimeOffset">
            <summary>JTokenWriter.WriteValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueDecimal">
            <summary>JTokenWriter.WriteValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueDouble">
            <summary>JTokenWriter.WriteValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueGuid">
            <summary>JTokenWriter.WriteValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueInt16">
            <summary>JTokenWriter.WriteValue(Int16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueInt32">
            <summary>JTokenWriter.WriteValue(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueInt64">
            <summary>JTokenWriter.WriteValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueObject">
            <summary>JTokenWriter.WriteValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueSByte">
            <summary>JTokenWriter.WriteValue(SByte value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueSingle">
            <summary>JTokenWriter.WriteValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueString">
            <summary>JTokenWriter.WriteValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueTimeSpan">
            <summary>JTokenWriter.WriteValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueUInt16">
            <summary>JTokenWriter.WriteValue(UInt16 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueUInt32">
            <summary>JTokenWriter.WriteValue(UInt32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueUInt64">
            <summary>JTokenWriter.WriteValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJTokenWriter.AllInstances.WriteValueUri">
            <summary>JTokenWriter.WriteValue(Uri value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJValue">
            <summary>Newtonsoft.Json.Linq.JValue の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(Newtonsoft.Json.IJsonLineInfo)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(Newtonsoft.Json.Linq.IJEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.IComparable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.IConvertible)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.IFormattable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.IComparable{Newtonsoft.Json.Linq.JValue})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.IEquatable{Newtonsoft.Json.Linq.JValue})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.ShimJValue.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CloneToken">
            <summary>JValue.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CompareFloatObjectObject">
            <summary>JValue.CompareFloat(Object objA, Object objB) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CompareJTokenTypeObjectObject">
            <summary>JValue.Compare(JTokenType valueType, Object objA, Object objB) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CompareToJValue">
            <summary>JValue.CompareTo(JValue obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorBoolean">
            <summary>JValue.JValue(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorChar">
            <summary>JValue.JValue(Char value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorDateTime">
            <summary>JValue.JValue(DateTime value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorDateTimeOffset">
            <summary>JValue.JValue(DateTimeOffset value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorDecimal">
            <summary>JValue.JValue(Decimal value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorDouble">
            <summary>JValue.JValue(Double value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorGuid">
            <summary>JValue.JValue(Guid value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorInt64">
            <summary>JValue.JValue(Int64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorJValue">
            <summary>JValue.JValue(JValue other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorObject">
            <summary>JValue.JValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorObjectJTokenType">
            <summary>JValue.JValue(Object value, JTokenType type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorSingle">
            <summary>JValue.JValue(Single value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorString">
            <summary>JValue.JValue(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorTimeSpan">
            <summary>JValue.JValue(TimeSpan value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorUInt64">
            <summary>JValue.JValue(UInt64 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ConstructorUri">
            <summary>JValue.JValue(Uri value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CreateCommentString">
            <summary>JValue.CreateComment(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.CreateStringString">
            <summary>JValue.CreateString(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.DeepEqualsJToken">
            <summary>JValue.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.EqualsJValue">
            <summary>JValue.Equals(JValue other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.EqualsObject">
            <summary>JValue.Equals(Object obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.GetDeepHashCode">
            <summary>JValue.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.GetHashCode">
            <summary>JValue.GetHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.GetStringValueTypeNullableOfJTokenType">
            <summary>JValue.GetStringValueType(Nullable`1&lt;JTokenType&gt; current) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.GetValueTypeNullableOfJTokenTypeObject">
            <summary>JValue.GetValueType(Nullable`1&lt;JTokenType&gt; current, Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.HasValuesGet">
            <summary>JValue.get_HasValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIComparableCompareToObject">
            <summary>JValue.System.IComparable.CompareTo(Object obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleGetTypeCode">
            <summary>JValue.System.IConvertible.GetTypeCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToBooleanIFormatProvider">
            <summary>JValue.System.IConvertible.ToBoolean(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToByteIFormatProvider">
            <summary>JValue.System.IConvertible.ToByte(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToCharIFormatProvider">
            <summary>JValue.System.IConvertible.ToChar(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToDateTimeIFormatProvider">
            <summary>JValue.System.IConvertible.ToDateTime(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToDecimalIFormatProvider">
            <summary>JValue.System.IConvertible.ToDecimal(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToDoubleIFormatProvider">
            <summary>JValue.System.IConvertible.ToDouble(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToInt16IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt16(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToInt32IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt32(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToInt64IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt64(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToSByteIFormatProvider">
            <summary>JValue.System.IConvertible.ToSByte(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToSingleIFormatProvider">
            <summary>JValue.System.IConvertible.ToSingle(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToTypeTypeIFormatProvider">
            <summary>JValue.System.IConvertible.ToType(Type conversionType, IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToUInt16IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt16(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToUInt32IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt32(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.SystemIConvertibleToUInt64IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt64(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ToString">
            <summary>JValue.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ToStringIFormatProvider">
            <summary>JValue.ToString(IFormatProvider formatProvider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ToStringString">
            <summary>JValue.ToString(String format) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ToStringStringIFormatProvider">
            <summary>JValue.ToString(String format, IFormatProvider formatProvider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.TypeGet">
            <summary>JValue.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ValueGet">
            <summary>JValue.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ValueSetObject">
            <summary>JValue.set_Value(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.ValuesEqualsJValueJValue">
            <summary>JValue.ValuesEquals(JValue v1, JValue v2) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.WriteToJsonWriterJsonConverterArray">
            <summary>JValue.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.CloneToken">
            <summary>JValue.CloneToken() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.CompareToJValue">
            <summary>JValue.CompareTo(JValue obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.DeepEqualsJToken">
            <summary>JValue.DeepEquals(JToken node) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.EqualsJValue">
            <summary>JValue.Equals(JValue other) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.EqualsObject">
            <summary>JValue.Equals(Object obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.GetDeepHashCode">
            <summary>JValue.GetDeepHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.GetHashCode01">
            <summary>JValue.GetHashCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.HasValuesGet">
            <summary>JValue.get_HasValues() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIComparableCompareToObject">
            <summary>JValue.System.IComparable.CompareTo(Object obj) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleGetTypeCode">
            <summary>JValue.System.IConvertible.GetTypeCode() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToBooleanIFormatProvider">
            <summary>JValue.System.IConvertible.ToBoolean(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToByteIFormatProvider">
            <summary>JValue.System.IConvertible.ToByte(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToCharIFormatProvider">
            <summary>JValue.System.IConvertible.ToChar(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToDateTimeIFormatProvider">
            <summary>JValue.System.IConvertible.ToDateTime(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToDecimalIFormatProvider">
            <summary>JValue.System.IConvertible.ToDecimal(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToDoubleIFormatProvider">
            <summary>JValue.System.IConvertible.ToDouble(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToInt16IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt16(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToInt32IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt32(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToInt64IFormatProvider">
            <summary>JValue.System.IConvertible.ToInt64(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToSByteIFormatProvider">
            <summary>JValue.System.IConvertible.ToSByte(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToSingleIFormatProvider">
            <summary>JValue.System.IConvertible.ToSingle(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToTypeTypeIFormatProvider">
            <summary>JValue.System.IConvertible.ToType(Type conversionType, IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToUInt16IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt16(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToUInt32IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt32(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.SystemIConvertibleToUInt64IFormatProvider">
            <summary>JValue.System.IConvertible.ToUInt64(IFormatProvider provider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ToString01">
            <summary>JValue.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ToStringIFormatProvider">
            <summary>JValue.ToString(IFormatProvider formatProvider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ToStringString">
            <summary>JValue.ToString(String format) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ToStringStringIFormatProvider">
            <summary>JValue.ToString(String format, IFormatProvider formatProvider) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.TypeGet">
            <summary>JValue.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ValueGet">
            <summary>JValue.get_Value() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.ValueSetObject">
            <summary>JValue.set_Value(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.ShimJValue.AllInstances.WriteToJsonWriterJsonConverterArray">
            <summary>JValue.WriteTo(JsonWriter writer, JsonConverter[] converters) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1">
            <summary>Newtonsoft.Json.Linq.IJEnumerable`1 のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.#ctor">
            <summary>type StubIJEnumerable の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.GetEnumerator">
            <summary>IEnumerable`1.GetEnumerator() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.GetEnumerator01">
            <summary>IEnumerable.GetEnumerator() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.ItemGetObject">
            <summary>IJEnumerable`1.get_Item(Object key) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.global::System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>IEnumerable`1.GetEnumerator() の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerable.GetEnumerator() の スタブ の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubIJEnumerable`1.Newtonsoft#Json#Linq#IJEnumerable{T}#Item(System.Object)">
            <summary>IJEnumerable`1.get_Item(Object key) の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer">
            <summary>Newtonsoft.Json.Linq.JTokenEqualityComparer のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer.InitializeStub">
            <summary>type StubJTokenEqualityComparer の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenEqualityComparer.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.StubJTokenReader">
            <summary>Newtonsoft.Json.Linq.JTokenReader のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.AttachBackingFieldToQuoteChar">
            <summary>バッキング フィールドを持つプロパティとして StubJTokenReader.QuoteChar をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Close">
            <summary>JsonReader.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Close01">
            <summary>JsonReader.Close() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.DepthGet">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Dispose(System.Boolean)">
            <summary>JsonReader.Dispose(Boolean disposing) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.DisposeBoolean">
            <summary>JsonReader.Dispose(Boolean disposing) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.InitializeStub">
            <summary>type StubJTokenReader の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.PathGet">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.QuoteCharGet">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.QuoteCharSetChar">
            <summary>JsonReader.set_QuoteChar(Char value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Read">
            <summary>JTokenReader.Read() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Read01">
            <summary>JTokenReader.Read() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsBytes">
            <summary>JTokenReader.ReadAsBytes() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsBytes01">
            <summary>JTokenReader.ReadAsBytes() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDateTime">
            <summary>JTokenReader.ReadAsDateTime() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDateTime01">
            <summary>JTokenReader.ReadAsDateTime() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDateTimeOffset">
            <summary>JTokenReader.ReadAsDateTimeOffset() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDateTimeOffset01">
            <summary>JTokenReader.ReadAsDateTimeOffset() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDecimal">
            <summary>JTokenReader.ReadAsDecimal() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsDecimal01">
            <summary>JTokenReader.ReadAsDecimal() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsInt32">
            <summary>JTokenReader.ReadAsInt32() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsInt3201">
            <summary>JTokenReader.ReadAsInt32() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsString">
            <summary>JTokenReader.ReadAsString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ReadAsString01">
            <summary>JTokenReader.ReadAsString() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.TokenTypeGet">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ValueGet">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ValueTypeGet">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Depth">
            <summary>JsonReader.get_Depth() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Path">
            <summary>JsonReader.get_Path() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.QuoteChar">
            <summary>JsonReader.get_QuoteChar() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.TokenType">
            <summary>JsonReader.get_TokenType() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.Value">
            <summary>JsonReader.get_Value() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenReader.ValueType">
            <summary>JsonReader.get_ValueType() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter">
            <summary>Newtonsoft.Json.Linq.JTokenWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.Close">
            <summary>JTokenWriter.Close() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.Close01">
            <summary>JTokenWriter.Close() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.Flush">
            <summary>JTokenWriter.Flush() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.Flush01">
            <summary>JTokenWriter.Flush() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.InitializeStub">
            <summary>type StubJTokenWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteComment(System.String)">
            <summary>JTokenWriter.WriteComment(String text) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteCommentString">
            <summary>JTokenWriter.WriteComment(String text) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEnd">
            <summary>JsonWriter.WriteEnd() の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>JTokenWriter.WriteEnd(JsonToken token) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEnd01">
            <summary>JsonWriter.WriteEnd() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndArray">
            <summary>JsonWriter.WriteEndArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndArray01">
            <summary>JsonWriter.WriteEndArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndConstructor">
            <summary>JsonWriter.WriteEndConstructor() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndConstructor01">
            <summary>JsonWriter.WriteEndConstructor() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndJsonToken">
            <summary>JTokenWriter.WriteEnd(JsonToken token) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndObject">
            <summary>JsonWriter.WriteEndObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteEndObject01">
            <summary>JsonWriter.WriteEndObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteIndent">
            <summary>JsonWriter.WriteIndent() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteIndent01">
            <summary>JsonWriter.WriteIndent() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteIndentSpace">
            <summary>JsonWriter.WriteIndentSpace() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteIndentSpace01">
            <summary>JsonWriter.WriteIndentSpace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteNull">
            <summary>JTokenWriter.WriteNull() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteNull01">
            <summary>JTokenWriter.WriteNull() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WritePropertyName(System.String)">
            <summary>JTokenWriter.WritePropertyName(String name) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WritePropertyNameString">
            <summary>JTokenWriter.WritePropertyName(String name) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WritePropertyNameStringBoolean">
            <summary>JsonWriter.WritePropertyName(String name, Boolean escape) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteRaw(System.String)">
            <summary>JTokenWriter.WriteRaw(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteRawString">
            <summary>JTokenWriter.WriteRaw(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteRawValue(System.String)">
            <summary>JsonWriter.WriteRawValue(String json) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteRawValueString">
            <summary>JsonWriter.WriteRawValue(String json) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartArray">
            <summary>JTokenWriter.WriteStartArray() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartArray01">
            <summary>JTokenWriter.WriteStartArray() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartConstructor(System.String)">
            <summary>JTokenWriter.WriteStartConstructor(String name) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartConstructorString">
            <summary>JTokenWriter.WriteStartConstructor(String name) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartObject">
            <summary>JTokenWriter.WriteStartObject() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteStartObject01">
            <summary>JTokenWriter.WriteStartObject() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteUndefined">
            <summary>JTokenWriter.WriteUndefined() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteUndefined01">
            <summary>JTokenWriter.WriteUndefined() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteValueDelimiter">
            <summary>JsonWriter.WriteValueDelimiter() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteValueDelimiter01">
            <summary>JsonWriter.WriteValueDelimiter() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteWhitespace(System.String)">
            <summary>JsonWriter.WriteWhitespace(String ws) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.WriteWhitespaceString">
            <summary>JsonWriter.WriteWhitespace(String ws) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.Fakes.StubJTokenWriter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimExtensions">
            <summary>Newtonsoft.Json.Schema.Extensions の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimExtensions.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimExtensions.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimExtensions.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimExtensions.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimExtensions.IsValidJTokenJsonSchema">
            <summary>Extensions.IsValid(JToken source, JsonSchema schema) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimExtensions.IsValidJTokenJsonSchemaIListOfStringOut">
            <summary>Extensions.IsValid(JToken source, JsonSchema schema, IList`1&lt;String&gt;&amp; errorMessages) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimExtensions.ValidateJTokenJsonSchema">
            <summary>Extensions.Validate(JToken source, JsonSchema schema) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimExtensions.ValidateJTokenJsonSchemaValidationEventHandler">
            <summary>Extensions.Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema">
            <summary>Newtonsoft.Json.Schema.JsonSchema の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.#ctor(Newtonsoft.Json.Schema.JsonSchema)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AdditionalItemsGet">
            <summary>JsonSchema.get_AdditionalItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AdditionalItemsSetJsonSchema">
            <summary>JsonSchema.set_AdditionalItems(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AdditionalPropertiesGet">
            <summary>JsonSchema.get_AdditionalProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AdditionalPropertiesSetJsonSchema">
            <summary>JsonSchema.set_AdditionalProperties(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllowAdditionalItemsGet">
            <summary>JsonSchema.get_AllowAdditionalItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllowAdditionalItemsSetBoolean">
            <summary>JsonSchema.set_AllowAdditionalItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllowAdditionalPropertiesGet">
            <summary>JsonSchema.get_AllowAdditionalProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllowAdditionalPropertiesSetBoolean">
            <summary>JsonSchema.set_AllowAdditionalProperties(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.Constructor">
            <summary>JsonSchema.JsonSchema() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DefaultGet">
            <summary>JsonSchema.get_Default() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DefaultSetJToken">
            <summary>JsonSchema.set_Default(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DeferredReferenceGet">
            <summary>JsonSchema.get_DeferredReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DeferredReferenceSetString">
            <summary>JsonSchema.set_DeferredReference(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DescriptionGet">
            <summary>JsonSchema.get_Description() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DescriptionSetString">
            <summary>JsonSchema.set_Description(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DisallowGet">
            <summary>JsonSchema.get_Disallow() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DisallowSetNullableOfJsonSchemaType">
            <summary>JsonSchema.set_Disallow(Nullable`1&lt;JsonSchemaType&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DivisibleByGet">
            <summary>JsonSchema.get_DivisibleBy() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.DivisibleBySetNullableOfDouble">
            <summary>JsonSchema.set_DivisibleBy(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.EnumGet">
            <summary>JsonSchema.get_Enum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.EnumSetIListOfJToken">
            <summary>JsonSchema.set_Enum(IList`1&lt;JToken&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExclusiveMaximumGet">
            <summary>JsonSchema.get_ExclusiveMaximum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExclusiveMaximumSetNullableOfBoolean">
            <summary>JsonSchema.set_ExclusiveMaximum(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExclusiveMinimumGet">
            <summary>JsonSchema.get_ExclusiveMinimum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExclusiveMinimumSetNullableOfBoolean">
            <summary>JsonSchema.set_ExclusiveMinimum(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExtendsGet">
            <summary>JsonSchema.get_Extends() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ExtendsSetIListOfJsonSchema">
            <summary>JsonSchema.set_Extends(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.FormatGet">
            <summary>JsonSchema.get_Format() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.FormatSetString">
            <summary>JsonSchema.set_Format(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.HiddenGet">
            <summary>JsonSchema.get_Hidden() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.HiddenSetNullableOfBoolean">
            <summary>JsonSchema.set_Hidden(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.IdGet">
            <summary>JsonSchema.get_Id() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.IdSetString">
            <summary>JsonSchema.set_Id(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.InternalIdGet">
            <summary>JsonSchema.get_InternalId() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ItemsGet">
            <summary>JsonSchema.get_Items() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ItemsSetIListOfJsonSchema">
            <summary>JsonSchema.set_Items(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.LocationGet">
            <summary>JsonSchema.get_Location() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.LocationSetString">
            <summary>JsonSchema.set_Location(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumGet">
            <summary>JsonSchema.get_Maximum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumItemsGet">
            <summary>JsonSchema.get_MaximumItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumItemsSetNullableOfInt32">
            <summary>JsonSchema.set_MaximumItems(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumLengthGet">
            <summary>JsonSchema.get_MaximumLength() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumLengthSetNullableOfInt32">
            <summary>JsonSchema.set_MaximumLength(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MaximumSetNullableOfDouble">
            <summary>JsonSchema.set_Maximum(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumGet">
            <summary>JsonSchema.get_Minimum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumItemsGet">
            <summary>JsonSchema.get_MinimumItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumItemsSetNullableOfInt32">
            <summary>JsonSchema.set_MinimumItems(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumLengthGet">
            <summary>JsonSchema.get_MinimumLength() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumLengthSetNullableOfInt32">
            <summary>JsonSchema.set_MinimumLength(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.MinimumSetNullableOfDouble">
            <summary>JsonSchema.set_Minimum(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ParseString">
            <summary>JsonSchema.Parse(String json) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ParseStringJsonSchemaResolver">
            <summary>JsonSchema.Parse(String json, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PatternGet">
            <summary>JsonSchema.get_Pattern() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PatternPropertiesGet">
            <summary>JsonSchema.get_PatternProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PatternPropertiesSetIDictionaryOfStringJsonSchema">
            <summary>JsonSchema.set_PatternProperties(IDictionary`2&lt;String,JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PatternSetString">
            <summary>JsonSchema.set_Pattern(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PositionalItemsValidationGet">
            <summary>JsonSchema.get_PositionalItemsValidation() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PositionalItemsValidationSetBoolean">
            <summary>JsonSchema.set_PositionalItemsValidation(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PropertiesGet">
            <summary>JsonSchema.get_Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.PropertiesSetIDictionaryOfStringJsonSchema">
            <summary>JsonSchema.set_Properties(IDictionary`2&lt;String,JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReadJsonReader">
            <summary>JsonSchema.Read(JsonReader reader) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReadJsonReaderJsonSchemaResolver">
            <summary>JsonSchema.Read(JsonReader reader, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReadOnlyGet">
            <summary>JsonSchema.get_ReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReadOnlySetNullableOfBoolean">
            <summary>JsonSchema.set_ReadOnly(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReferencesResolvedGet">
            <summary>JsonSchema.get_ReferencesResolved() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ReferencesResolvedSetBoolean">
            <summary>JsonSchema.set_ReferencesResolved(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.RequiredGet">
            <summary>JsonSchema.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.RequiredSetNullableOfBoolean">
            <summary>JsonSchema.set_Required(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.RequiresGet">
            <summary>JsonSchema.get_Requires() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.RequiresSetString">
            <summary>JsonSchema.set_Requires(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TitleGet">
            <summary>JsonSchema.get_Title() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TitleSetString">
            <summary>JsonSchema.set_Title(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.ToString">
            <summary>JsonSchema.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TransientGet">
            <summary>JsonSchema.get_Transient() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TransientSetNullableOfBoolean">
            <summary>JsonSchema.set_Transient(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TypeGet">
            <summary>JsonSchema.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.TypeSetNullableOfJsonSchemaType">
            <summary>JsonSchema.set_Type(Nullable`1&lt;JsonSchemaType&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.UniqueItemsGet">
            <summary>JsonSchema.get_UniqueItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.UniqueItemsSetBoolean">
            <summary>JsonSchema.set_UniqueItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.WriteToJsonWriter">
            <summary>JsonSchema.WriteTo(JsonWriter writer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.WriteToJsonWriterJsonSchemaResolver">
            <summary>JsonSchema.WriteTo(JsonWriter writer, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AdditionalItemsGet">
            <summary>JsonSchema.get_AdditionalItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AdditionalItemsSetJsonSchema">
            <summary>JsonSchema.set_AdditionalItems(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AdditionalPropertiesGet">
            <summary>JsonSchema.get_AdditionalProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AdditionalPropertiesSetJsonSchema">
            <summary>JsonSchema.set_AdditionalProperties(JsonSchema value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AllowAdditionalItemsGet">
            <summary>JsonSchema.get_AllowAdditionalItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AllowAdditionalItemsSetBoolean">
            <summary>JsonSchema.set_AllowAdditionalItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AllowAdditionalPropertiesGet">
            <summary>JsonSchema.get_AllowAdditionalProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.AllowAdditionalPropertiesSetBoolean">
            <summary>JsonSchema.set_AllowAdditionalProperties(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DefaultGet">
            <summary>JsonSchema.get_Default() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DefaultSetJToken">
            <summary>JsonSchema.set_Default(JToken value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DeferredReferenceGet">
            <summary>JsonSchema.get_DeferredReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DeferredReferenceSetString">
            <summary>JsonSchema.set_DeferredReference(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DescriptionGet">
            <summary>JsonSchema.get_Description() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DescriptionSetString">
            <summary>JsonSchema.set_Description(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DisallowGet">
            <summary>JsonSchema.get_Disallow() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DisallowSetNullableOfJsonSchemaType">
            <summary>JsonSchema.set_Disallow(Nullable`1&lt;JsonSchemaType&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DivisibleByGet">
            <summary>JsonSchema.get_DivisibleBy() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.DivisibleBySetNullableOfDouble">
            <summary>JsonSchema.set_DivisibleBy(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.EnumGet">
            <summary>JsonSchema.get_Enum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.EnumSetIListOfJToken">
            <summary>JsonSchema.set_Enum(IList`1&lt;JToken&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExclusiveMaximumGet">
            <summary>JsonSchema.get_ExclusiveMaximum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExclusiveMaximumSetNullableOfBoolean">
            <summary>JsonSchema.set_ExclusiveMaximum(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExclusiveMinimumGet">
            <summary>JsonSchema.get_ExclusiveMinimum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExclusiveMinimumSetNullableOfBoolean">
            <summary>JsonSchema.set_ExclusiveMinimum(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExtendsGet">
            <summary>JsonSchema.get_Extends() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ExtendsSetIListOfJsonSchema">
            <summary>JsonSchema.set_Extends(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.FormatGet">
            <summary>JsonSchema.get_Format() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.FormatSetString">
            <summary>JsonSchema.set_Format(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.HiddenGet">
            <summary>JsonSchema.get_Hidden() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.HiddenSetNullableOfBoolean">
            <summary>JsonSchema.set_Hidden(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.IdGet">
            <summary>JsonSchema.get_Id() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.IdSetString">
            <summary>JsonSchema.set_Id(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.InternalIdGet">
            <summary>JsonSchema.get_InternalId() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ItemsGet">
            <summary>JsonSchema.get_Items() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ItemsSetIListOfJsonSchema">
            <summary>JsonSchema.set_Items(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.LocationGet">
            <summary>JsonSchema.get_Location() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.LocationSetString">
            <summary>JsonSchema.set_Location(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumGet">
            <summary>JsonSchema.get_Maximum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumItemsGet">
            <summary>JsonSchema.get_MaximumItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumItemsSetNullableOfInt32">
            <summary>JsonSchema.set_MaximumItems(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumLengthGet">
            <summary>JsonSchema.get_MaximumLength() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumLengthSetNullableOfInt32">
            <summary>JsonSchema.set_MaximumLength(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MaximumSetNullableOfDouble">
            <summary>JsonSchema.set_Maximum(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumGet">
            <summary>JsonSchema.get_Minimum() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumItemsGet">
            <summary>JsonSchema.get_MinimumItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumItemsSetNullableOfInt32">
            <summary>JsonSchema.set_MinimumItems(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumLengthGet">
            <summary>JsonSchema.get_MinimumLength() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumLengthSetNullableOfInt32">
            <summary>JsonSchema.set_MinimumLength(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.MinimumSetNullableOfDouble">
            <summary>JsonSchema.set_Minimum(Nullable`1&lt;Double&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PatternGet">
            <summary>JsonSchema.get_Pattern() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PatternPropertiesGet">
            <summary>JsonSchema.get_PatternProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PatternPropertiesSetIDictionaryOfStringJsonSchema">
            <summary>JsonSchema.set_PatternProperties(IDictionary`2&lt;String,JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PatternSetString">
            <summary>JsonSchema.set_Pattern(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PositionalItemsValidationGet">
            <summary>JsonSchema.get_PositionalItemsValidation() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PositionalItemsValidationSetBoolean">
            <summary>JsonSchema.set_PositionalItemsValidation(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PropertiesGet">
            <summary>JsonSchema.get_Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.PropertiesSetIDictionaryOfStringJsonSchema">
            <summary>JsonSchema.set_Properties(IDictionary`2&lt;String,JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ReadOnlyGet">
            <summary>JsonSchema.get_ReadOnly() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ReadOnlySetNullableOfBoolean">
            <summary>JsonSchema.set_ReadOnly(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ReferencesResolvedGet">
            <summary>JsonSchema.get_ReferencesResolved() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ReferencesResolvedSetBoolean">
            <summary>JsonSchema.set_ReferencesResolved(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.RequiredGet">
            <summary>JsonSchema.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.RequiredSetNullableOfBoolean">
            <summary>JsonSchema.set_Required(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.RequiresGet">
            <summary>JsonSchema.get_Requires() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.RequiresSetString">
            <summary>JsonSchema.set_Requires(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TitleGet">
            <summary>JsonSchema.get_Title() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TitleSetString">
            <summary>JsonSchema.set_Title(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.ToString01">
            <summary>JsonSchema.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TransientGet">
            <summary>JsonSchema.get_Transient() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TransientSetNullableOfBoolean">
            <summary>JsonSchema.set_Transient(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TypeGet">
            <summary>JsonSchema.get_Type() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.TypeSetNullableOfJsonSchemaType">
            <summary>JsonSchema.set_Type(Nullable`1&lt;JsonSchemaType&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.UniqueItemsGet">
            <summary>JsonSchema.get_UniqueItems() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.UniqueItemsSetBoolean">
            <summary>JsonSchema.set_UniqueItems(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.WriteToJsonWriter">
            <summary>JsonSchema.WriteTo(JsonWriter writer) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchema.AllInstances.WriteToJsonWriterJsonSchemaResolver">
            <summary>JsonSchema.WriteTo(JsonWriter writer, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException">
            <summary>Newtonsoft.Json.Schema.JsonSchemaException の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.#ctor(Newtonsoft.Json.Schema.JsonSchemaException)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.Constructor">
            <summary>JsonSchemaException.JsonSchemaException() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.ConstructorString">
            <summary>JsonSchemaException.JsonSchemaException(String message) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.ConstructorStringException">
            <summary>JsonSchemaException.JsonSchemaException(String message, Exception innerException) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.ConstructorStringExceptionStringInt32Int32">
            <summary>JsonSchemaException.JsonSchemaException(String message, Exception innerException, String path, Int32 lineNumber, Int32 linePosition) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.LineNumberGet">
            <summary>JsonSchemaException.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.LineNumberSetInt32">
            <summary>JsonSchemaException.set_LineNumber(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.LinePositionGet">
            <summary>JsonSchemaException.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.LinePositionSetInt32">
            <summary>JsonSchemaException.set_LinePosition(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.PathGet">
            <summary>JsonSchemaException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.PathSetString">
            <summary>JsonSchemaException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.LineNumberGet">
            <summary>JsonSchemaException.get_LineNumber() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.LineNumberSetInt32">
            <summary>JsonSchemaException.set_LineNumber(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.LinePositionGet">
            <summary>JsonSchemaException.get_LinePosition() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.LinePositionSetInt32">
            <summary>JsonSchemaException.set_LinePosition(Int32 value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.PathGet">
            <summary>JsonSchemaException.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaException.AllInstances.PathSetString">
            <summary>JsonSchemaException.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator">
            <summary>Newtonsoft.Json.Schema.JsonSchemaGenerator の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.#ctor(Newtonsoft.Json.Schema.JsonSchemaGenerator)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AddNullTypeJsonSchemaTypeRequired">
            <summary>JsonSchemaGenerator.AddNullType(JsonSchemaType type, Required valueRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.Constructor">
            <summary>JsonSchemaGenerator.JsonSchemaGenerator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.ContractResolverGet">
            <summary>JsonSchemaGenerator.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.ContractResolverSetIContractResolver">
            <summary>JsonSchemaGenerator.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.CurrentSchemaGet">
            <summary>JsonSchemaGenerator.get_CurrentSchema() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateInternalTypeRequiredBoolean">
            <summary>JsonSchemaGenerator.GenerateInternal(Type type, Required valueRequired, Boolean required) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateObjectSchemaTypeJsonObjectContract">
            <summary>JsonSchemaGenerator.GenerateObjectSchema(Type type, JsonObjectContract contract) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateType">
            <summary>JsonSchemaGenerator.Generate(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateTypeBoolean">
            <summary>JsonSchemaGenerator.Generate(Type type, Boolean rootSchemaNullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateTypeJsonSchemaResolver">
            <summary>JsonSchemaGenerator.Generate(Type type, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GenerateTypeJsonSchemaResolverBoolean">
            <summary>JsonSchemaGenerator.Generate(Type type, JsonSchemaResolver resolver, Boolean rootSchemaNullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GetDescriptionType">
            <summary>JsonSchemaGenerator.GetDescription(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GetJsonSchemaTypeTypeRequired">
            <summary>JsonSchemaGenerator.GetJsonSchemaType(Type type, Required valueRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GetTitleType">
            <summary>JsonSchemaGenerator.GetTitle(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.GetTypeIdTypeBoolean">
            <summary>JsonSchemaGenerator.GetTypeId(Type type, Boolean explicitOnly) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.HasFlagDefaultValueHandlingDefaultValueHandling">
            <summary>JsonSchemaGenerator.HasFlag(DefaultValueHandling value, DefaultValueHandling flag) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.HasFlagNullableOfJsonSchemaTypeJsonSchemaType">
            <summary>JsonSchemaGenerator.HasFlag(Nullable`1&lt;JsonSchemaType&gt; value, JsonSchemaType flag) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.UndefinedSchemaIdHandlingGet">
            <summary>JsonSchemaGenerator.get_UndefinedSchemaIdHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.UndefinedSchemaIdHandlingSetUndefinedSchemaIdHandling">
            <summary>JsonSchemaGenerator.set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.AddNullTypeJsonSchemaTypeRequired">
            <summary>JsonSchemaGenerator.AddNullType(JsonSchemaType type, Required valueRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.ContractResolverGet">
            <summary>JsonSchemaGenerator.get_ContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.ContractResolverSetIContractResolver">
            <summary>JsonSchemaGenerator.set_ContractResolver(IContractResolver value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.CurrentSchemaGet">
            <summary>JsonSchemaGenerator.get_CurrentSchema() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateInternalTypeRequiredBoolean">
            <summary>JsonSchemaGenerator.GenerateInternal(Type type, Required valueRequired, Boolean required) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateObjectSchemaTypeJsonObjectContract">
            <summary>JsonSchemaGenerator.GenerateObjectSchema(Type type, JsonObjectContract contract) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateType">
            <summary>JsonSchemaGenerator.Generate(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateTypeBoolean">
            <summary>JsonSchemaGenerator.Generate(Type type, Boolean rootSchemaNullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateTypeJsonSchemaResolver">
            <summary>JsonSchemaGenerator.Generate(Type type, JsonSchemaResolver resolver) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GenerateTypeJsonSchemaResolverBoolean">
            <summary>JsonSchemaGenerator.Generate(Type type, JsonSchemaResolver resolver, Boolean rootSchemaNullable) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GetDescriptionType">
            <summary>JsonSchemaGenerator.GetDescription(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GetJsonSchemaTypeTypeRequired">
            <summary>JsonSchemaGenerator.GetJsonSchemaType(Type type, Required valueRequired) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GetTitleType">
            <summary>JsonSchemaGenerator.GetTitle(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.GetTypeIdTypeBoolean">
            <summary>JsonSchemaGenerator.GetTypeId(Type type, Boolean explicitOnly) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.HasFlagDefaultValueHandlingDefaultValueHandling">
            <summary>JsonSchemaGenerator.HasFlag(DefaultValueHandling value, DefaultValueHandling flag) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.UndefinedSchemaIdHandlingGet">
            <summary>JsonSchemaGenerator.get_UndefinedSchemaIdHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaGenerator.AllInstances.UndefinedSchemaIdHandlingSetUndefinedSchemaIdHandling">
            <summary>JsonSchemaGenerator.set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver">
            <summary>Newtonsoft.Json.Schema.JsonSchemaResolver の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.#ctor(Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.Constructor">
            <summary>JsonSchemaResolver.JsonSchemaResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.GetSchemaString">
            <summary>JsonSchemaResolver.GetSchema(String reference) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.LoadedSchemasGet">
            <summary>JsonSchemaResolver.get_LoadedSchemas() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.LoadedSchemasSetIListOfJsonSchema">
            <summary>JsonSchemaResolver.set_LoadedSchemas(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.AllInstances.GetSchemaString">
            <summary>JsonSchemaResolver.GetSchema(String reference) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.AllInstances.LoadedSchemasGet">
            <summary>JsonSchemaResolver.get_LoadedSchemas() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimJsonSchemaResolver.AllInstances.LoadedSchemasSetIListOfJsonSchema">
            <summary>JsonSchemaResolver.set_LoadedSchemas(IList`1&lt;JsonSchema&gt; value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs">
            <summary>Newtonsoft.Json.Schema.ValidationEventArgs の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.#ctor(Newtonsoft.Json.Schema.ValidationEventArgs)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.ConstructorJsonSchemaException">
            <summary>ValidationEventArgs.ValidationEventArgs(JsonSchemaException ex) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.ExceptionGet">
            <summary>ValidationEventArgs.get_Exception() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.MessageGet">
            <summary>ValidationEventArgs.get_Message() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.PathGet">
            <summary>ValidationEventArgs.get_Path() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.AllInstances.ExceptionGet">
            <summary>ValidationEventArgs.get_Exception() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.AllInstances.MessageGet">
            <summary>ValidationEventArgs.get_Message() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.ShimValidationEventArgs.AllInstances.PathGet">
            <summary>ValidationEventArgs.get_Path() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.StubJsonSchema">
            <summary>Newtonsoft.Json.Schema.JsonSchema のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.InitializeStub">
            <summary>type StubJsonSchema の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.ToString">
            <summary>JsonSchema.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.ToString01">
            <summary>JsonSchema.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchema.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException">
            <summary>Newtonsoft.Json.Schema.JsonSchemaException のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.#ctor(System.String)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.AttachBackingFieldToHelpLink">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSchemaException.HelpLink をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.AttachBackingFieldToSource">
            <summary>バッキング フィールドを持つプロパティとして StubJsonSchemaException.Source をエミュレートするために、デリゲートをアタッチします。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.DataGet">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.GetBaseException">
            <summary>Exception.GetBaseException() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.GetBaseException01">
            <summary>Exception.GetBaseException() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Exception.GetObjectData(SerializationInfo info, StreamingContext context) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.HelpLinkGet">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.HelpLinkSetString">
            <summary>Exception.set_HelpLink(String value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.InitializeStub">
            <summary>type StubJsonSchemaException の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.MessageGet">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.SourceGet">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.SourceSetString">
            <summary>Exception.set_Source(String value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.StackTraceGet">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.ToString">
            <summary>Exception.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.ToString01">
            <summary>Exception.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.Data">
            <summary>Exception.get_Data() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.HelpLink">
            <summary>Exception.get_HelpLink() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.Message">
            <summary>Exception.get_Message() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.Source">
            <summary>Exception.get_Source() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaException.StackTrace">
            <summary>Exception.get_StackTrace() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator">
            <summary>Newtonsoft.Json.Schema.JsonSchemaGenerator のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator.InitializeStub">
            <summary>type StubJsonSchemaGenerator の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaGenerator.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver">
            <summary>Newtonsoft.Json.Schema.JsonSchemaResolver のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.GetSchema(System.String)">
            <summary>JsonSchemaResolver.GetSchema(String reference) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.GetSchemaString">
            <summary>JsonSchemaResolver.GetSchema(String reference) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.InitializeStub">
            <summary>type StubJsonSchemaResolver の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.Fakes.StubJsonSchemaResolver.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver">
            <summary>Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.#ctor(Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.Bind(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.Constructor">
            <summary>CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.ResolvePropertyNameString">
            <summary>CamelCasePropertyNamesContractResolver.ResolvePropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimCamelCasePropertyNamesContractResolver.AllInstances.ResolvePropertyNameString">
            <summary>CamelCasePropertyNamesContractResolver.ResolvePropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver">
            <summary>Newtonsoft.Json.Serialization.DefaultContractResolver の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.#ctor(Newtonsoft.Json.Serialization.DefaultContractResolver)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.Bind(Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CanConvertToStringType">
            <summary>DefaultContractResolver.CanConvertToString(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.Constructor">
            <summary>DefaultContractResolver.DefaultContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ConstructorBoolean">
            <summary>DefaultContractResolver.DefaultContractResolver(Boolean shareCache) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateArrayContractType">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateConstructorParametersConstructorInfoJsonPropertyCollection">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateContractType">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateDictionaryContractType">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateLinqContractType">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateMemberValueProviderMemberInfo">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateObjectContractType">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreatePrimitiveContractType">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreatePropertiesTypeMemberSerialization">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreatePropertyFromConstructorParameterJsonPropertyParameterInfo">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreatePropertyMemberInfoMemberSerialization">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateShouldSerializeTestMemberInfo">
            <summary>DefaultContractResolver.CreateShouldSerializeTest(MemberInfo member) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.CreateStringContractType">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.DefaultMembersSearchFlagsGet">
            <summary>DefaultContractResolver.get_DefaultMembersSearchFlags() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.DefaultMembersSearchFlagsSetBindingFlags">
            <summary>DefaultContractResolver.set_DefaultMembersSearchFlags(BindingFlags value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.DynamicCodeGenerationGet">
            <summary>DefaultContractResolver.get_DynamicCodeGeneration() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetAttributeConstructorType">
            <summary>DefaultContractResolver.GetAttributeConstructor(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetClassHierarchyForTypeType">
            <summary>DefaultContractResolver.GetClassHierarchyForType(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetClrTypeFullNameType">
            <summary>DefaultContractResolver.GetClrTypeFullName(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetDefaultCreatorType">
            <summary>DefaultContractResolver.GetDefaultCreator(Type createdType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetExtensionDataMemberForTypeType">
            <summary>DefaultContractResolver.GetExtensionDataMemberForType(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetParametrizedConstructorType">
            <summary>DefaultContractResolver.GetParametrizedConstructor(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetResolvedPropertyNameString">
            <summary>DefaultContractResolver.GetResolvedPropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.GetSerializableMembersType">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.InitializeContractJsonContract">
            <summary>DefaultContractResolver.InitializeContract(JsonContract contract) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.InstanceGet">
            <summary>DefaultContractResolver.get_Instance() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.IsIConvertibleType">
            <summary>DefaultContractResolver.IsIConvertible(Type t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.IsJsonPrimitiveTypeType">
            <summary>DefaultContractResolver.IsJsonPrimitiveType(Type t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.IsValidCallbackMethodInfoParameterInfoArrayTypeMethodInfoTypeRef">
            <summary>DefaultContractResolver.IsValidCallback(MethodInfo method, ParameterInfo[] parameters, Type attributeType, MethodInfo currentCallback, Type&amp; prevAttributeType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ResolveCallbackMethodsJsonContractType">
            <summary>DefaultContractResolver.ResolveCallbackMethods(JsonContract contract, Type t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ResolveContractConverterType">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ResolveContractType">
            <summary>DefaultContractResolver.ResolveContract(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ResolvePropertyNameString">
            <summary>DefaultContractResolver.ResolvePropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.SerializeCompilerGeneratedMembersGet">
            <summary>DefaultContractResolver.get_SerializeCompilerGeneratedMembers() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.SerializeCompilerGeneratedMembersSetBoolean">
            <summary>DefaultContractResolver.set_SerializeCompilerGeneratedMembers(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.SetExtensionDataDelegatesJsonObjectContractMemberInfo">
            <summary>DefaultContractResolver.SetExtensionDataDelegates(JsonObjectContract contract, MemberInfo member) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.SetIsSpecifiedActionsJsonPropertyMemberInfoBoolean">
            <summary>DefaultContractResolver.SetIsSpecifiedActions(JsonProperty property, MemberInfo member, Boolean allowNonPublicAccess) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.SetPropertySettingsFromAttributesJsonPropertyObjectStringTypeMemberSerializationBooleanOut">
            <summary>DefaultContractResolver.SetPropertySettingsFromAttributes(JsonProperty property, Object attributeProvider, String name, Type declaringType, MemberSerialization memberSerialization, Boolean&amp; allowNonPublicAccess) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.ShouldSerializeEntityMemberMemberInfo">
            <summary>DefaultContractResolver.ShouldSerializeEntityMember(MemberInfo memberInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.StaticConstructor">
            <summary>DefaultContractResolver.DefaultContractResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._CreatePropertiesb__fJsonProperty">
            <summary>DefaultContractResolver.&lt;CreateProperties&gt;b__f(JsonProperty p) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._GetAttributeConstructorb__dConstructorInfo">
            <summary>DefaultContractResolver.&lt;GetAttributeConstructor&gt;b__d(ConstructorInfo c) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._GetExtensionDataMemberForTypeb__5Type">
            <summary>DefaultContractResolver.&lt;GetExtensionDataMemberForType&gt;b__5(Type baseType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._GetExtensionDataMemberForTypeb__6MemberInfo">
            <summary>DefaultContractResolver.&lt;GetExtensionDataMemberForType&gt;b__6(MemberInfo m) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._GetSerializableMembersb__1MemberInfo">
            <summary>DefaultContractResolver.&lt;GetSerializableMembers&gt;b__1(MemberInfo m) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver._GetSerializableMembersb__2MemberInfo">
            <summary>DefaultContractResolver.&lt;GetSerializableMembers&gt;b__2(MemberInfo m) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateArrayContractType">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateConstructorParametersConstructorInfoJsonPropertyCollection">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateContractType">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateDictionaryContractType">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateLinqContractType">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateMemberValueProviderMemberInfo">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateObjectContractType">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreatePrimitiveContractType">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreatePropertiesTypeMemberSerialization">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreatePropertyFromConstructorParameterJsonPropertyParameterInfo">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreatePropertyMemberInfoMemberSerialization">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateShouldSerializeTestMemberInfo">
            <summary>DefaultContractResolver.CreateShouldSerializeTest(MemberInfo member) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.CreateStringContractType">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.DefaultMembersSearchFlagsGet">
            <summary>DefaultContractResolver.get_DefaultMembersSearchFlags() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.DefaultMembersSearchFlagsSetBindingFlags">
            <summary>DefaultContractResolver.set_DefaultMembersSearchFlags(BindingFlags value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.DynamicCodeGenerationGet">
            <summary>DefaultContractResolver.get_DynamicCodeGeneration() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetAttributeConstructorType">
            <summary>DefaultContractResolver.GetAttributeConstructor(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetClassHierarchyForTypeType">
            <summary>DefaultContractResolver.GetClassHierarchyForType(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetDefaultCreatorType">
            <summary>DefaultContractResolver.GetDefaultCreator(Type createdType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetExtensionDataMemberForTypeType">
            <summary>DefaultContractResolver.GetExtensionDataMemberForType(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetParametrizedConstructorType">
            <summary>DefaultContractResolver.GetParametrizedConstructor(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetResolvedPropertyNameString">
            <summary>DefaultContractResolver.GetResolvedPropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.GetSerializableMembersType">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.InitializeContractJsonContract">
            <summary>DefaultContractResolver.InitializeContract(JsonContract contract) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.ResolveCallbackMethodsJsonContractType">
            <summary>DefaultContractResolver.ResolveCallbackMethods(JsonContract contract, Type t) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.ResolveContractConverterType">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.ResolveContractType">
            <summary>DefaultContractResolver.ResolveContract(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.ResolvePropertyNameString">
            <summary>DefaultContractResolver.ResolvePropertyName(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.SerializeCompilerGeneratedMembersGet">
            <summary>DefaultContractResolver.get_SerializeCompilerGeneratedMembers() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.SerializeCompilerGeneratedMembersSetBoolean">
            <summary>DefaultContractResolver.set_SerializeCompilerGeneratedMembers(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.SetIsSpecifiedActionsJsonPropertyMemberInfoBoolean">
            <summary>DefaultContractResolver.SetIsSpecifiedActions(JsonProperty property, MemberInfo member, Boolean allowNonPublicAccess) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.SetPropertySettingsFromAttributesJsonPropertyObjectStringTypeMemberSerializationBooleanOut">
            <summary>DefaultContractResolver.SetPropertySettingsFromAttributes(JsonProperty property, Object attributeProvider, String name, Type declaringType, MemberSerialization memberSerialization, Boolean&amp; allowNonPublicAccess) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultContractResolver.AllInstances.ShouldSerializeEntityMemberMemberInfo">
            <summary>DefaultContractResolver.ShouldSerializeEntityMember(MemberInfo memberInfo) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder">
            <summary>Newtonsoft.Json.Serialization.DefaultSerializationBinder の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.#ctor(Newtonsoft.Json.Serialization.DefaultSerializationBinder)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.BindToNameTypeStringOutStringOut">
            <summary>DefaultSerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.BindToTypeStringString">
            <summary>DefaultSerializationBinder.BindToType(String assemblyName, String typeName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.Constructor">
            <summary>DefaultSerializationBinder.DefaultSerializationBinder() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.StaticConstructor">
            <summary>DefaultSerializationBinder.DefaultSerializationBinder() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.AllInstances.BindToNameTypeStringOutStringOut">
            <summary>DefaultSerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimDefaultSerializationBinder.AllInstances.BindToTypeStringString">
            <summary>DefaultSerializationBinder.BindToType(String assemblyName, String typeName) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext">
            <summary>Newtonsoft.Json.Serialization.ErrorContext の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.#ctor(Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.ConstructorObjectObjectStringException">
            <summary>ErrorContext.ErrorContext(Object originalObject, Object member, String path, Exception error) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.ErrorGet">
            <summary>ErrorContext.get_Error() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.ErrorSetException">
            <summary>ErrorContext.set_Error(Exception value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.HandledGet">
            <summary>ErrorContext.get_Handled() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.HandledSetBoolean">
            <summary>ErrorContext.set_Handled(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.MemberGet">
            <summary>ErrorContext.get_Member() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.MemberSetObject">
            <summary>ErrorContext.set_Member(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.OriginalObjectGet">
            <summary>ErrorContext.get_OriginalObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.OriginalObjectSetObject">
            <summary>ErrorContext.set_OriginalObject(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.PathGet">
            <summary>ErrorContext.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.PathSetString">
            <summary>ErrorContext.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.TracedGet">
            <summary>ErrorContext.get_Traced() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.TracedSetBoolean">
            <summary>ErrorContext.set_Traced(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.ErrorGet">
            <summary>ErrorContext.get_Error() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.ErrorSetException">
            <summary>ErrorContext.set_Error(Exception value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.HandledGet">
            <summary>ErrorContext.get_Handled() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.HandledSetBoolean">
            <summary>ErrorContext.set_Handled(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.MemberGet">
            <summary>ErrorContext.get_Member() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.MemberSetObject">
            <summary>ErrorContext.set_Member(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.OriginalObjectGet">
            <summary>ErrorContext.get_OriginalObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.OriginalObjectSetObject">
            <summary>ErrorContext.set_OriginalObject(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.PathGet">
            <summary>ErrorContext.get_Path() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.PathSetString">
            <summary>ErrorContext.set_Path(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.TracedGet">
            <summary>ErrorContext.get_Traced() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorContext.AllInstances.TracedSetBoolean">
            <summary>ErrorContext.set_Traced(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs">
            <summary>Newtonsoft.Json.Serialization.ErrorEventArgs の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.#ctor(Newtonsoft.Json.Serialization.ErrorEventArgs)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.ConstructorObjectErrorContext">
            <summary>ErrorEventArgs.ErrorEventArgs(Object currentObject, ErrorContext errorContext) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.CurrentObjectGet">
            <summary>ErrorEventArgs.get_CurrentObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.CurrentObjectSetObject">
            <summary>ErrorEventArgs.set_CurrentObject(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.ErrorContextGet">
            <summary>ErrorEventArgs.get_ErrorContext() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.ErrorContextSetErrorContext">
            <summary>ErrorEventArgs.set_ErrorContext(ErrorContext value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.AllInstances.CurrentObjectGet">
            <summary>ErrorEventArgs.get_CurrentObject() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.AllInstances.CurrentObjectSetObject">
            <summary>ErrorEventArgs.set_CurrentObject(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.AllInstances.ErrorContextGet">
            <summary>ErrorEventArgs.get_ErrorContext() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimErrorEventArgs.AllInstances.ErrorContextSetErrorContext">
            <summary>ErrorEventArgs.set_ErrorContext(ErrorContext value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract">
            <summary>Newtonsoft.Json.Serialization.JsonArrayContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.#ctor(Newtonsoft.Json.Serialization.JsonArrayContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.CanDeserializeGet">
            <summary>JsonArrayContract.get_CanDeserialize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.CanDeserializeSetBoolean">
            <summary>JsonArrayContract.set_CanDeserialize(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.CollectionItemTypeGet">
            <summary>JsonArrayContract.get_CollectionItemType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.CollectionItemTypeSetType">
            <summary>JsonArrayContract.set_CollectionItemType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.ConstructorType">
            <summary>JsonArrayContract.JsonArrayContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.CreateTemporaryCollection">
            <summary>JsonArrayContract.CreateTemporaryCollection() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.IsArrayGet">
            <summary>JsonArrayContract.get_IsArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.IsArraySetBoolean">
            <summary>JsonArrayContract.set_IsArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.IsMultidimensionalArrayGet">
            <summary>JsonArrayContract.get_IsMultidimensionalArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.IsMultidimensionalArraySetBoolean">
            <summary>JsonArrayContract.set_IsMultidimensionalArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.ParametrizedConstructorGet">
            <summary>JsonArrayContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.ParametrizedConstructorSetMethodBase">
            <summary>JsonArrayContract.set_ParametrizedConstructor(MethodBase value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.ShouldCreateWrapperGet">
            <summary>JsonArrayContract.get_ShouldCreateWrapper() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.ShouldCreateWrapperSetBoolean">
            <summary>JsonArrayContract.set_ShouldCreateWrapper(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.CanDeserializeGet">
            <summary>JsonArrayContract.get_CanDeserialize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.CanDeserializeSetBoolean">
            <summary>JsonArrayContract.set_CanDeserialize(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.CollectionItemTypeGet">
            <summary>JsonArrayContract.get_CollectionItemType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.CollectionItemTypeSetType">
            <summary>JsonArrayContract.set_CollectionItemType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.CreateTemporaryCollection">
            <summary>JsonArrayContract.CreateTemporaryCollection() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.IsArrayGet">
            <summary>JsonArrayContract.get_IsArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.IsArraySetBoolean">
            <summary>JsonArrayContract.set_IsArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.IsMultidimensionalArrayGet">
            <summary>JsonArrayContract.get_IsMultidimensionalArray() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.IsMultidimensionalArraySetBoolean">
            <summary>JsonArrayContract.set_IsMultidimensionalArray(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.ParametrizedConstructorGet">
            <summary>JsonArrayContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.ParametrizedConstructorSetMethodBase">
            <summary>JsonArrayContract.set_ParametrizedConstructor(MethodBase value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.ShouldCreateWrapperGet">
            <summary>JsonArrayContract.get_ShouldCreateWrapper() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonArrayContract.AllInstances.ShouldCreateWrapperSetBoolean">
            <summary>JsonArrayContract.set_ShouldCreateWrapper(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract">
            <summary>Newtonsoft.Json.Serialization.JsonContainerContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.#ctor(Newtonsoft.Json.Serialization.JsonContainerContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ConstructorType">
            <summary>JsonContainerContract.JsonContainerContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.FinalItemContractGet">
            <summary>JsonContainerContract.get_FinalItemContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemContractGet">
            <summary>JsonContainerContract.get_ItemContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemContractSetJsonContract">
            <summary>JsonContainerContract.set_ItemContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemConverterGet">
            <summary>JsonContainerContract.get_ItemConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemConverterSetJsonConverter">
            <summary>JsonContainerContract.set_ItemConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemIsReferenceGet">
            <summary>JsonContainerContract.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemIsReferenceSetNullableOfBoolean">
            <summary>JsonContainerContract.set_ItemIsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemReferenceLoopHandlingGet">
            <summary>JsonContainerContract.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonContainerContract.set_ItemReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemTypeNameHandlingGet">
            <summary>JsonContainerContract.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.ItemTypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonContainerContract.set_ItemTypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.FinalItemContractGet">
            <summary>JsonContainerContract.get_FinalItemContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemContractGet">
            <summary>JsonContainerContract.get_ItemContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemContractSetJsonContract">
            <summary>JsonContainerContract.set_ItemContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemConverterGet">
            <summary>JsonContainerContract.get_ItemConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemConverterSetJsonConverter">
            <summary>JsonContainerContract.set_ItemConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemIsReferenceGet">
            <summary>JsonContainerContract.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemIsReferenceSetNullableOfBoolean">
            <summary>JsonContainerContract.set_ItemIsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemReferenceLoopHandlingGet">
            <summary>JsonContainerContract.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonContainerContract.set_ItemReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemTypeNameHandlingGet">
            <summary>JsonContainerContract.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContainerContract.AllInstances.ItemTypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonContainerContract.set_ItemTypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract">
            <summary>Newtonsoft.Json.Serialization.JsonContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.#ctor(Newtonsoft.Json.Serialization.JsonContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.ConstructorType">
            <summary>JsonContract.JsonContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.ConverterGet">
            <summary>JsonContract.get_Converter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.ConverterSetJsonConverter">
            <summary>JsonContract.set_Converter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.CreateSerializationCallbackMethodInfo">
            <summary>JsonContract.CreateSerializationCallback(MethodInfo callbackMethodInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.CreateSerializationErrorCallbackMethodInfo">
            <summary>JsonContract.CreateSerializationErrorCallback(MethodInfo callbackMethodInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.CreatedTypeGet">
            <summary>JsonContract.get_CreatedType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.CreatedTypeSetType">
            <summary>JsonContract.set_CreatedType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.DefaultCreatorGet">
            <summary>JsonContract.get_DefaultCreator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.DefaultCreatorNonPublicGet">
            <summary>JsonContract.get_DefaultCreatorNonPublic() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.DefaultCreatorNonPublicSetBoolean">
            <summary>JsonContract.set_DefaultCreatorNonPublic(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.DefaultCreatorSetFuncOfObject">
            <summary>JsonContract.set_DefaultCreator(Func`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InternalConverterGet">
            <summary>JsonContract.get_InternalConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InternalConverterSetJsonConverter">
            <summary>JsonContract.set_InternalConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InvokeOnDeserializedObjectStreamingContext">
            <summary>JsonContract.InvokeOnDeserialized(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InvokeOnDeserializingObjectStreamingContext">
            <summary>JsonContract.InvokeOnDeserializing(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InvokeOnErrorObjectStreamingContextErrorContext">
            <summary>JsonContract.InvokeOnError(Object o, StreamingContext context, ErrorContext errorContext) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InvokeOnSerializedObjectStreamingContext">
            <summary>JsonContract.InvokeOnSerialized(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.InvokeOnSerializingObjectStreamingContext">
            <summary>JsonContract.InvokeOnSerializing(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.IsReferenceGet">
            <summary>JsonContract.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.IsReferenceSetNullableOfBoolean">
            <summary>JsonContract.set_IsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializedCallbacksGet">
            <summary>JsonContract.get_OnDeserializedCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializedGet">
            <summary>JsonContract.get_OnDeserialized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializedSetMethodInfo">
            <summary>JsonContract.set_OnDeserialized(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializingCallbacksGet">
            <summary>JsonContract.get_OnDeserializingCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializingGet">
            <summary>JsonContract.get_OnDeserializing() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnDeserializingSetMethodInfo">
            <summary>JsonContract.set_OnDeserializing(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnErrorCallbacksGet">
            <summary>JsonContract.get_OnErrorCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnErrorGet">
            <summary>JsonContract.get_OnError() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnErrorSetMethodInfo">
            <summary>JsonContract.set_OnError(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializedCallbacksGet">
            <summary>JsonContract.get_OnSerializedCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializedGet">
            <summary>JsonContract.get_OnSerialized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializedSetMethodInfo">
            <summary>JsonContract.set_OnSerialized(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializingCallbacksGet">
            <summary>JsonContract.get_OnSerializingCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializingGet">
            <summary>JsonContract.get_OnSerializing() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.OnSerializingSetMethodInfo">
            <summary>JsonContract.set_OnSerializing(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.UnderlyingTypeGet">
            <summary>JsonContract.get_UnderlyingType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.UnderlyingTypeSetType">
            <summary>JsonContract.set_UnderlyingType(Type value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.ConverterGet">
            <summary>JsonContract.get_Converter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.ConverterSetJsonConverter">
            <summary>JsonContract.set_Converter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.CreatedTypeGet">
            <summary>JsonContract.get_CreatedType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.CreatedTypeSetType">
            <summary>JsonContract.set_CreatedType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.DefaultCreatorGet">
            <summary>JsonContract.get_DefaultCreator() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.DefaultCreatorNonPublicGet">
            <summary>JsonContract.get_DefaultCreatorNonPublic() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.DefaultCreatorNonPublicSetBoolean">
            <summary>JsonContract.set_DefaultCreatorNonPublic(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.DefaultCreatorSetFuncOfObject">
            <summary>JsonContract.set_DefaultCreator(Func`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InternalConverterGet">
            <summary>JsonContract.get_InternalConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InternalConverterSetJsonConverter">
            <summary>JsonContract.set_InternalConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InvokeOnDeserializedObjectStreamingContext">
            <summary>JsonContract.InvokeOnDeserialized(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InvokeOnDeserializingObjectStreamingContext">
            <summary>JsonContract.InvokeOnDeserializing(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InvokeOnErrorObjectStreamingContextErrorContext">
            <summary>JsonContract.InvokeOnError(Object o, StreamingContext context, ErrorContext errorContext) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InvokeOnSerializedObjectStreamingContext">
            <summary>JsonContract.InvokeOnSerialized(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.InvokeOnSerializingObjectStreamingContext">
            <summary>JsonContract.InvokeOnSerializing(Object o, StreamingContext context) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.IsReferenceGet">
            <summary>JsonContract.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.IsReferenceSetNullableOfBoolean">
            <summary>JsonContract.set_IsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializedCallbacksGet">
            <summary>JsonContract.get_OnDeserializedCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializedGet">
            <summary>JsonContract.get_OnDeserialized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializedSetMethodInfo">
            <summary>JsonContract.set_OnDeserialized(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializingCallbacksGet">
            <summary>JsonContract.get_OnDeserializingCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializingGet">
            <summary>JsonContract.get_OnDeserializing() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnDeserializingSetMethodInfo">
            <summary>JsonContract.set_OnDeserializing(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnErrorCallbacksGet">
            <summary>JsonContract.get_OnErrorCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnErrorGet">
            <summary>JsonContract.get_OnError() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnErrorSetMethodInfo">
            <summary>JsonContract.set_OnError(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializedCallbacksGet">
            <summary>JsonContract.get_OnSerializedCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializedGet">
            <summary>JsonContract.get_OnSerialized() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializedSetMethodInfo">
            <summary>JsonContract.set_OnSerialized(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializingCallbacksGet">
            <summary>JsonContract.get_OnSerializingCallbacks() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializingGet">
            <summary>JsonContract.get_OnSerializing() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.OnSerializingSetMethodInfo">
            <summary>JsonContract.set_OnSerializing(MethodInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.UnderlyingTypeGet">
            <summary>JsonContract.get_UnderlyingType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonContract.AllInstances.UnderlyingTypeSetType">
            <summary>JsonContract.set_UnderlyingType(Type value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract">
            <summary>Newtonsoft.Json.Serialization.JsonDictionaryContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.#ctor(Newtonsoft.Json.Serialization.JsonDictionaryContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.ConstructorType">
            <summary>JsonDictionaryContract.JsonDictionaryContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.CreateTemporaryDictionary">
            <summary>JsonDictionaryContract.CreateTemporaryDictionary() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.DictionaryKeyTypeGet">
            <summary>JsonDictionaryContract.get_DictionaryKeyType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.DictionaryKeyTypeSetType">
            <summary>JsonDictionaryContract.set_DictionaryKeyType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.DictionaryValueTypeGet">
            <summary>JsonDictionaryContract.get_DictionaryValueType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.DictionaryValueTypeSetType">
            <summary>JsonDictionaryContract.set_DictionaryValueType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.KeyContractGet">
            <summary>JsonDictionaryContract.get_KeyContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.KeyContractSetJsonContract">
            <summary>JsonDictionaryContract.set_KeyContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.ParametrizedConstructorGet">
            <summary>JsonDictionaryContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.ParametrizedConstructorSetMethodBase">
            <summary>JsonDictionaryContract.set_ParametrizedConstructor(MethodBase value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.PropertyNameResolverGet">
            <summary>JsonDictionaryContract.get_PropertyNameResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.PropertyNameResolverSetFuncOfStringString">
            <summary>JsonDictionaryContract.set_PropertyNameResolver(Func`2&lt;String,String&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.ShouldCreateWrapperGet">
            <summary>JsonDictionaryContract.get_ShouldCreateWrapper() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.ShouldCreateWrapperSetBoolean">
            <summary>JsonDictionaryContract.set_ShouldCreateWrapper(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.CreateTemporaryDictionary">
            <summary>JsonDictionaryContract.CreateTemporaryDictionary() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.DictionaryKeyTypeGet">
            <summary>JsonDictionaryContract.get_DictionaryKeyType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.DictionaryKeyTypeSetType">
            <summary>JsonDictionaryContract.set_DictionaryKeyType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.DictionaryValueTypeGet">
            <summary>JsonDictionaryContract.get_DictionaryValueType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.DictionaryValueTypeSetType">
            <summary>JsonDictionaryContract.set_DictionaryValueType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.KeyContractGet">
            <summary>JsonDictionaryContract.get_KeyContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.KeyContractSetJsonContract">
            <summary>JsonDictionaryContract.set_KeyContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.ParametrizedConstructorGet">
            <summary>JsonDictionaryContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.ParametrizedConstructorSetMethodBase">
            <summary>JsonDictionaryContract.set_ParametrizedConstructor(MethodBase value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.PropertyNameResolverGet">
            <summary>JsonDictionaryContract.get_PropertyNameResolver() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.PropertyNameResolverSetFuncOfStringString">
            <summary>JsonDictionaryContract.set_PropertyNameResolver(Func`2&lt;String,String&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.ShouldCreateWrapperGet">
            <summary>JsonDictionaryContract.get_ShouldCreateWrapper() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonDictionaryContract.AllInstances.ShouldCreateWrapperSetBoolean">
            <summary>JsonDictionaryContract.set_ShouldCreateWrapper(Boolean value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract">
            <summary>Newtonsoft.Json.Serialization.JsonLinqContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.#ctor(Newtonsoft.Json.Serialization.JsonLinqContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.ConstructorType">
            <summary>JsonLinqContract.JsonLinqContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonLinqContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract">
            <summary>Newtonsoft.Json.Serialization.JsonObjectContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.#ctor(Newtonsoft.Json.Serialization.JsonObjectContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ConstructorParametersGet">
            <summary>JsonObjectContract.get_ConstructorParameters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ConstructorParametersSetJsonPropertyCollection">
            <summary>JsonObjectContract.set_ConstructorParameters(JsonPropertyCollection value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ConstructorType">
            <summary>JsonObjectContract.JsonObjectContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ExtensionDataGetterGet">
            <summary>JsonObjectContract.get_ExtensionDataGetter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ExtensionDataGetterSetExtensionDataGetter">
            <summary>JsonObjectContract.set_ExtensionDataGetter(ExtensionDataGetter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ExtensionDataSetterGet">
            <summary>JsonObjectContract.get_ExtensionDataSetter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ExtensionDataSetterSetExtensionDataSetter">
            <summary>JsonObjectContract.set_ExtensionDataSetter(ExtensionDataSetter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.HasRequiredOrDefaultValuePropertiesGet">
            <summary>JsonObjectContract.get_HasRequiredOrDefaultValueProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ItemRequiredGet">
            <summary>JsonObjectContract.get_ItemRequired() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ItemRequiredSetNullableOfRequired">
            <summary>JsonObjectContract.set_ItemRequired(Nullable`1&lt;Required&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.MemberSerializationGet">
            <summary>JsonObjectContract.get_MemberSerialization() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.MemberSerializationSetMemberSerialization">
            <summary>JsonObjectContract.set_MemberSerialization(MemberSerialization value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.OverrideConstructorGet">
            <summary>JsonObjectContract.get_OverrideConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.OverrideConstructorSetConstructorInfo">
            <summary>JsonObjectContract.set_OverrideConstructor(ConstructorInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ParametrizedConstructorGet">
            <summary>JsonObjectContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.ParametrizedConstructorSetConstructorInfo">
            <summary>JsonObjectContract.set_ParametrizedConstructor(ConstructorInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.PropertiesGet">
            <summary>JsonObjectContract.get_Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.PropertiesSetJsonPropertyCollection">
            <summary>JsonObjectContract.set_Properties(JsonPropertyCollection value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ConstructorParametersGet">
            <summary>JsonObjectContract.get_ConstructorParameters() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ConstructorParametersSetJsonPropertyCollection">
            <summary>JsonObjectContract.set_ConstructorParameters(JsonPropertyCollection value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ExtensionDataGetterGet">
            <summary>JsonObjectContract.get_ExtensionDataGetter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ExtensionDataGetterSetExtensionDataGetter">
            <summary>JsonObjectContract.set_ExtensionDataGetter(ExtensionDataGetter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ExtensionDataSetterGet">
            <summary>JsonObjectContract.get_ExtensionDataSetter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ExtensionDataSetterSetExtensionDataSetter">
            <summary>JsonObjectContract.set_ExtensionDataSetter(ExtensionDataSetter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.HasRequiredOrDefaultValuePropertiesGet">
            <summary>JsonObjectContract.get_HasRequiredOrDefaultValueProperties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ItemRequiredGet">
            <summary>JsonObjectContract.get_ItemRequired() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ItemRequiredSetNullableOfRequired">
            <summary>JsonObjectContract.set_ItemRequired(Nullable`1&lt;Required&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.MemberSerializationGet">
            <summary>JsonObjectContract.get_MemberSerialization() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.MemberSerializationSetMemberSerialization">
            <summary>JsonObjectContract.set_MemberSerialization(MemberSerialization value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.OverrideConstructorGet">
            <summary>JsonObjectContract.get_OverrideConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.OverrideConstructorSetConstructorInfo">
            <summary>JsonObjectContract.set_OverrideConstructor(ConstructorInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ParametrizedConstructorGet">
            <summary>JsonObjectContract.get_ParametrizedConstructor() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.ParametrizedConstructorSetConstructorInfo">
            <summary>JsonObjectContract.set_ParametrizedConstructor(ConstructorInfo value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.PropertiesGet">
            <summary>JsonObjectContract.get_Properties() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonObjectContract.AllInstances.PropertiesSetJsonPropertyCollection">
            <summary>JsonObjectContract.set_Properties(JsonPropertyCollection value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract">
            <summary>Newtonsoft.Json.Serialization.JsonPrimitiveContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.#ctor(Newtonsoft.Json.Serialization.JsonPrimitiveContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.ConstructorType">
            <summary>JsonPrimitiveContract.JsonPrimitiveContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonPrimitiveContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty">
            <summary>Newtonsoft.Json.Serialization.JsonProperty の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.#ctor(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.CalculateSkipPropertyNameEscape">
            <summary>JsonProperty.CalculateSkipPropertyNameEscape() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.Constructor">
            <summary>JsonProperty.JsonProperty() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ConverterGet">
            <summary>JsonProperty.get_Converter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ConverterSetJsonConverter">
            <summary>JsonProperty.set_Converter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DeclaringTypeGet">
            <summary>JsonProperty.get_DeclaringType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DeclaringTypeSetType">
            <summary>JsonProperty.set_DeclaringType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DefaultValueGet">
            <summary>JsonProperty.get_DefaultValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DefaultValueHandlingGet">
            <summary>JsonProperty.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DefaultValueHandlingSetNullableOfDefaultValueHandling">
            <summary>JsonProperty.set_DefaultValueHandling(Nullable`1&lt;DefaultValueHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.DefaultValueSetObject">
            <summary>JsonProperty.set_DefaultValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.GetIsSpecifiedGet">
            <summary>JsonProperty.get_GetIsSpecified() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.GetIsSpecifiedSetPredicateOfObject">
            <summary>JsonProperty.set_GetIsSpecified(Predicate`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.GetResolvedDefaultValue">
            <summary>JsonProperty.GetResolvedDefaultValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.HasMemberAttributeGet">
            <summary>JsonProperty.get_HasMemberAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.HasMemberAttributeSetBoolean">
            <summary>JsonProperty.set_HasMemberAttribute(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.IgnoredGet">
            <summary>JsonProperty.get_Ignored() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.IgnoredSetBoolean">
            <summary>JsonProperty.set_Ignored(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.IsReferenceGet">
            <summary>JsonProperty.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.IsReferenceSetNullableOfBoolean">
            <summary>JsonProperty.set_IsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemConverterGet">
            <summary>JsonProperty.get_ItemConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemConverterSetJsonConverter">
            <summary>JsonProperty.set_ItemConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemIsReferenceGet">
            <summary>JsonProperty.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemIsReferenceSetNullableOfBoolean">
            <summary>JsonProperty.set_ItemIsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemReferenceLoopHandlingGet">
            <summary>JsonProperty.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonProperty.set_ItemReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemTypeNameHandlingGet">
            <summary>JsonProperty.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ItemTypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonProperty.set_ItemTypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.MemberConverterGet">
            <summary>JsonProperty.get_MemberConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.MemberConverterSetJsonConverter">
            <summary>JsonProperty.set_MemberConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.NullValueHandlingGet">
            <summary>JsonProperty.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.NullValueHandlingSetNullableOfNullValueHandling">
            <summary>JsonProperty.set_NullValueHandling(Nullable`1&lt;NullValueHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ObjectCreationHandlingGet">
            <summary>JsonProperty.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ObjectCreationHandlingSetNullableOfObjectCreationHandling">
            <summary>JsonProperty.set_ObjectCreationHandling(Nullable`1&lt;ObjectCreationHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.OrderGet">
            <summary>JsonProperty.get_Order() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.OrderSetNullableOfInt32">
            <summary>JsonProperty.set_Order(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyContractGet">
            <summary>JsonProperty.get_PropertyContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyContractSetJsonContract">
            <summary>JsonProperty.set_PropertyContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyNameGet">
            <summary>JsonProperty.get_PropertyName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyNameSetString">
            <summary>JsonProperty.set_PropertyName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyTypeGet">
            <summary>JsonProperty.get_PropertyType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.PropertyTypeSetType">
            <summary>JsonProperty.set_PropertyType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ReadableGet">
            <summary>JsonProperty.get_Readable() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ReadableSetBoolean">
            <summary>JsonProperty.set_Readable(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ReferenceLoopHandlingGet">
            <summary>JsonProperty.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonProperty.set_ReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.RequiredGet">
            <summary>JsonProperty.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.RequiredSetRequired">
            <summary>JsonProperty.set_Required(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.SetIsSpecifiedGet">
            <summary>JsonProperty.get_SetIsSpecified() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.SetIsSpecifiedSetActionOfObjectObject">
            <summary>JsonProperty.set_SetIsSpecified(Action`2&lt;Object,Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ShouldSerializeGet">
            <summary>JsonProperty.get_ShouldSerialize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ShouldSerializeSetPredicateOfObject">
            <summary>JsonProperty.set_ShouldSerialize(Predicate`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ToString">
            <summary>JsonProperty.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.TypeNameHandlingGet">
            <summary>JsonProperty.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.TypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonProperty.set_TypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.UnderlyingNameGet">
            <summary>JsonProperty.get_UnderlyingName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.UnderlyingNameSetString">
            <summary>JsonProperty.set_UnderlyingName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ValueProviderGet">
            <summary>JsonProperty.get_ValueProvider() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.ValueProviderSetIValueProvider">
            <summary>JsonProperty.set_ValueProvider(IValueProvider value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.WritableGet">
            <summary>JsonProperty.get_Writable() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.WritableSetBoolean">
            <summary>JsonProperty.set_Writable(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.WritePropertyNameJsonWriter">
            <summary>JsonProperty.WritePropertyName(JsonWriter writer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.CalculateSkipPropertyNameEscape">
            <summary>JsonProperty.CalculateSkipPropertyNameEscape() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ConverterGet">
            <summary>JsonProperty.get_Converter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ConverterSetJsonConverter">
            <summary>JsonProperty.set_Converter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DeclaringTypeGet">
            <summary>JsonProperty.get_DeclaringType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DeclaringTypeSetType">
            <summary>JsonProperty.set_DeclaringType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DefaultValueGet">
            <summary>JsonProperty.get_DefaultValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DefaultValueHandlingGet">
            <summary>JsonProperty.get_DefaultValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DefaultValueHandlingSetNullableOfDefaultValueHandling">
            <summary>JsonProperty.set_DefaultValueHandling(Nullable`1&lt;DefaultValueHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.DefaultValueSetObject">
            <summary>JsonProperty.set_DefaultValue(Object value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.GetIsSpecifiedGet">
            <summary>JsonProperty.get_GetIsSpecified() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.GetIsSpecifiedSetPredicateOfObject">
            <summary>JsonProperty.set_GetIsSpecified(Predicate`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.GetResolvedDefaultValue">
            <summary>JsonProperty.GetResolvedDefaultValue() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.HasMemberAttributeGet">
            <summary>JsonProperty.get_HasMemberAttribute() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.HasMemberAttributeSetBoolean">
            <summary>JsonProperty.set_HasMemberAttribute(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.IgnoredGet">
            <summary>JsonProperty.get_Ignored() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.IgnoredSetBoolean">
            <summary>JsonProperty.set_Ignored(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.IsReferenceGet">
            <summary>JsonProperty.get_IsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.IsReferenceSetNullableOfBoolean">
            <summary>JsonProperty.set_IsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemConverterGet">
            <summary>JsonProperty.get_ItemConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemConverterSetJsonConverter">
            <summary>JsonProperty.set_ItemConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemIsReferenceGet">
            <summary>JsonProperty.get_ItemIsReference() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemIsReferenceSetNullableOfBoolean">
            <summary>JsonProperty.set_ItemIsReference(Nullable`1&lt;Boolean&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemReferenceLoopHandlingGet">
            <summary>JsonProperty.get_ItemReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonProperty.set_ItemReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemTypeNameHandlingGet">
            <summary>JsonProperty.get_ItemTypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ItemTypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonProperty.set_ItemTypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.MemberConverterGet">
            <summary>JsonProperty.get_MemberConverter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.MemberConverterSetJsonConverter">
            <summary>JsonProperty.set_MemberConverter(JsonConverter value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.NullValueHandlingGet">
            <summary>JsonProperty.get_NullValueHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.NullValueHandlingSetNullableOfNullValueHandling">
            <summary>JsonProperty.set_NullValueHandling(Nullable`1&lt;NullValueHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ObjectCreationHandlingGet">
            <summary>JsonProperty.get_ObjectCreationHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ObjectCreationHandlingSetNullableOfObjectCreationHandling">
            <summary>JsonProperty.set_ObjectCreationHandling(Nullable`1&lt;ObjectCreationHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.OrderGet">
            <summary>JsonProperty.get_Order() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.OrderSetNullableOfInt32">
            <summary>JsonProperty.set_Order(Nullable`1&lt;Int32&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyContractGet">
            <summary>JsonProperty.get_PropertyContract() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyContractSetJsonContract">
            <summary>JsonProperty.set_PropertyContract(JsonContract value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyNameGet">
            <summary>JsonProperty.get_PropertyName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyNameSetString">
            <summary>JsonProperty.set_PropertyName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyTypeGet">
            <summary>JsonProperty.get_PropertyType() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.PropertyTypeSetType">
            <summary>JsonProperty.set_PropertyType(Type value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ReadableGet">
            <summary>JsonProperty.get_Readable() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ReadableSetBoolean">
            <summary>JsonProperty.set_Readable(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ReferenceLoopHandlingGet">
            <summary>JsonProperty.get_ReferenceLoopHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ReferenceLoopHandlingSetNullableOfReferenceLoopHandling">
            <summary>JsonProperty.set_ReferenceLoopHandling(Nullable`1&lt;ReferenceLoopHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.RequiredGet">
            <summary>JsonProperty.get_Required() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.RequiredSetRequired">
            <summary>JsonProperty.set_Required(Required value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.SetIsSpecifiedGet">
            <summary>JsonProperty.get_SetIsSpecified() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.SetIsSpecifiedSetActionOfObjectObject">
            <summary>JsonProperty.set_SetIsSpecified(Action`2&lt;Object,Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ShouldSerializeGet">
            <summary>JsonProperty.get_ShouldSerialize() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ShouldSerializeSetPredicateOfObject">
            <summary>JsonProperty.set_ShouldSerialize(Predicate`1&lt;Object&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ToString01">
            <summary>JsonProperty.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.TypeNameHandlingGet">
            <summary>JsonProperty.get_TypeNameHandling() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.TypeNameHandlingSetNullableOfTypeNameHandling">
            <summary>JsonProperty.set_TypeNameHandling(Nullable`1&lt;TypeNameHandling&gt; value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.UnderlyingNameGet">
            <summary>JsonProperty.get_UnderlyingName() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.UnderlyingNameSetString">
            <summary>JsonProperty.set_UnderlyingName(String value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ValueProviderGet">
            <summary>JsonProperty.get_ValueProvider() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.ValueProviderSetIValueProvider">
            <summary>JsonProperty.set_ValueProvider(IValueProvider value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.WritableGet">
            <summary>JsonProperty.get_Writable() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.WritableSetBoolean">
            <summary>JsonProperty.set_Writable(Boolean value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonProperty.AllInstances.WritePropertyNameJsonWriter">
            <summary>JsonProperty.WritePropertyName(JsonWriter writer) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection">
            <summary>Newtonsoft.Json.Serialization.JsonPropertyCollection の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.#ctor(Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.ICollection)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.IEnumerable)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.IList)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.Generic.ICollection{Newtonsoft.Json.Serialization.JsonProperty})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Serialization.JsonProperty})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.Generic.IList{Newtonsoft.Json.Serialization.JsonProperty})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.Generic.IReadOnlyCollection{Newtonsoft.Json.Serialization.JsonProperty})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Bind(System.Collections.Generic.IReadOnlyList{Newtonsoft.Json.Serialization.JsonProperty})">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AddPropertyJsonProperty">
            <summary>JsonPropertyCollection.AddProperty(JsonProperty property) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.ConstructorType">
            <summary>JsonPropertyCollection.JsonPropertyCollection(Type type) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.GetClosestMatchPropertyString">
            <summary>JsonPropertyCollection.GetClosestMatchProperty(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.GetKeyForItemJsonProperty">
            <summary>JsonPropertyCollection.GetKeyForItem(JsonProperty item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.GetPropertyStringStringComparison">
            <summary>JsonPropertyCollection.GetProperty(String propertyName, StringComparison comparisonType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.TryGetValueStringJsonPropertyOut">
            <summary>JsonPropertyCollection.TryGetValue(String key, JsonProperty&amp; item) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances.AddPropertyJsonProperty">
            <summary>JsonPropertyCollection.AddProperty(JsonProperty property) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances.GetClosestMatchPropertyString">
            <summary>JsonPropertyCollection.GetClosestMatchProperty(String propertyName) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances.GetKeyForItemJsonProperty">
            <summary>JsonPropertyCollection.GetKeyForItem(JsonProperty item) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances.GetPropertyStringStringComparison">
            <summary>JsonPropertyCollection.GetProperty(String propertyName, StringComparison comparisonType) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonPropertyCollection.AllInstances.TryGetValueStringJsonPropertyOut">
            <summary>JsonPropertyCollection.TryGetValue(String key, JsonProperty&amp; item) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract">
            <summary>Newtonsoft.Json.Serialization.JsonStringContract の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.#ctor(Newtonsoft.Json.Serialization.JsonStringContract)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.ConstructorType">
            <summary>JsonStringContract.JsonStringContract(Type underlyingType) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimJsonStringContract.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter">
            <summary>Newtonsoft.Json.Serialization.MemoryTraceWriter の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.#ctor(Newtonsoft.Json.Serialization.MemoryTraceWriter)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.Bind(Newtonsoft.Json.Serialization.ITraceWriter)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.Constructor">
            <summary>MemoryTraceWriter.MemoryTraceWriter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.GetTraceMessages">
            <summary>MemoryTraceWriter.GetTraceMessages() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.LevelFilterGet">
            <summary>MemoryTraceWriter.get_LevelFilter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.LevelFilterSetTraceLevel">
            <summary>MemoryTraceWriter.set_LevelFilter(TraceLevel value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.ToString">
            <summary>MemoryTraceWriter.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.TraceTraceLevelStringException">
            <summary>MemoryTraceWriter.Trace(TraceLevel level, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances.GetTraceMessages">
            <summary>MemoryTraceWriter.GetTraceMessages() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances.LevelFilterGet">
            <summary>MemoryTraceWriter.get_LevelFilter() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances.LevelFilterSetTraceLevel">
            <summary>MemoryTraceWriter.set_LevelFilter(TraceLevel value) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances.ToString01">
            <summary>MemoryTraceWriter.ToString() の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimMemoryTraceWriter.AllInstances.TraceTraceLevelStringException">
            <summary>MemoryTraceWriter.Trace(TraceLevel level, String message, Exception ex) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute">
            <summary>Newtonsoft.Json.Serialization.OnErrorAttribute の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.#ctor(Newtonsoft.Json.Serialization.OnErrorAttribute)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.Constructor">
            <summary>OnErrorAttribute.OnErrorAttribute() の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimOnErrorAttribute.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider">
            <summary>Newtonsoft.Json.Serialization.ReflectionValueProvider の shim 型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.#ctor">
            <summary>新しい shim インスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.#ctor(Newtonsoft.Json.Serialization.ReflectionValueProvider)">
            <summary>指定されたインスタンスに対して新しい shim を初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.BehaveAsCurrent">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;Current&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.BehaveAsNotImplemented">
            <summary>shim が適用された型のすべてのメソッドに対して &apos;NotImplemented&apos; 動作を割り当てます</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.Bind(Newtonsoft.Json.Serialization.IValueProvider)">
            <summary>インターフェイスのメンバーを shim にバインドします。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.Behavior">
            <summary>shim が適用された型のすべてのメソッドに対して動作を割り当てます</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.ConstructorMemberInfo">
            <summary>ReflectionValueProvider.ReflectionValueProvider(MemberInfo memberInfo) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.GetValueObject">
            <summary>ReflectionValueProvider.GetValue(Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.SetValueObjectObject">
            <summary>ReflectionValueProvider.SetValue(Object target, Object value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.AllInstances">
            <summary>すべてのインスタンス メンバーに対して shim を定義します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.AllInstances.GetValueObject">
            <summary>ReflectionValueProvider.GetValue(Object target) の shim の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.ShimReflectionValueProvider.AllInstances.SetValueObjectObject">
            <summary>ReflectionValueProvider.SetValue(Object target, Object value) の shim の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver">
            <summary>Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateArrayContract(System.Type)">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateArrayContractType">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateConstructorParametersConstructorInfoJsonPropertyCollection">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateContract(System.Type)">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateContractType">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateDictionaryContract(System.Type)">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateDictionaryContractType">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateLinqContract(System.Type)">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateLinqContractType">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateMemberValueProviderMemberInfo">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateObjectContract(System.Type)">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateObjectContractType">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePrimitiveContractType">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePropertiesTypeMemberSerialization">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePropertyFromConstructorParameterJsonPropertyParameterInfo">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreatePropertyMemberInfoMemberSerialization">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateStringContract(System.Type)">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CreateStringContractType">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.GetSerializableMembers(System.Type)">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.GetSerializableMembersType">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.InitializeStub">
            <summary>type StubCamelCasePropertyNamesContractResolver の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>DefaultContractResolver.ResolveContract(Type type) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolveContractConverter(System.Type)">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolveContractConverterType">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolveContractType">
            <summary>DefaultContractResolver.ResolveContract(Type type) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>CamelCasePropertyNamesContractResolver.ResolvePropertyName(String propertyName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.ResolvePropertyNameString">
            <summary>CamelCasePropertyNamesContractResolver.ResolvePropertyName(String propertyName) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubCamelCasePropertyNamesContractResolver.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver">
            <summary>Newtonsoft.Json.Serialization.DefaultContractResolver のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.#ctor(System.Boolean)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateArrayContractType">
            <summary>DefaultContractResolver.CreateArrayContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateConstructorParametersConstructorInfoJsonPropertyCollection">
            <summary>DefaultContractResolver.CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateContract(System.Type)">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateContractType">
            <summary>DefaultContractResolver.CreateContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateDictionaryContractType">
            <summary>DefaultContractResolver.CreateDictionaryContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateLinqContractType">
            <summary>DefaultContractResolver.CreateLinqContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateMemberValueProviderMemberInfo">
            <summary>DefaultContractResolver.CreateMemberValueProvider(MemberInfo member) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateObjectContractType">
            <summary>DefaultContractResolver.CreateObjectContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePrimitiveContractType">
            <summary>DefaultContractResolver.CreatePrimitiveContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePropertiesTypeMemberSerialization">
            <summary>DefaultContractResolver.CreateProperties(Type type, MemberSerialization memberSerialization) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePropertyFromConstructorParameterJsonPropertyParameterInfo">
            <summary>DefaultContractResolver.CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreatePropertyMemberInfoMemberSerialization">
            <summary>DefaultContractResolver.CreateProperty(MemberInfo member, MemberSerialization memberSerialization) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateStringContract(System.Type)">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CreateStringContractType">
            <summary>DefaultContractResolver.CreateStringContract(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.GetSerializableMembersType">
            <summary>DefaultContractResolver.GetSerializableMembers(Type objectType) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.InitializeStub">
            <summary>type StubDefaultContractResolver の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolveContract(System.Type)">
            <summary>DefaultContractResolver.ResolveContract(Type type) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolveContractConverterType">
            <summary>DefaultContractResolver.ResolveContractConverter(Type objectType) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolveContractType">
            <summary>DefaultContractResolver.ResolveContract(Type type) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>DefaultContractResolver.ResolvePropertyName(String propertyName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.ResolvePropertyNameString">
            <summary>DefaultContractResolver.ResolvePropertyName(String propertyName) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultContractResolver.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder">
            <summary>Newtonsoft.Json.Serialization.DefaultSerializationBinder のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>DefaultSerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.BindToNameTypeStringOutStringOut">
            <summary>DefaultSerializationBinder.BindToName(Type serializedType, String&amp; assemblyName, String&amp; typeName) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>DefaultSerializationBinder.BindToType(String assemblyName, String typeName) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.BindToTypeStringString">
            <summary>DefaultSerializationBinder.BindToType(String assemblyName, String typeName) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.InitializeStub">
            <summary>type StubDefaultSerializationBinder の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubDefaultSerializationBinder.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs">
            <summary>Newtonsoft.Json.Serialization.ErrorEventArgs のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs.InitializeStub">
            <summary>type StubErrorEventArgs の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubErrorEventArgs.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubIContractResolver">
            <summary>Newtonsoft.Json.Serialization.IContractResolver のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIContractResolver.#ctor">
            <summary>type StubIContractResolver の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIContractResolver.nj::Newtonsoft#Json#Serialization#IContractResolver#ResolveContract(System.Type)">
            <summary>IContractResolver.ResolveContract(Type type) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIContractResolver.ResolveContractType">
            <summary>IContractResolver.ResolveContract(Type type) の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver">
            <summary>Newtonsoft.Json.Serialization.IReferenceResolver のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.#ctor">
            <summary>type StubIReferenceResolver の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.AddReferenceObjectStringObject">
            <summary>IReferenceResolver.AddReference(Object context, String reference, Object value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.GetReferenceObjectObject">
            <summary>IReferenceResolver.GetReference(Object context, Object value) の stub の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.IsReferencedObjectObject">
            <summary>IReferenceResolver.IsReferenced(Object context, Object value) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.nj::Newtonsoft#Json#Serialization#IReferenceResolver#AddReference(System.Object,System.String,System.Object)">
            <summary>IReferenceResolver.AddReference(Object context, String reference, Object value) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.nj::Newtonsoft#Json#Serialization#IReferenceResolver#GetReference(System.Object,System.Object)">
            <summary>IReferenceResolver.GetReference(Object context, Object value) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.nj::Newtonsoft#Json#Serialization#IReferenceResolver#IsReferenced(System.Object,System.Object)">
            <summary>IReferenceResolver.IsReferenced(Object context, Object value) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.nj::Newtonsoft#Json#Serialization#IReferenceResolver#ResolveReference(System.Object,System.String)">
            <summary>IReferenceResolver.ResolveReference(Object context, String reference) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIReferenceResolver.ResolveReferenceObjectString">
            <summary>IReferenceResolver.ResolveReference(Object context, String reference) の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter">
            <summary>Newtonsoft.Json.Serialization.ITraceWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter.#ctor">
            <summary>type StubITraceWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter.LevelFilterGet">
            <summary>ITraceWriter.get_LevelFilter() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter.nj::Newtonsoft#Json#Serialization#ITraceWriter#Trace(Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>ITraceWriter.Trace(TraceLevel level, String message, Exception ex) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter.TraceTraceLevelStringException">
            <summary>ITraceWriter.Trace(TraceLevel level, String message, Exception ex) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubITraceWriter.nj::Newtonsoft#Json#Serialization#ITraceWriter#LevelFilter">
            <summary>ITraceWriter.get_LevelFilter() の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider">
            <summary>Newtonsoft.Json.Serialization.IValueProvider のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider.#ctor">
            <summary>type StubIValueProvider の新しいインスタンスを初期化します</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider.GetValueObject">
            <summary>IValueProvider.GetValue(Object target) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider.nj::Newtonsoft#Json#Serialization#IValueProvider#GetValue(System.Object)">
            <summary>IValueProvider.GetValue(Object target) の スタブ の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider.nj::Newtonsoft#Json#Serialization#IValueProvider#SetValue(System.Object,System.Object)">
            <summary>IValueProvider.SetValue(Object target, Object value) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubIValueProvider.SetValueObjectObject">
            <summary>IValueProvider.SetValue(Object target, Object value) の stub の設定</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract">
            <summary>Newtonsoft.Json.Serialization.JsonArrayContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract.InitializeStub">
            <summary>type StubJsonArrayContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonArrayContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract">
            <summary>Newtonsoft.Json.Serialization.JsonDictionaryContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract.InitializeStub">
            <summary>type StubJsonDictionaryContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonDictionaryContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract">
            <summary>Newtonsoft.Json.Serialization.JsonLinqContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract.InitializeStub">
            <summary>type StubJsonLinqContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonLinqContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract">
            <summary>Newtonsoft.Json.Serialization.JsonObjectContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract.InitializeStub">
            <summary>type StubJsonObjectContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonObjectContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract">
            <summary>Newtonsoft.Json.Serialization.JsonPrimitiveContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract.InitializeStub">
            <summary>type StubJsonPrimitiveContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPrimitiveContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty">
            <summary>Newtonsoft.Json.Serialization.JsonProperty のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.InitializeStub">
            <summary>type StubJsonProperty の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.ToString">
            <summary>JsonProperty.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.ToString01">
            <summary>JsonProperty.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonProperty.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection">
            <summary>Newtonsoft.Json.Serialization.JsonPropertyCollection のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.ClearItems">
            <summary>KeyedCollection`2.ClearItems() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.ClearItems01">
            <summary>KeyedCollection`2.ClearItems() の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>JsonPropertyCollection.GetKeyForItem(JsonProperty item) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.GetKeyForItemJsonProperty">
            <summary>JsonPropertyCollection.GetKeyForItem(JsonProperty item) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.InitializeStub">
            <summary>type StubJsonPropertyCollection の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.InsertItem(System.Int32,Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>KeyedCollection`2.InsertItem(Int32 index, !1 item) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.InsertItemInt32JsonProperty">
            <summary>KeyedCollection`2.InsertItem(Int32 index, !1 item) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.RemoveItem(System.Int32)">
            <summary>KeyedCollection`2.RemoveItem(Int32 index) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.RemoveItemInt32">
            <summary>KeyedCollection`2.RemoveItem(Int32 index) の stub の設定</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.SetItem(System.Int32,Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>KeyedCollection`2.SetItem(Int32 index, !1 item) の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.SetItemInt32JsonProperty">
            <summary>KeyedCollection`2.SetItem(Int32 index, !1 item) の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonPropertyCollection.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract">
            <summary>Newtonsoft.Json.Serialization.JsonStringContract のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract.#ctor(System.Type)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract.InitializeStub">
            <summary>type StubJsonStringContract の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubJsonStringContract.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter">
            <summary>Newtonsoft.Json.Serialization.MemoryTraceWriter のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.#ctor">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.InitializeStub">
            <summary>type StubMemoryTraceWriter の新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.ToString">
            <summary>MemoryTraceWriter.ToString() の スタブ の設定</summary>
        </member>
        <member name="F:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.ToString01">
            <summary>MemoryTraceWriter.ToString() の stub の設定</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubMemoryTraceWriter.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider">
            <summary>Newtonsoft.Json.Serialization.ReflectionValueProvider のスタブ型</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>新しいインスタンスを初期化します</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider.InitializeStub">
            <summary>type StubReflectionValueProvider の新しいインスタンスを初期化します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider.CallBase">
            <summary>フォールバック動作の代わりに基本メソッドを呼び出すかどうかを示す値を取得または設定します</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider.InstanceBehavior">
            <summary>インスタンスの動作を取得または設定します。</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.Fakes.StubReflectionValueProvider.InstanceObserver">
            <summary>インスタンス オブザーバーを取得または設定します。</summary>
        </member>
    </members>
</doc>
